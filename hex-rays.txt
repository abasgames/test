/* This file was generated by the Hex-Rays decompiler version 8.4.0.240320.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <math.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

int sub_180001000();
int sub_180001010();
void *sub_180001020();
int sub_180001030(char *Buffer, char *Format, ...);
void __fastcall sub_180001090(_QWORD *a1);
void __stdcall guard_check_icall_nop(void *); // idb
_QWORD *__fastcall sub_1800010C0(_QWORD *a1);
void __fastcall sub_1800011C0(__int64 a1);
void __fastcall sub_1800011F0(_DWORD *a1);
void __fastcall sub_180001200(_QWORD *a1);
// void __stdcall unknown_libname_6(void *); idb
void __fastcall sub_180001250(char *a1);
void __fastcall sub_1800012A0(char *a1);
void __fastcall sub_180001440(_DWORD *a1);
void __fastcall sub_180001460(_QWORD *a1);
void __fastcall sub_180001520(char *a1);
void __fastcall sub_180001550(char *a1);
void __fastcall sub_180001570(_QWORD *a1);
void __fastcall sub_1800015D0(char *a1);
__int64 __fastcall CompareFunction(_DWORD *a1, _DWORD *a2);
__int64 __fastcall sub_180001620(__int64 a1, int a2);
void __fastcall sub_180001690(__int64 a1);
__int64 __fastcall sub_180001760(__int64 a1, int a2);
char *__fastcall sub_180001810(int *a1, unsigned int *a2);
__int64 __fastcall sub_180001960(__int64 a1);
__int64 __fastcall sub_180001A00(__int64 a1);
char *__fastcall sub_180001B00(char *a1);
__int64 __fastcall sub_180001B50(__int64 a1, int a2);
void __fastcall sub_180001C00(__int64 a1);
void __fastcall sub_180001CB0(__int64 a1);
__int64 __fastcall sub_180001D60(__int64 a1);
__int64 __fastcall sub_180001DD0(__int64 a1, int a2);
__int64 __fastcall sub_180001E80(__int64 a1, int a2);
__int64 __fastcall sub_180001ED0(__int64 a1, int a2);
__int64 __fastcall sub_180001FD0(__int64 a1, int a2);
__int64 __fastcall sub_1800020D0(__int64 a1, int a2);
void sub_180002220();
void __fastcall sub_1800022D0(__int64 a1);
void __fastcall sub_180002390(__int64 a1);
__int64 __fastcall sub_180002450(__int64 a1);
void sub_1800024D0();
__int64 PluginVersion();
__int64 __fastcall PluginProc(int a1, __int64 a2);
__int64 __fastcall sub_1800028B0(int a1, __int64 a2, HINSTANCE a3);
int sub_180002920(wchar_t *Buffer, wchar_t *Format, ...);
__int64 __fastcall sub_180002980(__int64 a1, HINSTANCE a2);
__int64 __fastcall sub_180002A70(__int64 a1, __int64 a2);
__int64 __fastcall sub_180002D40(__int64 a1, __int64 a2);
__int64 __fastcall sub_1800035C0(HWND hDlg); // idb
INT_PTR __fastcall DialogFunc(HWND a1, int a2, __int16 a3);
void *sub_180003A30();
int sub_180003A40(char *Buffer, char *Format, ...);
__int64 __fastcall sub_180003A90(__int64 a1, __int64 a2);
void __fastcall sub_180003AF0(__int64 a1);
__int64 __fastcall sub_180003B40(__int64 *a1, void *a2, unsigned int a3);
__int64 __fastcall sub_180003BA0(__int64 a1);
void __fastcall sub_180003BE0(__int64 a1);
void __fastcall sub_180003C30(__int64 a1);
__int64 __fastcall sub_180003C80(__int64 a1);
__int64 __fastcall sub_180003E10(__int64 a1, __int64 a2, const wchar_t *a3);
__int64 __fastcall sub_180003F40(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_180004F90(__int64 *a1, __int64 a2);
__int64 __fastcall sub_180005050(__int64 *a1, int a2, __int64 a3);
__int64 __fastcall sub_180005100(__int64 a1, __int64 a2, unsigned int a3, int a4, unsigned int a5, int *a6);
__int64 __fastcall sub_180005C80(__int64 a1, __int64 a2, int a3, unsigned int a4, int a5, int *a6, size_t Size);
__int64 __fastcall sub_180006250(__int64 *a1, __int64 a2, _DWORD *a3);
__int64 __fastcall sub_180006420(__int64 a1, __int64 a2, _DWORD *a3);
__int64 __fastcall sub_1800067D0(__int64 a1, const wchar_t *a2);
void __fastcall sub_1800068E0(__int64 a1);
void __fastcall sub_180006B30(__int64 a1);
__int64 __fastcall sub_180006F20(__int64 *a1, unsigned int *a2);
__int64 __fastcall sub_180006F90(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_1800077E0(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180007A40(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180007D40(__int64 a1, __int64 a2, __int64 a3, int a4);
__int64 __fastcall sub_180008650(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180008870(__int64 a1, unsigned int a2);
__int64 __fastcall sub_180008DC0(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_180008FC0(__int64 a1, int a2, unsigned int a3, unsigned int a4);
__int64 __fastcall sub_180009420(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_180009500(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5);
__int64 __fastcall sub_180009870(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
_BOOL8 __fastcall sub_180009990(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_18000A190(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000A5E0(__int64 a1, __int64 a2, unsigned int a3, int a4);
__int64 __fastcall sub_18000A7F0(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000AA90(__int64 a1, unsigned int *a2, __int64 a3, int a4);
__int64 __fastcall sub_18000B0F0(__int64 a1, unsigned int a2, __int64 a3, int a4);
__int64 __fastcall sub_18000B390(__int64 a1, __int64 a2);
__int64 __fastcall sub_18000B660(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_18000B870(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000BA90(__int64 a1, int a2);
__int64 __fastcall sub_18000C020(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000C0C0(__int64 *a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000C1B0(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_18000C5F0(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_18000CB20(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_18000D030(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_18000D570(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000D9F0(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000DC10(__int64 a1, __int64 a2, int a3);
__int64 __fastcall sub_18000DD30(__int64 a1);
__int64 __fastcall sub_18000DE40(__int64 a1, __int64 a2, unsigned int a3, int a4);
__int64 __fastcall sub_18000E400(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18000E710(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_18000E860(__int64 a1, __int64 a2, __int64 a3, int a4, int a5);
__int64 __fastcall sub_18000F210(__int64 a1, __int64 a2);
__int64 __fastcall sub_18000FBF0(__int64 a1, _DWORD *a2, __int64 a3);
__int64 __fastcall sub_18000FFA0(__int64 a1, unsigned int a2, _DWORD *a3);
void __fastcall sub_180010560(char *a1);
__int64 __fastcall sub_180010580(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_180010B10(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_180011140(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_180011770(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_180011D40(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_180012300(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180012640(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180012B60(__int64 a1, __int64 a2, unsigned int a3, int a4);
_BOOL8 __fastcall sub_180012DD0(__int64 a1, __int64 a2, __int64 a3, int a4);
__int64 __fastcall sub_180012ED0(__int64 a1, __int64 a2);
__int64 __fastcall sub_180013C40(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_180014610(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_180014820(__int64 a1, int a2, unsigned int a3, unsigned int a4);
__int64 __fastcall sub_180014C60(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_180014D40(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5);
__int64 __fastcall sub_180014F10(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_1800150F0(__int64 a1, __int64 a2, int a3);
void __fastcall sub_1800156A0(_QWORD *a1);
__int64 __fastcall sub_1800156B0(__int64 a1, _DWORD *a2);
__int64 __fastcall sub_1800160E0(__int64 a1, unsigned int a2, __int64 a3);
__int64 __fastcall sub_1800166C0(__int64 a1, unsigned int a2, __int64 a3);
__int64 __fastcall sub_180016CF0(__int64 a1, unsigned int a2, __int64 a3);
__int64 __fastcall sub_1800172F0(__int64 a1, unsigned int a2, unsigned __int32 *a3);
__int64 __fastcall sub_180017AB0(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_180018190(__int64 a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall sub_1800188D0(__int64 a1, unsigned int a2, unsigned __int32 *a3);
__int64 __fastcall sub_1800190D0(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_1800196F0(__int64 a1, __int64 a2, unsigned int a3, int a4);
__int64 __fastcall sub_1800198F0(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180019C40(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_180019F30(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18001A2F0(__int64 a1, __int64 a2, __int64 a3, int a4);
__int64 __fastcall sub_18001A460(__int64 a1, __int64 a2);
__int64 __fastcall sub_18001AC20(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_18001AE80(__int64 a1, int a2, unsigned int a3, unsigned int a4);
__int64 __fastcall sub_18001B340(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_18001B420(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5);
__int64 __fastcall sub_18001B660(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_18001B7D0(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
__int64 __fastcall sub_18001C9D0(__int64 a1, unsigned int a2, int a3);
__int64 __fastcall sub_18001CD00(__int64 a1, __int64 a2, int a3);
__int64 __fastcall sub_18001CE80(__int64 a1, __int64 a2, unsigned int a3, int a4);
__int64 __fastcall sub_18001D1F0(wchar_t *FullPath, __int64 a2);
BOOL __fastcall sub_18001D360(HWND hWnd, HWND a2);
__int64 __fastcall sub_18001D4E0(__int64 *a1, unsigned int *a2);
__int64 __fastcall sub_18001D5C0(__int64 *a1, unsigned int *a2);
__int64 __fastcall sub_18001D710(__int64 *a1, unsigned int *a2);
_BOOL8 __fastcall sub_18001D8D0(__int64 a1, unsigned int *a2);
__int64 __fastcall sub_18001DBF0(_OWORD *a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_18001DD00(float *a1, __int64 a2);
float __fastcall sub_18001DE90(unsigned __int16 a1);
_QWORD *__fastcall sub_18001DF30(__int64 a1, __int64 a2, WCHAR *a3);
__int64 __fastcall sub_18001DFF0(__int64 a1, __int64 a2, wchar_t *a3, _QWORD *a4);
__int64 __fastcall sub_18001E410(__int64 a1, _QWORD *a2, unsigned __int64 a3, int a4, __int64 a5);
__int64 __fastcall sub_18001E4A0(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_18001E550(char *a1, int *a2, __int64 a3, int *a4);
__int64 __fastcall sub_18001E750(__int64 a1);
__int64 __fastcall sub_18001E810(_QWORD *a1, int a2);
__int64 __fastcall sub_18001E940(_QWORD *a1, int a2, _BYTE *a3, int a4);
__int64 __fastcall sub_18001EA30(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_18001EB30(__int64 a1, int a2);
__int64 __fastcall sub_1800202F0(_QWORD *a1);
void *__fastcall sub_180020360(__int64 a1, int a2, int a3);
// __int64 __fastcall __crt_internal_free_policy::operator()<wchar_t>(); weak
__int64 __fastcall sub_180020380(unsigned int a1, unsigned __int8 *a2, unsigned __int64 a3);
__int64 __fastcall sub_180020660(int a1, unsigned __int16 *a2, unsigned int a3, _DWORD **a4, unsigned int *a5, _WORD *a6);
__int64 __fastcall sub_180020B70(unsigned __int8 **a1, int a2);
__int64 __fastcall sub_180021060(int a1, char *a2, unsigned __int64 a3);
__int64 __fastcall sub_180021570(int a1, char *a2, unsigned int a3);
__int64 __fastcall sub_180021580(unsigned __int8 *a1, _QWORD *a2, int a3, int a4);
__int64 __fastcall sub_180021870(__int64 a1, _DWORD *a2, _QWORD *a3, unsigned int *a4);
__int64 __fastcall sub_180021A90(unsigned __int64 a1, _DWORD *a2);
__int64 __fastcall sub_180021AF0(__int64 a1, __int64 a2, __int64 *a3, __int64 a4, unsigned int a5, __int64 a6, unsigned int a7, __int64 a8, unsigned int a9);
_BYTE *__fastcall sub_180022040(__int64 a1, __int64 a2);
__int64 __fastcall sub_1800221C0(__int64 a1, __int64 a2);
__int64 __fastcall sub_1800223E0(__int64 a1, __int64 a2, _DWORD *a3);
__int64 __fastcall sub_180022450(__int64 a1, __int64 a2, _DWORD *a3);
__int64 __fastcall sub_180022520(__int64 a1, __int64 a2, __int64 *a3);
__int64 __fastcall sub_1800226A0(__int64 a1, __int64 a2, int *a3);
__int64 __fastcall sub_180022720(_QWORD *Block);
__int64 __fastcall sub_180022770(__int64 a1);
__int64 __fastcall sub_180022830(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, unsigned int a6, __int64 a7, unsigned int a8);
__int64 __fastcall sub_180022880(__int64 a1, _OWORD *a2);
__int64 __fastcall sub_1800228A0(_QWORD *a1);
__int64 __fastcall sub_180022920(__int64 a1);
__int64 __fastcall sub_1800229E0(__int64 a1);
__int64 __fastcall sub_1800229F0(__int64 a1);
__int64 __fastcall sub_180022A10(__int64 a1, _DWORD *a2, _DWORD *a3, int a4, __int64 a5);
__int64 __fastcall sub_180022C90(__int64 a1, __int64 a2, int a3);
__int64 __fastcall sub_1800230A0(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall sub_180023360(__int64 a1);
__int64 __fastcall sub_180023380(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_1800233B0(__int64 a1);
int __fastcall sub_1800233F0(__int64 a1, FILE *a2);
int __fastcall sub_180023400(__int64 a1, FILE *a2);
int (__fastcall *__fastcall sub_180023410(FILE *(__fastcall **a1)(__int64 a1, const char *a2, char a3)))(__int64 a1, FILE *a2);
FILE *__fastcall sub_180023470(__int64 a1, const char *a2, char a3);
size_t __fastcall sub_1800234C0(__int64 a1, FILE *a2, void *a3, unsigned int a4);
__int64 __fastcall sub_1800234E0(__int64 a1, FILE *a2, __int64 a3, int a4);
__int64 __fastcall sub_180023540(__int64 a1, FILE *a2);
size_t __fastcall sub_180023550(__int64 a1, FILE *a2, const void *a3, unsigned int a4);
// void __cdecl _security_check_cookie(uintptr_t StackCookie);
void __cdecl j_j_j_free(void *Block);
// void __fastcall `eh vector destructor iterator'(void *, unsigned __int64, unsigned __int64, void (__stdcall *)(void *)); idb
void __cdecl j_j_free(void *Block);
void *__fastcall operator new(size_t Size); // idb
// void __fastcall `eh vector constructor iterator'(void *, unsigned __int64, unsigned __int64, void (__stdcall *)(void *), void (__stdcall *)(void *)); idb
char sub_180023784();
// int __cdecl atexit(void (__cdecl *)());
// void __noreturn _report_rangecheckfailure(void); weak
void __stdcall j__guard_check_icall_nop(void *); // idb
void sub_1800245BC();
void __fastcall sub_1800245CC();
void *sub_1800245F4();
__int64 sub_1800245FC();
void __fastcall sub_180024648();
_QWORD *__fastcall sub_180024694(_QWORD *a1, __int64 a2);
_QWORD *__fastcall sub_1800246D4(_QWORD *a1);
_QWORD *__fastcall sub_1800246F4(_QWORD *a1, __int64 a2);
_QWORD *__fastcall sub_180024734(_QWORD *a1);
_QWORD *__fastcall sub_180024840(_QWORD *a1, char a2);
// void *__cdecl memset(void *, int Val, size_t Size);
// __int64 __fastcall _std_type_info_destroy_list(_QWORD); weak
// __int64 __fastcall _std_exception_copy(_QWORD); weak
char sub_1800248F0();
__int64 sub_1800248F4();
// void *__cdecl memcpy(void *, const void *Src, size_t Size);
// double __cdecl sqrt(double X);
void sub_180024F30();
__int64 __fastcall sub_180024F80(); // weak

//-------------------------------------------------------------------------
// Data declarations

// extern int (__stdcall *GetDeviceCaps)(HDC hdc, int index);
// extern int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
// extern int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
// extern BOOL (__stdcall *SetCurrentDirectoryW)(LPCWSTR lpPathName);
// extern void (__stdcall *InitializeSListHead)(PSLIST_HEADER ListHead);
// extern HWND (__stdcall *GetDesktopWindow)();
// extern LRESULT (__stdcall *SendDlgItemMessageW)(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
// extern BOOL (__stdcall *SetDlgItemTextW)(HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
// extern BOOL (__stdcall *EndDialog)(HWND hDlg, INT_PTR nResult);
// extern int (__stdcall *ReleaseDC)(HWND hWnd, HDC hDC);
// extern BOOL (__stdcall *SetWindowPos)(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
// extern HDC (__stdcall *GetDC)(HWND hWnd);
// extern BOOL (__stdcall *GetWindowRect)(HWND hWnd, LPRECT lpRect);
// extern INT_PTR (__stdcall *DialogBoxParamW)(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
// extern char *(__cdecl *strstr)(const char *Str, const char *SubStr);
// extern size_t (__cdecl *wcstombs)(char *Dest, const wchar_t *Source, size_t MaxCount);
// extern size_t (__cdecl *mbstowcs)(wchar_t *Dest, const char *Source, size_t MaxCount);
// extern void (__cdecl *wsplitpath)(const wchar_t *FullPath, wchar_t *Drive, wchar_t *Dir, wchar_t *Filename, wchar_t *Ext);
// extern void *(__cdecl *malloc)(size_t Size);
// extern void (__cdecl *free)(void *Block);
// extern int (__cdecl *fclose)(FILE *Stream);
// extern size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream);
// extern FILE *(__cdecl *fopen)(const char *FileName, const char *Mode);
// extern __int64 (__cdecl *ftelli64)(FILE *Stream);
// extern int (__cdecl *fseeki64)(FILE *Stream, __int64 Offset, int Origin);
// extern int (__cdecl *ferror)(FILE *Stream);
// extern int (__cdecl *_stdio_common_vsscanf)(unsigned __int64 Options, const char *Buffer, size_t BufferCount, const char *Format, _locale_t Locale, va_list ArgList);
// extern size_t (__cdecl *fread)(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream);
// extern int (__cdecl *fseek)(FILE *Stream, int Offset, int Origin);
// extern int (__cdecl *ftell)(FILE *Stream);
// extern int (__cdecl *_stdio_common_vswprintf)(unsigned __int64 Options, wchar_t *Buffer, size_t BufferCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
// extern FILE *(__cdecl *wfopen)(const wchar_t *FileName, const wchar_t *Mode);
// extern int (__cdecl *_stdio_common_vsprintf)(unsigned __int64 Options, char *Buffer, size_t BufferCount, const char *Format, _locale_t Locale, va_list ArgList);
// extern int (__cdecl *stricmp)(const char *String1, const char *String2);
// extern int (__cdecl *wcsicmp)(const wchar_t *String1, const wchar_t *String2);
// extern void (__cdecl *qsort)(void *Base, size_t NumOfElements, size_t SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction CompareFunction);
void *std::exception::`vftable' = &unknown_libname_7; // weak
void *std::bad_alloc::`vftable' = &unknown_libname_7; // weak
void *std::bad_array_new_length::`vftable' = &unknown_libname_7; // weak
void *type_info::`vftable' = &sub_180024840; // weak
const wchar_t aGameloftBdaeIm[] = L"GameLoft BDAE Importer\r\n"; // idb
const wchar_t a35077b[] = L"3.50.77b"; // idb
const wchar_t aGameloftBdaeFi[] = L"GameLoft BDAE files (*.bdae)"; // idb
const wchar_t aBdae[] = L"bdae"; // idb
__int128 xmmword_1800254D0 = 0x20D09CF5CAC04B34E7C58A0F1B814D1LL; // weak
_UNKNOWN unk_1800254E0; // weak
_UNKNOWN unk_180025CE0; // weak
__int16 word_180025D60[24] =
{
  16,
  17,
  18,
  0,
  8,
  7,
  9,
  6,
  10,
  5,
  11,
  4,
  12,
  3,
  13,
  2,
  14,
  1,
  15,
  0,
  0,
  0,
  0,
  0
}; // weak
_UNKNOWN unk_180025D90; // weak
_UNKNOWN unk_180025DD0; // weak
_UNKNOWN unk_180025E10; // weak
_UNKNOWN unk_180025E50; // weak
int dword_180025E90[512] =
{
  0,
  1996959894,
  -301047508,
  -1727442502,
  124634137,
  1886057615,
  -379345611,
  -1637575261,
  249268274,
  2044508324,
  -522852066,
  -1747789432,
  162941995,
  2125561021,
  -407360249,
  -1866523247,
  498536548,
  1789927666,
  -205950648,
  -2067906082,
  450548861,
  1843258603,
  -187386543,
  -2083289657,
  325883990,
  1684777152,
  -43845254,
  -1973040660,
  335633487,
  1661365465,
  -99664541,
  -1928851979,
  997073096,
  1281953886,
  -715111964,
  -1570279054,
  1006888145,
  1258607687,
  -770865667,
  -1526024853,
  901097722,
  1119000684,
  -608450090,
  -1396901568,
  853044451,
  1172266101,
  -589951537,
  -1412350631,
  651767980,
  1373503546,
  -925412992,
  -1076862698,
  565507253,
  1454621731,
  -809855591,
  -1195530993,
  671266974,
  1594198024,
  -972236366,
  -1324619484,
  795835527,
  1483230225,
  -1050600021,
  -1234817731,
  1994146192,
  31158534,
  -1731059524,
  -271249366,
  1907459465,
  112637215,
  -1614814043,
  -390540237,
  2013776290,
  251722036,
  -1777751922,
  -519137256,
  2137656763,
  141376813,
  -1855689577,
  -429695999,
  1802195444,
  476864866,
  -2056965928,
  -228458418,
  1812370925,
  453092731,
  -2113342271,
  -183516073,
  1706088902,
  314042704,
  -1950435094,
  -54949764,
  1658658271,
  366619977,
  -1932296973,
  -69972891,
  1303535960,
  984961486,
  -1547960204,
  -725929758,
  1256170817,
  1037604311,
  -1529756563,
  -740887301,
  1131014506,
  879679996,
  -1385723834,
  -631195440,
  1141124467,
  855842277,
  -1442165665,
  -586318647,
  1342533948,
  654459306,
  -1106571248,
  -921952122,
  1466479909,
  544179635,
  -1184443383,
  -832445281,
  1591671054,
  702138776,
  -1328506846,
  -942167884,
  1504918807,
  783551873,
  -1212326853,
  -1061524307,
  -306674912,
  -1698712650,
  62317068,
  1957810842,
  -355121351,
  -1647151185,
  81470997,
  1943803523,
  -480048366,
  -1805370492,
  225274430,
  2053790376,
  -468791541,
  -1828061283,
  167816743,
  2097651377,
  -267414716,
  -2029476910,
  503444072,
  1762050814,
  -144550051,
  -2140837941,
  426522225,
  1852507879,
  -19653770,
  -1982649376,
  282753626,
  1742555852,
  -105259153,
  -1900089351,
  397917763,
  1622183637,
  -690576408,
  -1580100738,
  953729732,
  1340076626,
  -776247311,
  -1497606297,
  1068828381,
  1219638859,
  -670225446,
  -1358292148,
  906185462,
  1090812512,
  -547295293,
  -1469587627,
  829329135,
  1181335161,
  -882789492,
  -1134132454,
  628085408,
  1382605366,
  -871598187,
  -1156888829,
  570562233,
  1426400815,
  -977650754,
  -1296233688,
  733239954,
  1555261956,
  -1026031705,
  -1244606671,
  752459403,
  1541320221,
  -1687895376,
  -328994266,
  1969922972,
  40735498,
  -1677130071,
  -351390145,
  1913087877,
  83908371,
  -1782625662,
  -491226604,
  2075208622,
  213261112,
  -1831694693,
  -438977011,
  2094854071,
  198958881,
  -2032938284,
  -237706686,
  1759359992,
  534414190,
  -2118248755,
  -155638181,
  1873836001,
  414664567,
  -2012718362,
  -15766928,
  1711684554,
  285281116,
  -1889165569,
  -127750551,
  1634467795,
  376229701,
  -1609899400,
  -686959890,
  1308918612,
  956543938,
  -1486412191,
  -799009033,
  1231636301,
  1047427035,
  -1362007478,
  -640263460,
  1088359270,
  936918000,
  -1447252397,
  -558129467,
  1202900863,
  817233897,
  -1111625188,
  -893730166,
  1404277552,
  615818150,
  -1160759803,
  -841546093,
  1423857449,
  601450431,
  -1285129682,
  -1000256840,
  1567103746,
  711928724,
  -1274298825,
  -1022587231,
  1510334235,
  755167117,
  0,
  -1775237257,
  744558318,
  -1169094247,
  432303367,
  -1879807376,
  900031465,
  -1550490466,
  847829774,
  -1531388807,
  518641120,
  -1998990697,
  726447625,
  -1115901570,
  120436967,
  -1860321392,
  1678817053,
  -232738710,
  1215412723,
  -566116732,
  2111101466,
  -337322643,
  1370871028,
  -947530877,
  1452829715,
  -1062704284,
  2063164157,
  -322345590,
  1331429652,
  -647231901,
  1664946170,
  -183695219,
  -937398725,
  1578133836,
  -465477419,
  1920034722,
  -773586116,
  1205077067,
  -41611822,
  1807026853,
  -89606859,
  1821946434,
  -691422245,
  1090108588,
  -479406030,
  1969020741,
  -821176612,
  1497223595,
  -1406084826,
  973135441,
  -2142119992,
  375509183,
  -1242254303,
  600093526,
  -1718240561,
  262520248,
  -1632107992,
  143131999,
  -1294398266,
  619252657,
  -2021888209,
  290220120,
  -1424137791,
  1026385590,
  -1874731914,
  108124929,
  -1138699624,
  705746415,
  -1987726991,
  532002310,
  -1511735393,
  869578984,
  -1563883656,
  888733711,
  -1901590122,
  412618465,
  -1156748673,
  759000328,
  -1754504047,
  22832102,
  -195990677,
  1650551836,
  -667916923,
  1308648178,
  -309000596,
  2074411291,
  -1040971646,
  1472466933,
  -958812059,
  1357494034,
  -356991349,
  2089335292,
  -551690910,
  1227741717,
  -209923188,
  1699534075,
  1482797645,
  -833505990,
  1946205347,
  -500122668,
  1101389642,
  -678045635,
  1841615268,
  -67840301,
  1793681731,
  -52859340,
  1183344557,
  -793222950,
  1932330052,
  -451083469,
  1598818986,
  -914616867,
  1014039888,
  -1438580185,
  269487038,
  -2044719927,
  632645719,
  -1283100896,
  164914873,
  -1612422706,
  251256414,
  -1731602135,
  580440240,
  -1264003129,
  389919577,
  -2129808338,
  995933623,
  -1385383232,
  545503469,
  -1229733990,
  216184323,
  -1697468044,
  961009130,
  -1351101795,
  354867972,
  -2095653773,
  302736355,
  -2076482412,
  1047162125,
  -1470469510,
  198119140,
  -1644230253,
  665714698,
  -1315043459,
  1150488560,
  -761067385,
  1760690462,
  -20838807,
  1566008055,
  -882416256,
  1899392025,
  -419009682,
  1981535486,
  -533998711,
  1518000656,
  -867508889,
  1876933113,
  -101728626,
  1136572183,
  -712069024,
  -391915818,
  2123616673,
  -993863624,
  1391648591,
  -244859951,
  1733803174,
  -586762945,
  1261875784,
  -634712616,
  1276840623,
  -162921674,
  1618609217,
  -1007722273,
  1440704424,
  -275878351,
  2042521926,
  -1934401077,
  444819132,
  -1596821723,
  920807506,
  -1787360052,
  54987707,
  -1189739998,
  791020885,
  -1103381819,
  671858098,
  -1839549397,
  74101596,
  -1476405310,
  835702965,
  -1952523988,
  497999451,
  -1329437541,
  653419500,
  -1667011979,
  177433858,
  -1459222116,
  1060507371,
  -2056845454,
  324468741,
  -2109030507,
  343587042,
  -1372868229,
  941340172,
  -1685138798,
  230610405,
  -1209017220,
  568318731,
  -724380794,
  1122161905,
  -122430104,
  1854134815,
  -854147455,
  1529264630,
  -512249745,
  2001188632,
  -430307192,
  1885999103,
  -902101402,
  1544225041,
  -6396529,
  1773036280,
  -738235551,
  1171221526,
  2028079776,
  -288223785,
  1417872462,
  -1028455623,
  1629906855,
  -149528368,
  1296525641,
  -612929986,
  1248514478,
  -598026535,
  1712054080,
  -264513481,
  1403960489,
  -979452962,
  2144318023,
  -369117904,
  485670333,
  -1966949686,
  814986067,
  -1499220956,
  87478458,
  -1828268083,
  693624404,
  -1083713245,
  779773619,
  -1203084860,
  35350621,
  -1809092822,
  935201716,
  -1584526141,
  467600730,
  -1913716179
}; // weak
int dword_180026690[2087] =
{
  0,
  1701264198,
  -892438900,
  -1347858998,
  1324215129,
  730517535,
  -2078040619,
  -515594605,
  -1646537038,
  -121836044,
  1461035070,
  846371704,
  -751419925,
  -1236203859,
  435702631,
  2090823713,
  -523850971,
  -2053009309,
  705224105,
  1332733679,
  -1372897156,
  -884180166,
  1692743408,
  25300406,
  2099084695,
  410666705,
  -1210905829,
  -759943075,
  871405262,
  1452780936,
  -113319870,
  -1671832828,
  452743179,
  2140891981,
  -802019705,
  -1252713023,
  1410448210,
  829849620,
  -1629499938,
  -71764328,
  -2027452743,
  -499073537,
  1307177013,
  680446835,
  -909480480,
  -1397926234,
  50600812,
  1717772330,
  -96797906,
  -1621245848,
  821333410,
  1435743972,
  -1260973961,
  -776983759,
  2115593979,
  461266365,
  1742810524,
  42342106,
  -1389405424,
  -934780842,
  688703173,
  1282145667,
  -473780151,
  -2035971313,
  905486358,
  1352637264,
  -13183334,
  -1705906724,
  2064993103,
  510816265,
  -1311031869,
  -725875067,
  -1474070876,
  -851161630,
  1659699240,
  126499694,
  -422666755,
  -2086033733,
  738257777,
  1231540279,
  -717354189,
  -1336332171,
  535854527,
  2056734457,
  -1680613270,
  -21701844,
  1360893670,
  880455072,
  1223024001,
  763553479,
  -2111067379,
  -414412725,
  101201624,
  1668222366,
  -859422636,
  -1449034990,
  788852765,
  1248054107,
  -439712111,
  -2136097321,
  1642666820,
  76423170,
  -1423479352,
  -834644338,
  -1293998417,
  -675799575,
  2014400547,
  494300005,
  -63779338,
  -1722419536,
  922532730,
  1402699836,
  -809346248,
  -1432002434,
  84684212,
  1617630962,
  -2127581087,
  -465007833,
  1273087725,
  780598699,
  1377406346,
  931051212,
  -1730675962,
  -38748096,
  485779155,
  2039700885,
  -700837793,
  -1285739751,
  1810972716,
  244743018,
  -1589692768,
  -1000862234,
  622635893,
  1081839667,
  -271393287,
  -1967790401,
  -164981090,
  -1823625768,
  1021632530,
  1501813588,
  -1194885689,
  -576698751,
  1913195339,
  393097229,
  -1959269623,
  -296693681,
  1106877829,
  614377155,
  -975568816,
  -1598211306,
  252999388,
  1785941402,
  384581051,
  1938491133,
  -601732297,
  -1186631567,
  1476515554,
  1030155684,
  -1831886738,
  -139945176,
  1896681511,
  342502241,
  -1144822101,
  -559653395,
  1071709054,
  1518846008,
  -181498382,
  -1874217292,
  -321468779,
  -1984823853,
  639152153,
  1132432223,
  -1573179956,
  -950266230,
  1760910144,
  227696646,
  -1848919294,
  -190021564,
  1527106958,
  1046673096,
  -551137189,
  -1170117859,
  367535831,
  1888427409,
  202403248,
  1769428726,
  -958522564,
  -1548148614,
  1123911401,
  664452527,
  -2009862043,
  -313210077,
  1577705530,
  997120892,
  -1798859082,
  -241127952,
  283380579,
  1971531813,
  -634749457,
  -1085454679,
  -1009633656,
  -1498083890,
  152846340,
  1820031810,
  -1925194287,
  -396826985,
  1207020381,
  580292635,
  -1093711073,
  -609718183,
  1946238355,
  291899093,
  -266166202,
  -1790600448,
  988600010,
  1603005836,
  588553645,
  1181984491,
  -371528927,
  -1933717401,
  1845065460,
  144592306,
  -1489567624,
  -1034929346,
  1156952113,
  563252087,
  -1908685123,
  -346227205,
  169368424,
  1870618670,
  -1059705372,
  -1515120990,
  -651270525,
  -1136042555,
  333451279,
  1988569929,
  -1748791846,
  -224086372,
  1561197398,
  946520080,
  -1540154604,
  -1051451310,
  1862102424,
  194664158,
  -354488243,
  -1883649269,
  537953985,
  1165475207,
  971558310,
  1552938720,
  -215565526,
  -1774092180,
  1996826367,
  308420025,
  -1110749069,
  -659789003,
  0,
  -673021864,
  1957955313,
  -1554610519,
  -379056670,
  1049267642,
  -1646523629,
  1245612875,
  161553797,
  -565994019,
  2098535284,
  -1426613460,
  -523693977,
  925601855,
  -1803741546,
  1134532302,
  323107594,
  -996099246,
  1744190971,
  -1340818013,
  -97896728,
  768128688,
  -1902235623,
  1501343809,
  451094159,
  -855529769,
  1851203710,
  -1179279322,
  -208983187,
  610904885,
  -2025902692,
  1356705220,
  646215188,
  -244910516,
  1378906341,
  -2049773379,
  -806585354,
  403635118,
  -1151828729,
  1824193887,
  790981521,
  -121115703,
  1536257376,
  -1938559688,
  -968006029,
  296740395,
  -1292279678,
  1696325850,
  902188318,
  -500904634,
  1098009583,
  -1768895561,
  -592559876,
  189579428,
  -1474673139,
  2147010133,
  1013403803,
  -343551805,
  1221809770,
  -1624123854,
  -720413319,
  49143073,
  -1581556856,
  1985600464,
  1292430376,
  -1695912848,
  968682201,
  -295802239,
  -1537154614,
  1937924498,
  -791353541,
  121005923,
  1151988141,
  -1823772171,
  807270236,
  -402688252,
  -1379795889,
  2049145879,
  -646579522,
  244808422,
  1581963042,
  -1985456262,
  721342931,
  -48475765,
  -1222452544,
  1623218840,
  -1013523407,
  343170153,
  1475070631,
  -2146874625,
  593480790,
  -188920818,
  -1098660027,
  1767982877,
  -902315596,
  500515308,
  1804376636,
  -1133634972,
  523803853,
  -925229931,
  -2098948130,
  1426462598,
  -162492113,
  565318007,
  1647151033,
  -1244723231,
  379158856,
  -1048903408,
  -1958376869,
  1554450947,
  -947030,
  672337138,
  2026807606,
  -1356062354,
  209364935,
  -610785377,
  -1851347756,
  1178872972,
  -451761627,
  854600317,
  1903148211,
  -1500693269,
  98286146,
  -768001510,
  -1744326319,
  1340420361,
  -323766368,
  995178488,
  -1710106544,
  1307793416,
  -291119455,
  960978681,
  1937364402,
  -1533323798,
  130929475,
  -802204901,
  -1817131563,
  1146242445,
  -419118300,
  820396924,
  2061027383,
  -1388689297,
  242011846,
  -644985186,
  -1990991014,
  1588683522,
  -35134037,
  704996851,
  1614540472,
  -1210487072,
  344975433,
  -1016240111,
  -2131558689,
  1460698759,
  -196675538,
  597981302,
  1771762493,
  -1099402395,
  489616844,
  -892570220,
  -1131041212,
  1802972700,
  -937318219,
  532883693,
  1442685862,
  -2111888386,
  558474583,
  -156556017,
  -1254837311,
  1658205081,
  -1048529616,
  375534952,
  1549581859,
  -1950466437,
  686340306,
  -16107382,
  -1344826034,
  2016744726,
  -614231105,
  209785831,
  1186961580,
  -1856169740,
  839622237,
  -437707259,
  -1502181173,
  1905526931,
  -759001542,
  85986914,
  1327400233,
  -1728313999,
  1001030616,
  -330824832,
  -686214024,
  16495648,
  -1548930423,
  1951380177,
  1047607706,
  -376194622,
  1254440811,
  -1658339533,
  -558355971,
  156936613,
  -1442042100,
  2112794452,
  936387615,
  -533552057,
  1130636014,
  -1803115850,
  -1000665230,
  330927914,
  -1326511741,
  1728940507,
  758317712,
  -86932792,
  1502020705,
  -1905949639,
  -839249161,
  437818031,
  -1186065402,
  1856803934,
  613555989,
  -210722995,
  1344674276,
  -2017158724,
  -241352084,
  645906996,
  -2060893027,
  1389085893,
  418729870,
  -820523050,
  1816217983,
  -1146894041,
  -130261015,
  803135409,
  -1937221352,
  1533729088,
  290738699,
  -961097133,
  1709200634,
  -1308437342,
  -488670874,
  893253950,
  -1771339881,
  1099562959,
  196572292,
  -598346532,
  2130932341,
  -1461587411,
  -344038173,
  1016915131,
  -1614126574,
  1210638922,
  35023105,
  -705369767,
  1990356976,
  -1589579864,
  0,
  -279791903,
  97807235,
  -360260254,
  195614470,
  -453352985,
  243055749,
  -517076380,
  391228940,
  -134014739,
  310756751,
  -36211858,
  486111498,
  -206843925,
  422384265,
  -159407000,
  782457880,
  -1041110279,
  729233307,
  -1004174982,
  621513502,
  -900121089,
  551542941,
  -812820868,
  972222996,
  -694139659,
  1009162647,
  -747360394,
  844768530,
  -586640397,
  932073105,
  -656607120,
  1564915760,
  -1307308335,
  1486017459,
  -1212127918,
  1458466614,
  -1178805801,
  1396311221,
  -1133989292,
  1243027004,
  -1522163491,
  1338211775,
  -1601057954,
  1103085882,
  -1360168997,
  1147906745,
  -1422320552,
  1944445992,
  -1665707319,
  1982959531,
  -1721550518,
  2018325294,
  -1759541809,
  2107201709,
  -1832128948,
  1689537060,
  -1947796283,
  1633690023,
  -1909287098,
  1864146210,
  -2142360637,
  1791555233,
  -2053488576,
  -1165135776,
  1440728705,
  -1084679197,
  1342942466,
  -1322932378,
  1584861575,
  -1259221787,
  1537440260,
  -1378034068,
  1116629133,
  -1475824145,
  1197081358,
  -1502344854,
  1227276171,
  -1549770007,
  1290982408,
  -1808913288,
  2071763609,
  -1845868549,
  2125000986,
  -1618543746,
  1892961695,
  -1705864963,
  1962944028,
  -2088795532,
  1814901909,
  -2035553801,
  1777950486,
  -1999153806,
  1736827795,
  -1929167119,
  1649510416,
  -406075312,
  144277169,
  -501242925,
  223155506,
  -329048234,
  53586359,
  -373852971,
  115720756,
  -258316708,
  533254333,
  -179434017,
  438090558,
  -80563878,
  341837755,
  -18425127,
  297036856,
  -915893176,
  641344169,
  -860028981,
  602818858,
  -1027587250,
  764605871,
  -954980147,
  675716652,
  -566674876,
  829131941,
  -605204025,
  884991782,
  -711856830,
  985881507,
  -800749887,
  1058484256,
  -1368660351,
  1094275168,
  -1413509886,
  1156398051,
  -1513934457,
  1251051366,
  -1609082364,
  1329982693,
  -1187362675,
  1449721452,
  -1125244146,
  1404868079,
  -1299013749,
  1572874602,
  -1220086776,
  1477722857,
  -2134328679,
  1872366712,
  -2061709030,
  1783523323,
  -1956614753,
  1681054590,
  -1900804580,
  1642508541,
  -1751575403,
  2026611316,
  -1840414954,
  2099235319,
  -1674460269,
  1935897970,
  -1713002480,
  1991712497,
  -215130447,
  478144592,
  -151440078,
  430670803,
  -125466185,
  399982422,
  -44965324,
  302208213,
  -461573955,
  187582044,
  -509043906,
  251276767,
  -271308869,
  8819034,
  -369079240,
  89324249,
  -577895767,
  853324872,
  -665163478,
  923328459,
  -702098001,
  963928910,
  -739066324,
  1017120973,
  -891310939,
  630004292,
  -821311706,
  542732743,
  -1049134173,
  774229314,
  -995946464,
  737257153,
  350656225,
  -72081408,
  288554338,
  -27243645,
  525222375,
  -266537210,
  446311012,
  -171402107,
  62339309,
  -320500212,
  107172718,
  -382605937,
  136310763,
  -414361334,
  231441512,
  -493276535,
  977652473,
  -719881192,
  1066508666,
  -792520805,
  837623295,
  -557864162,
  876181116,
  -613695331,
  756311285,
  -1035546092,
  683675510,
  -946685545,
  649901043,
  -907148014,
  594073712,
  -868585839,
  1235234513,
  -1494050768,
  1282688338,
  -1557728333,
  1107884503,
  -1386590410,
  1205637716,
  -1467079499,
  1592885469,
  -1314703812,
  1529211742,
  -1267245633,
  1431918555,
  -1173626566,
  1351433304,
  -1075868999,
  1728279241,
  -2007907288,
  1658263882,
  -1920618581,
  1823188431,
  -2080828626,
  1769983564,
  -2043840339,
  1884478661,
  -1627362780,
  1971763014,
  -1697381977,
  2079984579,
  -1800880862,
  2116968512,
  -1854089567,
  0,
  -2019112125,
  -734228281,
  1402624900,
  1929914319,
  -189862772,
  -1489717496,
  546470987,
  -435138658,
  1639351517,
  841801561,
  -1249242086,
  -1793562543,
  314483474,
  1092941974,
  -964545579,
  391223677,
  -1862839746,
  -1016264262,
  1154204409,
  1683603122,
  -469797391,
  -1335546251,
  935585078,
  -247343389,
  1994857888,
  628966948,
  -1562669721,
  -2109083348,
  99564143,
  1450533355,
  -774657368,
  782447354,
  -1459226183,
  -90201539,
  2100914558,
  1571493173,
  -636625290,
  -1986558478,
  238112433,
  -927761052,
  1326822951,
  479194531,
  -1691801888,
  -1145349461,
  1008570856,
  1871170156,
  -400490193,
  972204935,
  -1101766460,
  -305251520,
  1785262083,
  1257933896,
  -849590517,
  -1631183729,
  425777100,
  -538778599,
  1480863578,
  199128286,
  -1938243683,
  -1393900586,
  726403221,
  2027311889,
  -9398190,
  1564894708,
  -622809417,
  -1988430541,
  249314928,
  776880699,
  -1444378248,
  -93138180,
  2111052223,
  -1151980950,
  1022419241,
  1869265581,
  -389254674,
  -933360219,
  1341703910,
  476224866,
  -1681631711,
  1243085961,
  -844023862,
  -1641321394,
  428713741,
  958389062,
  -1095167995,
  -316454015,
  1787134146,
  -1408781545,
  732002388,
  2017141712,
  -6428525,
  -552626984,
  1487495067,
  187892767,
  -1936339108,
  1944409870,
  -196895667,
  -1478899767,
  545197194,
  15560897,
  -2025079934,
  -724443130,
  1400318789,
  -1779099504,
  307483603,
  1103726679,
  -965786860,
  -419610785,
  1633416220,
  851554200,
  -1251515173,
  1689570931,
  -485358288,
  -1333240140,
  925799927,
  398256572,
  -1877335297,
  -1014990469,
  1143386680,
  -2103148051,
  84036270,
  1452806442,
  -784410007,
  -240343518,
  1980394849,
  630208229,
  -1573454426,
  -1165177880,
  1026162859,
  1857051439,
  -384397204,
  -914035673,
  1310861156,
  498629856,
  -1709262941,
  1553761398,
  -616935627,
  -2002774863,
  252108786,
  798270393,
  -1473091334,
  -72862850,
  2081355837,
  -1378004331,
  712743382,
  2044838482,
  -28899055,
  -556436134,
  1500757529,
  183100829,
  -1924190498,
  1271733515,
  -865348024,
  -1611559476,
  408372879,
  952449732,
  -1083969145,
  -319182333,
  1801412928,
  -1808795374,
  327758417,
  1075014101,
  -944397674,
  -416817443,
  1619072414,
  857427482,
  -1262647975,
  1916778124,
  -174490161,
  -1509743029,
  564522248,
  20418883,
  -2037294592,
  -720699004,
  1387121351,
  -2088869777,
  81308460,
  1464004776,
  -790348821,
  -260683872,
  2010156259,
  608884583,
  -1544807388,
  1701720049,
  -490150734,
  -1319977162,
  921990261,
  375785534,
  -1849638019,
  -1034249991,
  1174164410,
  -406147556,
  1617716575,
  871775963,
  -1269762664,
  -1799190061,
  325337744,
  1090394388,
  -950480297,
  31121794,
  -2038682943,
  -706318011,
  1379973638,
  1926415949,
  -176943858,
  -1494329718,
  558407113,
  -258263199,
  2000550946,
  614967206,
  -1560187675,
  -2087513938,
  70638573,
  1471119465,
  -804697302,
  378239231,
  -1859275844,
  -1028134856,
  1158751099,
  1703108400,
  -500853645,
  -1312829449,
  907609268,
  -915825434,
  1322211237,
  492112929,
  -1695299742,
  -1168000215,
  1036480618,
  1851599854,
  -369368915,
  796513144,
  -1461774277,
  -79346753,
  2095286524,
  1550972087,
  -606650380,
  -2008193936,
  267104051,
  -566753893,
  1503579864,
  168072540,
  -1918738913,
  -1389354412,
  714533143,
  2030875283,
  -22382128,
  942164485,
  -1081179834,
  -334177598,
  1806832001,
  1260416458,
  -863590775,
  -1625490163,
  414856782,
  0,
  1137419911,
  -946848556,
  -2074371501,
  -819525517,
  -1930645772,
  146224295,
  1266455072,
  -1638985498,
  -578505119,
  1507798066,
  437553845,
  1365776533,
  312720914,
  -1762122687,
  -718044474,
  2107199767,
  1045624720,
  -1173787197,
  -104674492,
  -1296148124,
  -243925021,
  1965974960,
  921027383,
  -472497679,
  -1608652938,
  608599333,
  1737350050,
  754010498,
  1866133253,
  -345934506,
  -1465199663,
  -97344722,
  -1174862423,
  1034067962,
  2120825213,
  890612573,
  1994264026,
  -226125943,
  -1320275698,
  1685959624,
  666244431,
  -1544712420,
  -534369893,
  -1420117061,
  -393142980,
  1825212271,
  788603368,
  -2018774471,
  -1000319810,
  1077661421,
  66087018,
  1217198666,
  189226189,
  -1893939554,
  -858300391,
  434430687,
  1513047128,
  -562766325,
  -1648396148,
  -691803476,
  -1794618325,
  290707064,
  1385722111,
  -194689443,
  -1213275942,
  871725705,
  1883167758,
  994201134,
  2022303913,
  -53316870,
  -1088826243,
  1781159611,
  702672956,
  -1380291985,
  -294531864,
  -1525850424,
  -423167921,
  1654481436,
  559334555,
  -1979967670,
  -902319667,
  1315711902,
  229084441,
  1188765497,
  84982206,
  -2125782035,
  -1031764630,
  397608876,
  1417191723,
  -802997384,
  -1813471745,
  -661385249,
  -1688229544,
  520368907,
  1557108108,
  240641395,
  1302086644,
  -909649497,
  -1978892512,
  -1049563904,
  -2101654649,
  115397076,
  1160476499,
  -1877412459,
  -741125358,
  1468582209,
  339963846,
  1598029286,
  485776225,
  -1733312206,
  -614176843,
  1942926436,
  805638883,
  -1268873040,
  -141218249,
  -1125532649,
  -14542192,
  2071560387,
  951199300,
  -310270846,
  -1370881531,
  705796182,
  1775910609,
  581348593,
  1634536054,
  -449408987,
  -1493354846,
  -389313350,
  -1426052547,
  794538094,
  1821382377,
  669811913,
  1680286286,
  -528697315,
  -1548280166,
  1988402268,
  894384859,
  -1324048248,
  -220264945,
  -1180462033,
  -93834584,
  2117314811,
  1039666812,
  -1789731411,
  -694584534,
  1388503417,
  285820926,
  1517671902,
  431911769,
  -1645876982,
  -567390323,
  186502475,
  1222011852,
  -863112801,
  -1891215592,
  -1002781384,
  -2014223425,
  61536748,
  1080123243,
  318320532,
  1362266387,
  -714534080,
  -1767721529,
  -572643353,
  -1642757792,
  441326387,
  1501937076,
  -1934213262,
  -813852171,
  1260782502,
  149792033,
  1133590273,
  5935494,
  -2080306219,
  -943018670,
  1868594819,
  749459460,
  -1460649385,
  -348396336,
  -1605929232,
  -477310857,
  1742162468,
  605875363,
  -248549787,
  -1293629214,
  918508209,
  1970598966,
  1040737814,
  2109980817,
  -107455806,
  -1168901051,
  481217255,
  1600482400,
  -616630733,
  -1728753484,
  -745946476,
  -1874697197,
  337247808,
  1473403079,
  -2099127807,
  -1054180218,
  1165092565,
  112869458,
  1304875634,
  235762933,
  -1974014298,
  -912439263,
  1631034352,
  586956151,
  -1498962140,
  -445906525,
  -1374645373,
  -304401148,
  1770041175,
  709560784,
  -8877290,
  -1129108079,
  954775490,
  2065895749,
  811565925,
  1939088866,
  -137379919,
  -1274799818,
  -425956919,
  -1520971954,
  554456349,
  1657271194,
  700146106,
  1785775933,
  -299147922,
  -1377764375,
  2027125039,
  991485864,
  -1086110213,
  -58137732,
  -1208716964,
  -197142565,
  1885621640,
  867166991,
  -1694156578,
  -657547687,
  1553269770,
  526295693,
  1411526829,
  401184298,
  -1817047943,
  -797332738,
  88746040,
  1182895807,
  -1025895188,
  -2129546645,
  -898817973,
  -1985575220,
  234691743,
  1312209432,
  0,
  -508144913,
  -2090085371,
  1658685162,
  114796555,
  -413009180,
  -2051245042,
  1678388961,
  212750615,
  -317193224,
  -1882880750,
  1853085693,
  175765788,
  -338711565,
  -1995297511,
  1755611126,
  408724270,
  -102043199,
  -1690863829,
  2055284164,
  512428837,
  -12756534,
  -1646207200,
  2086047183,
  351466041,
  -180051754,
  -1751570884,
  1982821587,
  304437810,
  -208467747,
  -1857122761,
  1895357656,
  817383005,
  -787606350,
  -1277980072,
  1382400183,
  913305174,
  -673596231,
  -1258014125,
  1420978364,
  1008080714,
  -576698971,
  -1082277041,
  1590399392,
  985775937,
  -612897362,
  -1180013756,
  1478244779,
  686089587,
  -917325924,
  -1416679050,
  1245275033,
  775114104,
  -813359209,
  -1386702467,
  1290718098,
  608875620,
  -973281653,
  -1490984863,
  1184313998,
  580721775,
  -1020572032,
  -1577662358,
  1077975685,
  1617989050,
  -2117673131,
  -484746817,
  44895056,
  1722230193,
  -2028898466,
  -439553612,
  75146075,
  1826544813,
  -1922527678,
  -273348440,
  235100743,
  1779004582,
  -1950407095,
  -379412317,
  148173388,
  2016161428,
  -1717928837,
  -79168879,
  452044926,
  2130413215,
  -1622289296,
  -40873318,
  472252533,
  1954709379,
  -1791742612,
  -135681146,
  375388521,
  1918228360,
  -1813805721,
  -247594099,
  277369186,
  1355336679,
  -1317103352,
  -744284190,
  840256781,
  1444897772,
  -1213648637,
  -713771031,
  885187846,
  1550228208,
  -1110390753,
  -552775947,
  1052449818,
  1521562363,
  -1157144556,
  -639965442,
  946648081,
  1217685705,
  -1457374682,
  -872432436,
  709488163,
  1313063106,
  -1342860755,
  -853011257,
  748570152,
  1144666590,
  -1517524175,
  -950932005,
  652721972,
  1122865621,
  -1554267334,
  -1048164912,
  540022591,
  -2115605586,
  1615870273,
  42844075,
  -482611900,
  -2026781787,
  1720160586,
  73013152,
  -437500593,
  -1924646215,
  1828612182,
  237235900,
  -275399597,
  -1952476494,
  1781121117,
  150226615,
  -381545384,
  -1715812224,
  2014091887,
  449911941,
  -77115798,
  -1620221813,
  2128294500,
  470201486,
  -38738335,
  -1793812073,
  1956825976,
  377441682,
  -137814147,
  -1815924324,
  1920295795,
  279504281,
  -249645194,
  -1319227917,
  1357414172,
  842398198,
  -746345703,
  -1215724040,
  1447024407,
  887247357,
  -715914478,
  -1108312860,
  1548103179,
  1050388705,
  -550634994,
  -1155017489,
  1519486464,
  944505066,
  -637906427,
  -1459450147,
  1219812402,
  711547608,
  -874575817,
  -1344985386,
  1315140665,
  750711507,
  -855072708,
  -1515397174,
  1142590757,
  650578895,
  -948872928,
  -1552189503,
  1120740654,
  537961412,
  -1046023893,
  -510204396,
  2143483,
  1660760593,
  -2092211970,
  -415150561,
  116858096,
  1680513562,
  -2053322507,
  -315050237,
  210691564,
  1850958598,
  -1880804887,
  -336650488,
  173624807,
  1753533197,
  -1993172510,
  -104184518,
  410785749,
  2057408831,
  -1692941360,
  -14815951,
  514572254,
  2088122676,
  -1648333861,
  -177990611,
  349324994,
  1980743720,
  -1749445945,
  -206324698,
  302378697,
  1893230627,
  -1855046964,
  -785473463,
  815329958,
  1380283468,
  -1275910493,
  -671545278,
  911170221,
  1418910791,
  -1255895384,
  -578752162,
  1010213809,
  1592468827,
  -1084393548,
  -615032491,
  987827130,
  1480363344,
  -1182081089,
  -915274905,
  683954568,
  1243207522,
  -1414560371,
  -811226260,
  773060995,
  1288601449,
  -1384632954,
  -975416720,
  610926751,
  1186432629,
  -1493052262,
  -1022625157,
  582854804,
  1080045182,
  -1579778927,
  0,
  1484841687,
  -251218828,
  -1450813789,
  -502437655,
  -1165129154,
  319544477,
  1267416650,
  -2061655799,
  -576896034,
  1947932029,
  748418986,
  1729153504,
  1066412855,
  -1776910956,
  -828989629,
  171655699,
  1388028100,
  -79825305,
  -1547889488,
  -399103238,
  -1330198483,
  422616718,
  1102085209,
  -1893276902,
  -676986419,
  2116048750,
  648066489,
  1831570419,
  900426020,
  -1674756217,
  -995238576,
  343311398,
  1291216625,
  -445632430,
  -1108290939,
  -159650609,
  -1359278568,
  125655227,
  1610463852,
  -1855249105,
  -907294728,
  1617793371,
  955085708,
  1936084422,
  736538385,
  -2107573838,
  -622847131,
  508413493,
  1187849442,
  -280268223,
  -1211395946,
  -62869796,
  -1530901493,
  222698152,
  1439103103,
  -1689229508,
  -1009744405,
  1784075080,
  852898207,
  2036142037,
  568192258,
  -2007254111,
  -790931082,
  686557261,
  1886186138,
  -638927815,
  -2123735314,
  -891199324,
  -1839103373,
  1005049040,
  1667708423,
  -1376671420,
  -177124461,
  1559698736,
  74973159,
  1341964717,
  394011514,
  -1090882087,
  -428173554,
  584534622,
  2052565129,
  -741212630,
  -1957618435,
  -1059446089,
  -1738882976,
  836540099,
  1767666708,
  -1479873705,
  -11925120,
  1456234275,
  239910388,
  1170703294,
  491217257,
  -1262405686,
  -331229923,
  1016761451,
  1679453884,
  -845400033,
  -1793271096,
  -560470910,
  -2045311403,
  798052598,
  1997648417,
  -1182323358,
  -519581771,
  1216452886,
  268532673,
  1535788427,
  51029852,
  -1433603585,
  -234089688,
  916573816,
  1847667887,
  -945325556,
  -1624794917,
  -726882671,
  -1943255994,
  631902949,
  2099966002,
  -1279496335,
  -348353114,
  1119542021,
  440023506,
  1370556312,
  154264911,
  -1598573588,
  -130592453,
  1356337562,
  140047181,
  -1579244050,
  -111261895,
  -1294632589,
  -363488348,
  1137954055,
  458436560,
  -708464493,
  -1924836796,
  616760551,
  2084824624,
  935909498,
  1867004589,
  -959550450,
  -1639018791,
  1524847497,
  40087902,
  -1410996227,
  -211483350,
  -1192346784,
  -529606217,
  1239977748,
  292056515,
  -536939904,
  -2021781417,
  788023028,
  1987617827,
  1039374953,
  1702066366,
  -856347107,
  -1804219190,
  1152292284,
  472807275,
  -1247272504,
  -316095713,
  -1499202219,
  -31252606,
  1470449953,
  254127094,
  -1045220171,
  -1724656030,
  817201345,
  1748328982,
  599678044,
  2067709579,
  -759633880,
  -1976038657,
  1318442927,
  370488696,
  -1080859685,
  -418152180,
  -1399275706,
  -199729775,
  1570638642,
  85912037,
  -880249178,
  -1828154255,
  982434514,
  1645092869,
  696589903,
  1896217752,
  -662459845,
  -2147268372,
  2016680407,
  548731648,
  -1993167453,
  -776843404,
  -1707511490,
  -1028025367,
  1799341386,
  868165533,
  -47597346,
  -1515628023,
  204410026,
  1420815997,
  522506295,
  1201943264,
  -299735997,
  -1230862700,
  1913609156,
  714062099,
  -2096500816,
  -611775129,
  -1878904019,
  -930950662,
  1627686745,
  964978062,
  -149751091,
  -1349380070,
  101994169,
  1586801774,
  354390564,
  1302294771,
  -468113840,
  -1130773369,
  1816305137,
  885161766,
  -1656477307,
  -976958638,
  -1907362536,
  -691071025,
  2135507308,
  667526075,
  -379634440,
  -1310728657,
  408520844,
  1087990363,
  189944849,
  1406318278,
  -95100827,
  -1563163982,
  1719263202,
  1056521525,
  -1753257066,
  -805336767,
  -2072725749,
  -587967012,
  1970406271,
  770892200,
  -479953173,
  -1142645700,
  308464287,
  1256335432,
  23664130,
  1508504789,
  -261119370,
  -1460715359,
  0,
  1178298213,
  -1938370870,
  -900879953,
  1508633934,
  533760555,
  -711122044,
  -1817819935,
  -1294541923,
  -185746184,
  1050678615,
  2023453234,
  -348309805,
  -1392094794,
  1733031961,
  561028988,
  632014560,
  1670422917,
  -1445132246,
  -270110897,
  2084580270,
  981159115,
  -264837788,
  -1240628735,
  -1753408131,
  -783910376,
  453759927,
  1563473106,
  -828968909,
  -2001889450,
  1121992441,
  81484188,
  189856794,
  1298897791,
  -2027539760,
  -1055042123,
  1387991380,
  343963185,
  -556933218,
  -1728661253,
  -1182390393,
  -4374302,
  904980813,
  1942720040,
  -529675575,
  -1504268884,
  1813709827,
  706765670,
  788216570,
  1757437343,
  -1567755216,
  -457796779,
  1997592500,
  824946897,
  -77194882,
  -1117946341,
  -1674714777,
  -636058110,
  274411437,
  1449150664,
  -976876503,
  -2080543924,
  1236320995,
  260810118,
  379648053,
  1352376144,
  -1697237249,
  -588426854,
  1330320763,
  158364190,
  -1019356239,
  -2063156012,
  -1535761496,
  -498252595,
  671149410,
  1849395719,
  -39989530,
  -1146705533,
  1911226412,
  936404809,
  856374997,
  1966102960,
  -1082265569,
  -112814214,
  1793119131,
  752596222,
  -426369711,
  -1599243724,
  -2116164280,
  -941194707,
  229321602,
  1267748071,
  -667547642,
  -1643286685,
  1413531340,
  310092201,
  502268975,
  1540055882,
  -1853437211,
  -675435136,
  1142679905,
  35687940,
  -932370517,
  -1906949938,
  -1356406862,
  -383928105,
  592449912,
  1701541405,
  -154324228,
  -1326033511,
  2059140150,
  1015061331,
  945537743,
  2120263082,
  -1272116219,
  -233411744,
  1638936449,
  663439588,
  -305733301,
  -1409448402,
  -1970464430,
  -860455369,
  117168024,
  1086370045,
  -748227556,
  -1789029511,
  1594899158,
  422272435,
  742453611,
  1786484238,
  -1607057503,
  -435332924,
  1974148133,
  865106752,
  -102903057,
  -1075399286,
  -1634325770,
  -659731053,
  316728380,
  1423672153,
  -948058184,
  -2126077731,
  1259014514,
  221277719,
  166410123,
  1339052270,
  -2053244607,
  -1012490716,
  1342233285,
  373013920,
  -596241393,
  -1706200214,
  -1153569770,
  -49902733,
  927671004,
  1903183289,
  -489291432,
  -1527945667,
  1856032658,
  681289975,
  655363441,
  1630235156,
  -1419328581,
  -312630050,
  2130436159,
  952141658,
  -225628427,
  -1263122032,
  -1782130964,
  -738348663,
  430970918,
  1602977603,
  -869450846,
  -1978245945,
  1079768424,
  106992141,
  45861777,
  1149283572,
  -1899166373,
  -923377090,
  1531979487,
  493568442,
  -685316075,
  -1860333712,
  -1335029748,
  -162105495,
  1008459462,
  2048965027,
  -377029310,
  -1346528729,
  1710240648,
  600528109,
  987760990,
  2094755387,
  -1231632492,
  -257056527,
  1661723664,
  623936373,
  -277009702,
  -1455010369,
  -2009673021,
  -837962330,
  71310345,
  1115388780,
  -774029427,
  -1746511640,
  1571549511,
  462460450,
  525062078,
  1500555483,
  -1824718476,
  -721000943,
  1184899824,
  10175893,
  -891884486,
  -1930589345,
  -1382214621,
  -341413050,
  569105129,
  1741733260,
  -193529491,
  -1303536120,
  2013280167,
  1044074690,
  833680708,
  2005635617,
  -1111082098,
  -67281685,
  1750800394,
  778076015,
  -466757952,
  -1575571035,
  -2090455335,
  -983742020,
  252764179,
  1227589494,
  -628243561,
  -1665751822,
  1459293533,
  281045560,
  337327012,
  1377850561,
  -1737622162,
  -564749813,
  1307631338,
  197900687,
  -1048178656,
  -2017626299,
  -1496455111,
  -520712356,
  716908275,
  1820344726,
  -14285449,
  -1189256686,
  1934674877,
  896249048,
  1073741824,
  536870912,
  134217728,
  8388608,
  32768,
  -306674912,
  -1310281582,
  -1603656425,
  -312312402,
  -1999551385,
  -675545494,
  -331055343,
  -1904303760,
  1680310286,
  1296546528,
  167662735,
  -2088424177,
  808857370,
  2069535939,
  838779241,
  -1611922902,
  1821240772,
  366380877,
  1608415822,
  -1160180169,
  776888047,
  1319870996,
  -1465617728,
  1117427358,
  344797226,
  -1005869360,
  -991810500,
  65547,
  6,
  465362107,
  207,
  -2048144761,
  -1640531535,
  13
}; // weak
const wchar_t aUnknownFileHea[] = L"Unknown file header: GCBF"; // idb
const wchar_t aBresFileHeader[] = L"BRES file header ID not found.\r\nThis appears to be a PKZip compressed file."; // idb
const wchar_t aBresFileHeader_0[] = L"BRES file header ID not found."; // idb
__int128 xmmword_180028E60 = 1065353216LL; // weak
__int128 xmmword_180028E70 = 4575657221408423936LL; // weak
__int128 xmmword_180028E80 = 0x3F8000000000000000000000LL; // weak
__int128 xmmword_180028E90 = 0x3000000020000000100000000LL; // weak
__int128 xmmword_180028EA0 = 0x3F800000000000000000000000000000LL; // weak
__int128 xmmword_180028EB0 = 0x3F8000003F8000003F8000003F800000LL; // weak
__int128 xmmword_180028EC0 = 0xFFFFFFFF000000000000000000000000LL; // weak
_QWORD qword_180029700[2] = { 0LL, 0LL }; // weak
_QWORD qword_180029710[2] = { 0LL, 0LL }; // weak
int dword_180030034 = 1; // weak
union _SLIST_HEADER stru_1800306B0; // weak
_UNKNOWN unk_1800306C0; // weak
__int64 qword_1800306D0; // weak
void *Block; // idb
__int64 qword_1800306E0; // weak
__int64 qword_1800306F0; // weak
int dword_1800306F8; // weak
void *qword_180030700; // idb
int dword_180030708; // weak
void *qword_180030710; // idb
int dword_180030718; // weak
__int64 qword_180030720; // weak
int dword_180030728; // weak
void *qword_180030730; // idb
int dword_180030738; // weak
void *qword_180030740; // idb
int dword_180030748; // weak
wchar_t FullPath; // idb
_UNKNOWN unk_180030958; // weak
_UNKNOWN unk_180030960; // weak


//----- (0000000180001000) ----------------------------------------------------
int sub_180001000()
{
  return atexit(sub_180024F30);
}

//----- (0000000180001010) ----------------------------------------------------
int sub_180001010()
{
  return atexit((void (__cdecl *)())sub_180024F80);
}
// 180024F80: using guessed type __int64 __fastcall sub_180024F80();

//----- (0000000180001020) ----------------------------------------------------
void *sub_180001020()
{
  return &unk_1800306C0;
}

//----- (0000000180001030) ----------------------------------------------------
int sub_180001030(char *Buffer, char *Format, ...)
{
  _QWORD *v4; // rax
  int result; // eax
  va_list va; // [rsp+60h] [rbp+18h] BYREF

  va_start(va, Format);
  v4 = sub_180001020();
  result = _stdio_common_vsprintf(*v4 | 1LL, Buffer, 0xFFFFFFFFFFFFFFFFuLL, Format, 0LL, va);
  if ( result < 0 )
    return -1;
  return result;
}

//----- (0000000180001090) ----------------------------------------------------
void __fastcall sub_180001090(_QWORD *a1)
{
  *a1 = -1LL;
  a1[1] = -1LL;
}

//----- (00000001800010C0) ----------------------------------------------------
_QWORD *__fastcall sub_1800010C0(_QWORD *a1)
{
  _QWORD *result; // rax

  `eh vector constructor iterator'(
    a1 + 1,
    0x10uLL,
    0xAuLL,
    (void (__stdcall *)(void *))sub_180001090,
    guard_check_icall_nop);
  result = a1;
  *a1 = 10LL;
  a1[1] = -1LL;
  a1[2] = -1LL;
  a1[3] = -1LL;
  a1[4] = -1LL;
  a1[5] = -1LL;
  a1[6] = -1LL;
  a1[7] = -1LL;
  a1[8] = -1LL;
  a1[9] = -1LL;
  a1[10] = -1LL;
  a1[11] = -1LL;
  a1[12] = -1LL;
  a1[13] = -1LL;
  a1[14] = -1LL;
  a1[15] = -1LL;
  a1[16] = -1LL;
  a1[17] = -1LL;
  a1[18] = -1LL;
  a1[19] = -1LL;
  a1[20] = -1LL;
  return result;
}

//----- (00000001800011C0) ----------------------------------------------------
void __fastcall sub_1800011C0(__int64 a1)
{
  `eh vector destructor iterator'((void *)(a1 + 8), 0x10uLL, 0xAuLL, guard_check_icall_nop);
}

//----- (00000001800011F0) ----------------------------------------------------
void __fastcall sub_1800011F0(_DWORD *a1)
{
  *(_QWORD *)a1 = 0LL;
  a1[2] = 0;
  *((_QWORD *)a1 + 2) = 0LL;
}

//----- (0000000180001200) ----------------------------------------------------
void __fastcall sub_180001200(_QWORD *a1)
{
  void *v2; // rcx

  v2 = (void *)a1[2];
  if ( v2 )
  {
    j_j_free(v2);
    a1[2] = 0LL;
  }
  *((_DWORD *)a1 + 2) = 0;
}

//----- (0000000180001250) ----------------------------------------------------
void __fastcall sub_180001250(char *a1)
{
  *(_QWORD *)(a1 + 12) = 1065353216LL;
  *((_DWORD *)a1 + 7) = 1065353216;
  *(_OWORD *)a1 = xmmword_180028EB0;
  *((_DWORD *)a1 + 8) = 1124073472;
  *((_DWORD *)a1 + 9) = 1065353216;
  *((_QWORD *)a1 + 5) = -1LL;
  *((_OWORD *)a1 + 1) = xmmword_180028EA0;
  *((_DWORD *)a1 + 12) = -1;
  a1[52] = 0;
}
// 180028EA0: using guessed type __int128 xmmword_180028EA0;
// 180028EB0: using guessed type __int128 xmmword_180028EB0;

//----- (00000001800012A0) ----------------------------------------------------
void __fastcall sub_1800012A0(char *a1)
{
  *(_QWORD *)(a1 + 1316) = 0LL;
  *((_QWORD *)a1 + 166) = 0LL;
  *((_QWORD *)a1 + 169) = 1065353216LL;
  *(_QWORD *)(a1 + 1372) = 1065353216LL;
  *((_QWORD *)a1 + 174) = 1065353216LL;
  *((_DWORD *)a1 + 353) = 1065353216;
  *((_QWORD *)a1 + 177) = 1065353216LL;
  *(_QWORD *)(a1 + 1436) = 1065353216LL;
  *((_QWORD *)a1 + 182) = 1065353216LL;
  *((_DWORD *)a1 + 369) = 1065353216;
  *a1 = 0;
  a1[260] = 0;
  a1[520] = 0;
  a1[780] = 0;
  a1[1040] = 0;
  *(_QWORD *)(a1 + 1300) = -1LL;
  *((_DWORD *)a1 + 327) = -1;
  *((_QWORD *)a1 + 164) = _mm_unpacklo_ps((__m128)0LL, (__m128)0LL).m128_u64[0];
  *((_DWORD *)a1 + 330) = 0;
  *(_QWORD *)(a1 + 1324) = _mm_unpacklo_ps((__m128)0x3F800000u, (__m128)0x3F800000u).m128_u64[0];
  *((_DWORD *)a1 + 333) = 1065353216;
  *(_OWORD *)(a1 + 1336) = xmmword_180028EA0;
  *((_QWORD *)a1 + 169) = 1065353216LL;
  *((_QWORD *)a1 + 170) = 0LL;
  *((_DWORD *)a1 + 342) = 0;
  *(_QWORD *)(a1 + 1372) = 1065353216LL;
  *(_QWORD *)(a1 + 1380) = 0LL;
  *((_DWORD *)a1 + 347) = 0;
  *((_QWORD *)a1 + 174) = 1065353216LL;
  *((_QWORD *)a1 + 175) = 0LL;
  *((_DWORD *)a1 + 352) = 0;
  *((_DWORD *)a1 + 353) = 1065353216;
  *((_QWORD *)a1 + 177) = 1065353216LL;
  *((_QWORD *)a1 + 178) = 0LL;
  *((_DWORD *)a1 + 358) = 0;
  *(_QWORD *)(a1 + 1436) = 1065353216LL;
  *(_QWORD *)(a1 + 1444) = 0LL;
  *((_DWORD *)a1 + 363) = 0;
  *((_QWORD *)a1 + 182) = 1065353216LL;
  *((_QWORD *)a1 + 183) = 0LL;
  *((_DWORD *)a1 + 368) = 0;
  *((_DWORD *)a1 + 369) = 1065353216;
}
// 180028EA0: using guessed type __int128 xmmword_180028EA0;

//----- (0000000180001440) ----------------------------------------------------
void __fastcall sub_180001440(_DWORD *a1)
{
  *a1 = 0;
  a1[1] = -1;
}

//----- (0000000180001460) ----------------------------------------------------
void __fastcall sub_180001460(_QWORD *a1)
{
  _QWORD *v1; // rax
  __int64 v3; // rdx

  v1 = a1 + 3;
  *(_QWORD *)((char *)a1 + 4) = 0LL;
  *(_DWORD *)a1 = 0;
  v3 = 2LL;
  a1[2] = 0LL;
  *((_DWORD *)a1 + 3) = 0;
  do
  {
    *v1++ = 0LL;
    --v3;
  }
  while ( v3 );
  `eh vector constructor iterator'(
    (char *)a1 + 44,
    8uLL,
    4uLL,
    (void (__stdcall *)(void *))sub_180001440,
    guard_check_icall_nop);
  *a1 = _mm_unpacklo_ps((__m128)0LL, (__m128)0LL).m128_u64[0];
  *(_QWORD *)((char *)a1 + 12) = _mm_unpacklo_ps((__m128)0LL, (__m128)0LL).m128_u64[0];
  *((_DWORD *)a1 + 2) = 0;
  *((_DWORD *)a1 + 5) = 0;
  a1[3] = _mm_unpacklo_ps((__m128)0LL, (__m128)0LL).m128_u64[0];
  a1[4] = _mm_unpacklo_ps((__m128)0LL, (__m128)0LL).m128_u64[0];
  *((_DWORD *)a1 + 10) = 0;
}

//----- (0000000180001520) ----------------------------------------------------
void __fastcall sub_180001520(char *a1)
{
  `eh vector destructor iterator'(a1 + 44, 8uLL, 4uLL, guard_check_icall_nop);
}

//----- (0000000180001550) ----------------------------------------------------
void __fastcall sub_180001550(char *a1)
{
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 4) = -1LL;
  *(_QWORD *)(a1 + 12) = -1LL;
}

//----- (0000000180001570) ----------------------------------------------------
void __fastcall sub_180001570(_QWORD *a1)
{
  sub_1800010C0(a1 + 7);
  *(_DWORD *)a1 = 0;
  a1[1] = 0LL;
  *((_DWORD *)a1 + 4) = 0;
  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[28] = 0LL;
  *((_BYTE *)a1 + 232) = 0;
  *((_BYTE *)a1 + 492) = 0;
  *((_DWORD *)a1 + 188) = -1;
}

//----- (00000001800015D0) ----------------------------------------------------
void __fastcall sub_1800015D0(char *a1)
{
  `eh vector destructor iterator'(a1 + 64, 0x10uLL, 0xAuLL, guard_check_icall_nop);
}

//----- (0000000180001600) ----------------------------------------------------
__int64 __fastcall CompareFunction(_DWORD *a1, _DWORD *a2)
{
  int v2; // r8d
  int v3; // ecx

  v2 = a1[1];
  v3 = a2[1];
  if ( v2 <= v3 )
    return (unsigned int)(v2 >= v3) - 1;
  else
    return 1LL;
}

//----- (0000000180001620) ----------------------------------------------------
__int64 __fastcall sub_180001620(__int64 a1, int a2)
{
  size_t v2; // rdi
  void *v4; // rcx
  __int64 result; // rax

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  v4 = *(void **)(a1 + 16);
  if ( v4 )
  {
    j_j_free(v4);
    *(_QWORD *)(a1 + 16) = 0LL;
  }
  *(_DWORD *)(a1 + 8) = 0;
  result = (__int64)operator new(v2);
  *(_QWORD *)(a1 + 16) = result;
  if ( result )
  {
    *(_DWORD *)(a1 + 8) = v2;
    return 1LL;
  }
  return result;
}

//----- (0000000180001690) ----------------------------------------------------
void __fastcall sub_180001690(__int64 a1)
{
  int v2; // ebp
  __int64 v3; // r14
  __int64 v4; // rdi
  void *v5; // rcx
  char *v6; // rcx
  char *v7; // rdi

  if ( *(_QWORD *)(a1 + 8) )
  {
    v2 = 0;
    if ( *(int *)a1 > 0 )
    {
      v3 = 0LL;
      do
      {
        v4 = *(_QWORD *)(a1 + 8);
        v5 = *(void **)(v4 + v3 + 16);
        if ( v5 )
        {
          j_j_free(v5);
          *(_QWORD *)(v4 + v3 + 16) = 0LL;
        }
        *(_DWORD *)(v4 + v3 + 8) = 0;
        ++v2;
        v3 += 24LL;
      }
      while ( v2 < *(_DWORD *)a1 );
    }
    v6 = *(char **)(a1 + 8);
    if ( v6 )
    {
      v7 = v6 - 8;
      `eh vector destructor iterator'(v6, 0x18uLL, *((_QWORD *)v6 - 1), (void (__stdcall *)(void *))sub_180001200);
      j_j_j_free(v7);
    }
    *(_QWORD *)(a1 + 8) = 0LL;
    *(_DWORD *)a1 = 0;
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
}

//----- (0000000180001760) ----------------------------------------------------
__int64 __fastcall sub_180001760(__int64 a1, int a2)
{
  unsigned __int64 v2; // rsi
  __int64 v4; // rax
  bool v5; // cf
  size_t v6; // rax
  unsigned __int64 *v7; // rax
  _QWORD *v8; // rbx

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  sub_180001690(a1);
  v4 = 24 * v2;
  if ( !is_mul_ok(v2, 0x18uLL) )
    v4 = -1LL;
  v5 = __CFADD__(v4, 8LL);
  v6 = v4 + 8;
  if ( v5 )
    v6 = -1LL;
  v7 = (unsigned __int64 *)operator new(v6);
  if ( v7 )
  {
    *v7 = v2;
    v8 = v7 + 1;
    `eh vector constructor iterator'(
      v7 + 1,
      0x18uLL,
      v2,
      (void (__stdcall *)(void *))sub_1800011F0,
      (void (__stdcall *)(void *))sub_180001200);
  }
  else
  {
    v8 = 0LL;
  }
  *(_QWORD *)(a1 + 8) = v8;
  if ( !v8 )
    return 0LL;
  *(_DWORD *)a1 = v2;
  return 1LL;
}

//----- (0000000180001810) ----------------------------------------------------
char *__fastcall sub_180001810(int *a1, unsigned int *a2)
{
  __int64 v2; // r9
  int v3; // edi
  unsigned int v5; // r8d
  _DWORD *v6; // rax
  char *v7; // rcx
  int v8; // esi
  __int64 v9; // rbp
  __int64 v10; // rax
  unsigned int v11; // ebx
  int v12; // r14d
  _QWORD *v13; // rax
  _QWORD *v14; // r12
  char *v16; // [rsp+60h] [rbp+8h]
  unsigned __int8 *v17; // [rsp+68h] [rbp+10h]

  v2 = *a1;
  v3 = 0;
  *a2 = 0;
  if ( v2 <= 0 )
    return 0LL;
  v5 = 0;
  v6 = (_DWORD *)(*((_QWORD *)a1 + 1) + 4LL);
  do
  {
    v5 += *v6;
    v6 += 6;
    --v2;
  }
  while ( v2 );
  *a2 = v5;
  if ( !v5 )
    return 0LL;
  v16 = (char *)operator new(v5);
  v7 = v16;
  if ( !v16 )
    return 0LL;
  v8 = 0;
  if ( *a1 > 0 )
  {
    v9 = 0LL;
    do
    {
      v10 = *((_QWORD *)a1 + 1);
      v11 = *(_DWORD *)(v10 + v9 + 4);
      if ( v11 )
      {
        v12 = *(_DWORD *)(v10 + v9);
        if ( v12 )
        {
          v17 = *(unsigned __int8 **)(v10 + v9 + 16);
          if ( v17 )
          {
            v13 = operator new(v11);
            v14 = v13;
            if ( v13 )
            {
              memset(v13, 0, v11);
              sub_180021580(v17, v14, v12, v11);
              memcpy(&v16[v3], v14, v11);
              j_j_free(v14);
            }
          }
          v3 += v11;
        }
      }
      ++v8;
      v9 += 24LL;
    }
    while ( v8 < *a1 );
    return v16;
  }
  return v7;
}
// 1800018C7: conditional instruction was optimized away because r14d.4!=0
// 1800018CB: conditional instruction was optimized away because ebx.4!=0

//----- (0000000180001960) ----------------------------------------------------
__int64 __fastcall sub_180001960(__int64 a1)
{
  __int64 result; // rax
  int v3; // r11d
  __int64 v4; // r8
  int v5; // r10d
  __int64 v6; // rdx
  __int64 v7; // rcx
  __int64 v8; // rcx

  result = *(_QWORD *)(a1 + 48);
  if ( result )
  {
    v3 = 0;
    if ( *(int *)(a1 + 40) > 0 )
    {
      v4 = 0LL;
      do
      {
        if ( *(_QWORD *)(v4 + result + 24) )
        {
          v5 = 0;
          if ( *(int *)(v4 + result + 16) > 0 )
          {
            v6 = 0LL;
            do
            {
              ++v5;
              v7 = *(_QWORD *)(v4 + *(_QWORD *)(a1 + 48) + 24);
              *(float *)(v7 + v6 + 28) = 1.0 - *(float *)(v7 + v6 + 28);
              v8 = *(_QWORD *)(v4 + *(_QWORD *)(a1 + 48) + 24);
              *(float *)(v8 + v6 + 36) = 1.0 - *(float *)(v8 + v6 + 36);
              v6 += 76LL;
              result = *(_QWORD *)(a1 + 48);
            }
            while ( v5 < *(_DWORD *)(v4 + result + 16) );
          }
        }
        ++v3;
        v4 += 760LL;
      }
      while ( v3 < *(_DWORD *)(a1 + 40) );
    }
  }
  return result;
}

//----- (0000000180001A00) ----------------------------------------------------
__int64 __fastcall sub_180001A00(__int64 a1)
{
  int v2; // ebx
  __int64 v3; // rax
  bool v4; // cf
  size_t v5; // rax
  _QWORD *v6; // rax
  void *v7; // rsi
  __int64 v9; // rax
  char *v10; // rcx
  __int64 v11; // r8
  __int64 v12; // rbx

  v2 = *(_DWORD *)(a1 + 56) + 1;
  v3 = 1480LL * v2;
  if ( !is_mul_ok(v2, 0x5C8uLL) )
    v3 = -1LL;
  v4 = __CFADD__(v3, 8LL);
  v5 = v3 + 8;
  if ( v4 )
    v5 = -1LL;
  v6 = operator new(v5);
  if ( v6 )
  {
    *v6 = v2;
    v7 = v6 + 1;
    `eh vector constructor iterator'(
      v6 + 1,
      0x5C8uLL,
      v2,
      (void (__stdcall *)(void *))sub_1800012A0,
      guard_check_icall_nop);
  }
  else
  {
    v7 = 0LL;
  }
  if ( !v7 )
    return 0LL;
  v9 = *(int *)(a1 + 56);
  if ( (int)v9 > 0 )
    memcpy(v7, *(const void **)(a1 + 64), 1480 * v9);
  v10 = *(char **)(a1 + 64);
  if ( v10 )
  {
    sub_180001B00(v10);
    *(_QWORD *)(a1 + 64) = 0LL;
  }
  *(_QWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 56) = v2;
  v11 = (unsigned int)(v2 - 1);
  v12 = 1480LL * (int)v11;
  sub_180001030((char *)v7 + v12 + 260, "Blank%d", v11);
  return v12 + *(_QWORD *)(a1 + 64);
}

//----- (0000000180001B00) ----------------------------------------------------
char *__fastcall sub_180001B00(char *a1)
{
  char *v1; // rbx

  v1 = a1 - 8;
  `eh vector destructor iterator'(a1, 0x5C8uLL, *((_QWORD *)a1 - 1), guard_check_icall_nop);
  j_j_j_free(v1);
  return v1;
}

//----- (0000000180001B50) ----------------------------------------------------
__int64 __fastcall sub_180001B50(__int64 a1, int a2)
{
  unsigned __int64 v2; // rsi
  __int64 v4; // rax
  bool v5; // cf
  size_t v6; // rax
  unsigned __int64 *v7; // rax
  _QWORD *v8; // rbx

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  sub_180001C00(a1);
  v4 = 760 * v2;
  if ( !is_mul_ok(v2, 0x2F8uLL) )
    v4 = -1LL;
  v5 = __CFADD__(v4, 8LL);
  v6 = v4 + 8;
  if ( v5 )
    v6 = -1LL;
  v7 = (unsigned __int64 *)operator new(v6);
  if ( v7 )
  {
    *v7 = v2;
    v8 = v7 + 1;
    `eh vector constructor iterator'(
      v7 + 1,
      0x2F8uLL,
      v2,
      (void (__stdcall *)(void *))sub_180001570,
      (void (__stdcall *)(void *))sub_1800015D0);
  }
  else
  {
    v8 = 0LL;
  }
  *(_QWORD *)(a1 + 48) = v8;
  if ( !v8 )
    return 0LL;
  *(_DWORD *)(a1 + 40) = v2;
  return 1LL;
}

//----- (0000000180001C00) ----------------------------------------------------
void __fastcall sub_180001C00(__int64 a1)
{
  int i; // edi
  char *v3; // rcx
  char *v4; // rdi

  if ( *(_QWORD *)(a1 + 48) )
  {
    for ( i = 0; i < *(_DWORD *)(a1 + 40); ++i )
      sub_180001CB0(*(_QWORD *)(a1 + 48) + 760LL * i);
    v3 = *(char **)(a1 + 48);
    if ( v3 )
    {
      v4 = v3 - 8;
      `eh vector destructor iterator'(v3, 0x2F8uLL, *((_QWORD *)v3 - 1), (void (__stdcall *)(void *))sub_1800015D0);
      j_j_j_free(v4);
    }
    *(_QWORD *)(a1 + 48) = 0LL;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 40) = 0;
  }
}

//----- (0000000180001CB0) ----------------------------------------------------
void __fastcall sub_180001CB0(__int64 a1)
{
  char *v2; // rcx
  char *v3; // rbx
  char *v4; // rcx
  char *v5; // rbx

  v2 = *(char **)(a1 + 8);
  if ( v2 )
  {
    v3 = v2 - 8;
    `eh vector destructor iterator'(v2, 0x14uLL, *((_QWORD *)v2 - 1), guard_check_icall_nop);
    j_j_j_free(v3);
    *(_QWORD *)(a1 + 8) = 0LL;
  }
  *(_DWORD *)a1 = 0;
  v4 = *(char **)(a1 + 24);
  if ( v4 )
  {
    v5 = v4 - 8;
    `eh vector destructor iterator'(v4, 0x4CuLL, *((_QWORD *)v4 - 1), (void (__stdcall *)(void *))sub_180001520);
    j_j_j_free(v5);
    *(_QWORD *)(a1 + 24) = 0LL;
  }
  *(_DWORD *)(a1 + 16) = 0;
}

//----- (0000000180001D60) ----------------------------------------------------
__int64 __fastcall sub_180001D60(__int64 a1)
{
  char *v2; // rcx
  char *v3; // rbx
  __int64 result; // rax

  v2 = *(char **)(a1 + 8);
  if ( v2 )
  {
    v3 = v2 - 8;
    `eh vector destructor iterator'(v2, 0x14uLL, *((_QWORD *)v2 - 1), guard_check_icall_nop);
    j_j_j_free(v3);
    result = 0LL;
    *(_QWORD *)(a1 + 8) = 0LL;
  }
  else
  {
    result = 0LL;
  }
  *(_DWORD *)a1 = 0;
  return result;
}

//----- (0000000180001DD0) ----------------------------------------------------
__int64 __fastcall sub_180001DD0(__int64 a1, int a2)
{
  unsigned __int64 v2; // rsi
  __int64 v4; // rax
  bool v5; // cf
  size_t v6; // rax
  unsigned __int64 *v7; // rax
  _QWORD *v8; // rbx

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  sub_180001D60(a1);
  v4 = 20 * v2;
  if ( !is_mul_ok(v2, 0x14uLL) )
    v4 = -1LL;
  v5 = __CFADD__(v4, 8LL);
  v6 = v4 + 8;
  if ( v5 )
    v6 = -1LL;
  v7 = (unsigned __int64 *)operator new(v6);
  if ( v7 )
  {
    *v7 = v2;
    v8 = v7 + 1;
    `eh vector constructor iterator'(
      v7 + 1,
      0x14uLL,
      v2,
      (void (__stdcall *)(void *))sub_180001550,
      guard_check_icall_nop);
  }
  else
  {
    v8 = 0LL;
  }
  *(_QWORD *)(a1 + 8) = v8;
  if ( !v8 )
    return 0LL;
  *(_DWORD *)a1 = v2;
  return 1LL;
}

//----- (0000000180001E80) ----------------------------------------------------
__int64 __fastcall sub_180001E80(__int64 a1, int a2)
{
  int v4; // ecx
  __int64 v5; // rdx

  if ( a2 <= 0 || !(unsigned int)sub_180001DD0(a1, a2) )
    return 0LL;
  v4 = 0;
  if ( *(int *)a1 > 0 )
  {
    v5 = 0LL;
    do
    {
      v5 += 20LL;
      ++v4;
      *(_DWORD *)(v5 + *(_QWORD *)(a1 + 8) - 20) = 3;
    }
    while ( v4 < *(_DWORD *)a1 );
  }
  return 1LL;
}

//----- (0000000180001ED0) ----------------------------------------------------
__int64 __fastcall sub_180001ED0(__int64 a1, int a2)
{
  unsigned __int64 v2; // rsi
  char *v4; // rcx
  char *v5; // rbx
  _QWORD *v6; // rbx
  __int64 v7; // rax
  bool v8; // cf
  size_t v9; // rax
  unsigned __int64 *v10; // rax

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  v4 = *(char **)(a1 + 24);
  if ( v4 )
  {
    v5 = v4 - 8;
    `eh vector destructor iterator'(v4, 0x4CuLL, *((_QWORD *)v4 - 1), (void (__stdcall *)(void *))sub_180001520);
    j_j_j_free(v5);
    v6 = 0LL;
    *(_QWORD *)(a1 + 24) = 0LL;
  }
  else
  {
    v6 = 0LL;
  }
  *(_DWORD *)(a1 + 16) = 0;
  v7 = 76 * v2;
  if ( !is_mul_ok(v2, 0x4CuLL) )
    v7 = -1LL;
  v8 = __CFADD__(v7, 8LL);
  v9 = v7 + 8;
  if ( v8 )
    v9 = -1LL;
  v10 = (unsigned __int64 *)operator new(v9);
  if ( v10 )
  {
    *v10 = v2;
    v6 = v10 + 1;
    `eh vector constructor iterator'(
      v10 + 1,
      0x4CuLL,
      v2,
      (void (__stdcall *)(void *))sub_180001460,
      (void (__stdcall *)(void *))sub_180001520);
  }
  *(_QWORD *)(a1 + 24) = v6;
  if ( !v6 )
    return 0LL;
  *(_DWORD *)(a1 + 16) = v2;
  return 1LL;
}

//----- (0000000180001FD0) ----------------------------------------------------
__int64 __fastcall sub_180001FD0(__int64 a1, int a2)
{
  unsigned __int64 v2; // rsi
  char *v4; // rcx
  char *v5; // rbx
  _QWORD *v6; // rbx
  __int64 v7; // rax
  bool v8; // cf
  size_t v9; // rax
  unsigned __int64 *v10; // rax

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  v4 = *(char **)(a1 + 16);
  if ( v4 )
  {
    v5 = v4 - 8;
    `eh vector destructor iterator'(v4, 0x208uLL, *((_QWORD *)v4 - 1), guard_check_icall_nop);
    j_j_j_free(v5);
    v6 = 0LL;
    *(_QWORD *)(a1 + 16) = 0LL;
  }
  else
  {
    v6 = 0LL;
  }
  *(_DWORD *)(a1 + 8) = 0;
  v7 = 520 * v2;
  if ( !is_mul_ok(v2, 0x208uLL) )
    v7 = -1LL;
  v8 = __CFADD__(v7, 8LL);
  v9 = v7 + 8;
  if ( v8 )
    v9 = -1LL;
  v10 = (unsigned __int64 *)operator new(v9);
  if ( v10 )
  {
    *v10 = v2;
    v6 = v10 + 1;
    `eh vector constructor iterator'(v10 + 1, 0x208uLL, v2, unknown_libname_6, guard_check_icall_nop);
  }
  *(_QWORD *)(a1 + 16) = v6;
  if ( !v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v2;
  return 1LL;
}

//----- (00000001800020D0) ----------------------------------------------------
__int64 __fastcall sub_1800020D0(__int64 a1, int a2)
{
  unsigned __int64 v2; // r14
  char *v4; // rcx
  char *v5; // rbx
  int v6; // ebx
  __int64 v7; // rax
  bool v8; // cf
  size_t v9; // rax
  unsigned __int64 *v10; // rax
  _QWORD *v11; // rsi
  __int64 v13; // rcx

  v2 = a2;
  if ( a2 <= 0 )
    return 0LL;
  v4 = *(char **)(a1 + 32);
  if ( v4 )
  {
    v5 = v4 - 8;
    `eh vector destructor iterator'(v4, 0x138uLL, *((_QWORD *)v4 - 1), guard_check_icall_nop);
    j_j_j_free(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 32) = 0LL;
  }
  else
  {
    v6 = 0;
  }
  *(_DWORD *)(a1 + 24) = 0;
  v7 = 312 * v2;
  if ( !is_mul_ok(v2, 0x138uLL) )
    v7 = -1LL;
  v8 = __CFADD__(v7, 8LL);
  v9 = v7 + 8;
  if ( v8 )
    v9 = -1LL;
  v10 = (unsigned __int64 *)operator new(v9);
  if ( v10 )
  {
    *v10 = v2;
    v11 = v10 + 1;
    `eh vector constructor iterator'(
      v10 + 1,
      0x138uLL,
      v2,
      (void (__stdcall *)(void *))sub_180001250,
      guard_check_icall_nop);
  }
  else
  {
    v11 = 0LL;
  }
  *(_QWORD *)(a1 + 32) = v11;
  if ( !v11 )
    return 0LL;
  *(_DWORD *)(a1 + 24) = v2;
  if ( (int)v2 > 0 )
  {
    v13 = 0LL;
    do
    {
      *(_OWORD *)(v13 + *(_QWORD *)(a1 + 32)) = xmmword_180028EB0;
      *(_DWORD *)(v13 + *(_QWORD *)(a1 + 32) + 32) = 1124073472;
      *(_DWORD *)(v13 + *(_QWORD *)(a1 + 32) + 36) = 1065353216;
      ++v6;
      v13 += 312LL;
    }
    while ( v6 < *(_DWORD *)(a1 + 24) );
  }
  return 1LL;
}
// 180028EB0: using guessed type __int128 xmmword_180028EB0;

//----- (0000000180002220) ----------------------------------------------------
void sub_180002220()
{
  char *v0; // r10
  int i; // ebx
  char *v2; // rbx

  v0 = (char *)qword_180030740;
  if ( qword_180030740 )
  {
    for ( i = 0; i < dword_180030738; v0 = (char *)qword_180030740 )
      sub_1800022D0((__int64)&v0[280 * i++]);
    if ( v0 )
    {
      v2 = v0 - 8;
      `eh vector destructor iterator'(v0, 0x118uLL, *((_QWORD *)v0 - 1), guard_check_icall_nop);
      j_j_j_free(v2);
    }
    qword_180030740 = 0LL;
  }
  dword_180030738 = 0;
}
// 180030738: using guessed type int dword_180030738;

//----- (00000001800022D0) ----------------------------------------------------
void __fastcall sub_1800022D0(__int64 a1)
{
  int i; // edi
  char *v3; // rcx
  char *v4; // rdi

  if ( *(_QWORD *)(a1 + 272) )
  {
    for ( i = 0; i < *(_DWORD *)(a1 + 264); ++i )
      sub_180002390(*(_QWORD *)(a1 + 272) + 312LL * i);
    v3 = *(char **)(a1 + 272);
    if ( v3 )
    {
      v4 = v3 - 8;
      `eh vector destructor iterator'(v3, 0x138uLL, *((_QWORD *)v3 - 1), guard_check_icall_nop);
      j_j_j_free(v4);
    }
    *(_QWORD *)(a1 + 272) = 0LL;
    *(_DWORD *)(a1 + 264) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 264) = 0;
  }
}

//----- (0000000180002390) ----------------------------------------------------
void __fastcall sub_180002390(__int64 a1)
{
  char *v2; // rcx
  char *v3; // rbx
  char *v4; // rcx
  char *v5; // rbx

  v2 = *(char **)(a1 + 272);
  if ( v2 )
  {
    v3 = v2 - 8;
    `eh vector destructor iterator'(v2, 0x10uLL, *((_QWORD *)v2 - 1), guard_check_icall_nop);
    j_j_j_free(v3);
    *(_QWORD *)(a1 + 272) = 0LL;
  }
  *(_DWORD *)(a1 + 264) = 0;
  sub_180002450(a1);
  v4 = *(char **)(a1 + 288);
  if ( v4 )
  {
    v5 = v4 - 8;
    `eh vector destructor iterator'(v4, 0x10uLL, *((_QWORD *)v4 - 1), guard_check_icall_nop);
    j_j_j_free(v5);
    *(_QWORD *)(a1 + 288) = 0LL;
  }
  *(_DWORD *)(a1 + 280) = 0;
}

//----- (0000000180002450) ----------------------------------------------------
__int64 __fastcall sub_180002450(__int64 a1)
{
  char *v2; // rcx
  char *v3; // rbx
  __int64 result; // rax

  v2 = *(char **)(a1 + 304);
  if ( v2 )
  {
    v3 = v2 - 8;
    `eh vector destructor iterator'(v2, 0x14uLL, *((_QWORD *)v2 - 1), guard_check_icall_nop);
    j_j_j_free(v3);
    result = 0LL;
    *(_QWORD *)(a1 + 304) = 0LL;
  }
  else
  {
    result = 0LL;
  }
  *(_DWORD *)(a1 + 296) = 0;
  return result;
}

//----- (00000001800024D0) ----------------------------------------------------
void sub_1800024D0()
{
  char *v0; // rbx
  char *v1; // rbx
  char *v2; // rbx

  if ( qword_180030700 )
  {
    v0 = (char *)qword_180030700 - 8;
    `eh vector destructor iterator'(qword_180030700, 0x208uLL, *((_QWORD *)qword_180030700 - 1), guard_check_icall_nop);
    j_j_j_free(v0);
    qword_180030700 = 0LL;
  }
  dword_1800306F8 = 0;
  if ( qword_180030710 )
  {
    v1 = (char *)qword_180030710 - 8;
    `eh vector destructor iterator'(qword_180030710, 0x138uLL, *((_QWORD *)qword_180030710 - 1), guard_check_icall_nop);
    j_j_j_free(v1);
    qword_180030710 = 0LL;
  }
  dword_180030708 = 0;
  sub_180001C00((__int64)&qword_1800306F0);
  if ( qword_180030730 )
  {
    v2 = (char *)qword_180030730 - 8;
    `eh vector destructor iterator'(qword_180030730, 0x5C8uLL, *((_QWORD *)qword_180030730 - 1), guard_check_icall_nop);
    j_j_j_free(v2);
    qword_180030730 = 0LL;
  }
  dword_180030728 = 0;
  sub_180002220();
  qword_1800306F0 = 0LL;
  FullPath = 0;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 1800306F8: using guessed type int dword_1800306F8;
// 180030708: using guessed type int dword_180030708;
// 180030728: using guessed type int dword_180030728;

//----- (00000001800025F0) ----------------------------------------------------
__int64 PluginVersion()
{
  return 3606LL;
}

//----- (0000000180002600) ----------------------------------------------------
__int64 __fastcall PluginProc(int a1, __int64 a2)
{
  int v3; // ecx
  unsigned int v5; // edi
  __int64 v6; // rcx
  __int16 v7; // ax
  __int64 v8; // rdx
  char *v9; // rcx
  char v10; // al
  __int16 *v11; // rcx
  __int64 v12; // rdx
  __int16 v13; // ax
  __int64 v14; // rcx
  __int16 v15; // ax
  __int64 v16; // rdx
  char *v17; // rcx
  char v18; // al
  __int16 *v19; // rcx
  __int64 v20; // rdx
  __int16 v21; // ax
  __int64 v22; // rcx
  __int16 v23; // ax
  __int64 v24; // rdx
  char *v25; // rcx
  char v26; // al
  __int16 *v27; // rcx
  __int64 v28; // rdx
  __int16 v29; // ax
  __int64 v30; // r9
  __int16 v31; // ax
  __int16 v32[260]; // [rsp+38h] [rbp-D0h] BYREF
  char Dest[264]; // [rsp+240h] [rbp+138h] BYREF

  v3 = a1 - 65558;
  if ( v3 )
  {
    if ( v3 == 1 )
      return 3606LL;
    else
      return 1LL;
  }
  else if ( a2 )
  {
    *(_DWORD *)(a2 + 24) = 1;
    *(_DWORD *)(a2 + 28) = 2;
    *(_QWORD *)(a2 + 40) = sub_1800028B0;
    *(_OWORD *)(a2 + 8) = xmmword_1800254D0;
    v5 = 0;
    v6 = 0LL;
    do
    {
      v7 = aGameloftBdaeIm[v6];
      v32[v6++] = v7;
    }
    while ( v7 );
    wcstombs(Dest, L"GameLoft BDAE Importer\r\n", 0x104uLL);
    v8 = a2 + 48;
    if ( (__int16 *)(a2 + 48) != v32 )
    {
      v9 = Dest;
      do
      {
        v10 = *v9;
        v9[v8 - (_QWORD)Dest + 520] = *v9;
        ++v9;
      }
      while ( v10 );
      v11 = v32;
      v12 = v8 - (_QWORD)v32;
      do
      {
        v13 = *v11;
        *(__int16 *)((char *)v11 + v12) = *v11;
        ++v11;
      }
      while ( v13 );
    }
    v14 = 0LL;
    do
    {
      v15 = a35077b[v14];
      v32[v14++] = v15;
    }
    while ( v15 );
    wcstombs(Dest, L"3.50.77b", 0x104uLL);
    v16 = a2 + 828;
    if ( (__int16 *)(a2 + 828) != v32 )
    {
      v17 = Dest;
      do
      {
        v18 = *v17;
        v17[v16 - (_QWORD)Dest + 520] = *v17;
        ++v17;
      }
      while ( v18 );
      v19 = v32;
      v20 = v16 - (_QWORD)v32;
      do
      {
        v21 = *v19;
        *(__int16 *)((char *)v19 + v20) = *v19;
        ++v19;
      }
      while ( v21 );
    }
    v22 = 0LL;
    do
    {
      v23 = aGameloftBdaeFi[v22];
      v32[v22++] = v23;
    }
    while ( v23 );
    wcstombs(Dest, L"GameLoft BDAE files (*.bdae)", 0x104uLL);
    v24 = a2 + 1608;
    if ( (__int16 *)(a2 + 1608) != v32 )
    {
      v25 = Dest;
      do
      {
        v26 = *v25;
        v25[v24 - (_QWORD)Dest + 520] = *v25;
        ++v25;
      }
      while ( v26 );
      v27 = v32;
      v28 = v24 - (_QWORD)v32;
      do
      {
        v29 = *v27;
        *(__int16 *)((char *)v27 + v28) = *v27;
        ++v27;
      }
      while ( v29 );
    }
    v30 = 0LL;
    do
    {
      v31 = aBdae[v30];
      v32[v30++] = v31;
    }
    while ( v31 );
    wcstombs(Dest, L"bdae", 0x104uLL);
    LOBYTE(v5) = (*(unsigned int (__fastcall **)(__int64, __int16 *))(*(_QWORD *)a2 + 24LL))(a2, v32) != 0;
    return v5;
  }
  else
  {
    return 0LL;
  }
}
// 1800254D0: using guessed type __int128 xmmword_1800254D0;

//----- (00000001800028B0) ----------------------------------------------------
__int64 __fastcall sub_1800028B0(int a1, __int64 a2, HINSTANCE a3)
{
  int v3; // ecx
  int v4; // ecx
  int v5; // ecx
  bool v6; // zf

  v3 = a1 - 65560;
  if ( v3 )
  {
    v4 = v3 - 1;
    if ( !v4 )
    {
      v6 = a2 == 0;
LABEL_7:
      if ( !v6 )
        qword_1800306D0 = a2;
      return 0LL;
    }
    v5 = v4 - 6;
    if ( v5 )
    {
      if ( v5 != 1 || !a2 )
        return 0LL;
      v6 = a3 == 0LL;
      goto LABEL_7;
    }
    if ( !a2 || !a3 )
      return 0LL;
    qword_1800306D0 = a2;
    return sub_180002980(a2, a3);
  }
  else
  {
    if ( !a2 )
      return 0LL;
    qword_1800306D0 = a2;
    return sub_180003C80(a2);
  }
}
// 1800306D0: using guessed type __int64 qword_1800306D0;

//----- (0000000180002920) ----------------------------------------------------
int sub_180002920(wchar_t *Buffer, wchar_t *Format, ...)
{
  unsigned __int64 *v4; // rax
  int result; // eax
  va_list va; // [rsp+60h] [rbp+18h] BYREF

  va_start(va, Format);
  v4 = (unsigned __int64 *)sub_180001020();
  result = _stdio_common_vswprintf(*v4, Buffer, 0xFFFFFFFFFFFFFFFFuLL, Format, 0LL, va);
  if ( result < 0 )
    return -1;
  return result;
}

//----- (0000000180002980) ----------------------------------------------------
__int64 __fastcall sub_180002980(__int64 a1, HINSTANCE a2)
{
  int v4; // ecx
  HWND v5; // rax
  INT_PTR v6; // rax
  __int64 v7; // rcx

  if ( a1 && a2 )
  {
    dword_180030034 = (_DWORD)qword_1800306F0 != 779
                   && (_DWORD)qword_1800306F0 != 811
                   && ((unsigned int)(qword_1800306F0 - 884) > 0x1B
                    || (v4 = 134218241, !_bittest(&v4, qword_1800306F0 - 884)));
    v5 = (HWND)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 136LL))(a1);
    v6 = DialogBoxParamW(a2, (LPCWSTR)0x65, v5, (DLGPROC)DialogFunc, 0LL);
    if ( v6 == 2 || v6 == -1 || v6 == 0 )
    {
      sub_1800024D0();
      return 2LL;
    }
    if ( (unsigned int)sub_180002D40(v7, a1) )
    {
      sub_1800024D0();
      return 1LL;
    }
  }
  sub_1800024D0();
  return 0LL;
}
// 180002A1F: variable 'v7' is possibly undefined
// 180030034: using guessed type int dword_180030034;
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (0000000180002A70) ----------------------------------------------------
__int64 __fastcall sub_180002A70(__int64 a1, __int64 a2)
{
  int v4; // esi
  __int64 i; // r14
  __int64 v6; // rcx
  const char *v7; // rbx
  char *v8; // rcx
  char v9; // al
  size_t v10; // rax
  __int64 v11; // rdi
  __int64 v12; // rdx
  _WORD *v13; // rbx
  __int64 v14; // rcx
  WCHAR v15; // ax
  char *v16; // rcx
  __int64 v17; // rdx
  __int16 v18; // ax
  __int64 v19; // rax
  __int16 v20; // cx
  __int64 v21; // rax
  __int64 v22; // r9
  __int64 v23; // r8
  char *v24; // rdx
  char v25; // al
  __int16 *v26; // rcx
  __int64 v27; // r8
  __int16 v28; // ax
  __int16 v29[260]; // [rsp+38h] [rbp-D0h] BYREF
  char v30[264]; // [rsp+240h] [rbp+138h] BYREF
  wchar_t Dest[260]; // [rsp+348h] [rbp+240h] BYREF
  char v32[264]; // [rsp+550h] [rbp+448h] BYREF
  char v33[264]; // [rsp+656h] [rbp+54Eh] BYREF
  wchar_t Source[264]; // [rsp+658h] [rbp+550h] BYREF
  WCHAR PathName[264]; // [rsp+868h] [rbp+760h] BYREF

  if ( !a2 )
    return 0LL;
  memset(PathName, 0, 0x208uLL);
  sub_18001D1F0(&FullPath, (__int64)PathName);
  SetCurrentDirectoryW(PathName);
  v4 = 0;
  if ( dword_180030708 > 0 )
  {
    for ( i = 0LL; ; i += 312LL )
    {
      v6 = 312LL * v4;
      v7 = (char *)qword_180030710 + v6 + 52;
      if ( v7 )
      {
        v8 = (char *)qword_180030710 + v6 + 52;
        do
        {
          v9 = *v8;
          v8[v32 - v7] = *v8;
          ++v8;
        }
        while ( v9 );
        v10 = mbstowcs(0LL, v7, 0LL);
        mbstowcs(Dest, v7, v10 + 1);
      }
      v11 = (*(__int64 (__fastcall **)(__int64, wchar_t *))(*(_QWORD *)a2 + 1200LL))(a2, Dest);
      Dest[0] = 0;
      v32[0] = 0;
      if ( !v11 )
        break;
      v12 = *(int *)((char *)qword_180030710 + i + 40);
      if ( qword_180030700 )
      {
        if ( (int)v12 >= 0 && (int)v12 < dword_1800306F8 )
        {
          v13 = (char *)qword_180030700 + 520 * v12;
          if ( *v13 )
          {
            memset(Source, 0, 0x208uLL);
            v14 = 0LL;
            do
            {
              v15 = PathName[v14];
              Source[v14++] = v15;
            }
            while ( v15 );
            v16 = v33;
            do
              v16 += 2;
            while ( *(_WORD *)v16 );
            v17 = 0LL;
            do
            {
              v18 = v13[v17];
              *(_WORD *)&v16[2 * v17++] = v18;
            }
            while ( v18 );
            v19 = 0LL;
            do
            {
              v20 = Source[v19];
              v29[v19++] = v20;
            }
            while ( v20 );
            wcstombs(v30, Source, 0x104uLL);
            v21 = (*(__int64 (__fastcall **)(__int64, _QWORD, __int64))(*(_QWORD *)v11 + 48LL))(v11, 0LL, 1LL);
            v22 = v21;
            if ( v21 )
            {
              if ( v29[0] )
              {
                v23 = v21 + 48;
                if ( (__int16 *)(v21 + 48) != v29 )
                {
                  v24 = v30;
                  do
                  {
                    v25 = *v24;
                    v24[v23 - (_QWORD)v30 + 520] = *v24;
                    ++v24;
                  }
                  while ( v25 );
                  v26 = v29;
                  v27 = v23 - (_QWORD)v29;
                  do
                  {
                    v28 = *v26;
                    *(__int16 *)((char *)v26 + v27) = *v26;
                    ++v26;
                  }
                  while ( v28 );
                }
                *(_DWORD *)(v22 + 8) |= 1u;
              }
            }
          }
        }
      }
      if ( ++v4 >= dword_180030708 )
        return 1LL;
    }
    return 0LL;
  }
  return 1LL;
}
// 1800306F8: using guessed type int dword_1800306F8;
// 180030708: using guessed type int dword_180030708;
// 180002A70: using guessed type char var_558[264];

//----- (0000000180002D40) ----------------------------------------------------
__int64 __fastcall sub_180002D40(__int64 a1, __int64 a2)
{
  int v4; // edx
  int v5; // eax
  _DWORD *v6; // rcx
  __int64 v7; // r8
  __int64 v8; // rdx
  __int64 v9; // r8
  __int64 v10; // rcx
  __int64 v11; // rdi
  __int64 v12; // rsi
  int v13; // r13d
  __int64 v14; // rbx
  __int64 v15; // r12
  __int64 v16; // rax
  __int64 v17; // rcx
  __int64 v18; // r14
  __int64 v19; // r9
  __int64 v20; // r8
  int v21; // edi
  const char *v22; // rbx
  char *v23; // rcx
  char v24; // al
  size_t v25; // rax
  int v26; // r13d
  int v27; // r14d
  __int64 v28; // rbx
  __int64 v29; // rdi
  __int64 v30; // rax
  _QWORD *v31; // rsi
  __int64 v32; // r12
  __int64 v33; // rcx
  __int64 v34; // r14
  __int64 v35; // rcx
  int v36; // edx
  __int64 v37; // r13
  __int64 v38; // r11
  __int64 v39; // r10
  int v40; // edx
  __int64 v41; // rcx
  int v42; // esi
  __int64 v43; // rdi
  _BYTE *v44; // r9
  char *v45; // rdx
  char *v46; // rcx
  char v47; // al
  char *v48; // rcx
  char v49; // al
  size_t v50; // rax
  __int64 v51; // rax
  __int64 v52; // rbx
  char *v53; // rcx
  float v54; // xmm6_4
  float v55; // xmm7_4
  float v56; // xmm3_4
  __int128 v57; // xmm0
  unsigned int v58; // [rsp+28h] [rbp-E0h]
  int v59; // [rsp+28h] [rbp-E0h]
  int v60; // [rsp+2Ch] [rbp-DCh]
  int v61; // [rsp+2Ch] [rbp-DCh]
  __int64 v62; // [rsp+30h] [rbp-D8h]
  __int64 v63; // [rsp+30h] [rbp-D8h]
  __int128 v64; // [rsp+30h] [rbp-D8h]
  int v65; // [rsp+40h] [rbp-C8h]
  int v66; // [rsp+44h] [rbp-C4h]
  int v67; // [rsp+48h] [rbp-C0h]
  wchar_t Dest[260]; // [rsp+58h] [rbp-B0h] BYREF
  char v69[264]; // [rsp+260h] [rbp+158h] BYREF
  char Source[272]; // [rsp+368h] [rbp+260h] BYREF

  if ( !a2 )
    return 0LL;
  sub_180002A70(a1, a2);
  v4 = 0;
  v5 = dword_180030718;
  if ( dword_180030718 > 0 )
  {
    v6 = (_DWORD *)qword_180030720;
    v7 = (unsigned int)dword_180030718;
    do
    {
      if ( *v6 )
        v4 += v6[4];
      v6 += 190;
      --v7;
    }
    while ( v7 );
    if ( v4 > 0 )
    {
      if ( !(*(unsigned int (__fastcall **)(__int64))(*(_QWORD *)a2 + 800LL))(a2) )
        return 0LL;
      v5 = dword_180030718;
    }
  }
  v8 = 0LL;
  v58 = 0;
  v9 = 0LL;
  v60 = 0;
  if ( v5 > 0 )
  {
    v10 = 0LL;
    v62 = 0LL;
    v11 = 0LL;
    do
    {
      v12 = qword_180030720;
      if ( *(_DWORD *)(v11 + qword_180030720) )
      {
        v13 = 0;
        if ( *(int *)(v11 + qword_180030720 + 16) > 0 )
        {
          v14 = 0LL;
          v15 = 88 * v10;
          do
          {
            v16 = *(_QWORD *)(v11 + v12 + 24);
            v17 = *(_QWORD *)(a2 + 7880);
            *(_QWORD *)(v17 + v15 + 12) = *(_QWORD *)(v14 + v16);
            *(_DWORD *)(v17 + v15 + 20) = *(_DWORD *)(v14 + v16 + 8);
            v18 = *(int *)(v14 + *(_QWORD *)(v11 + v12 + 24) + 40);
            if ( (int)v18 > 0 )
            {
              v19 = (*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a2 + 1176LL))(
                      a2,
                      v8,
                      (unsigned int)v18);
              if ( v19 )
              {
                v20 = 0LL;
                if ( v18 >= 4 )
                {
                  do
                  {
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 4) = *(_DWORD *)(v14
                                                                                 + 8 * v20
                                                                                 + *(_QWORD *)(v11 + v12 + 24)
                                                                                 + 44);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20) = *(_DWORD *)(v14
                                                                             + 8 * v20
                                                                             + *(_QWORD *)(v11 + v12 + 24)
                                                                             + 48);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 12) = *(_DWORD *)(v14
                                                                                  + 8 * v20
                                                                                  + *(_QWORD *)(v11 + v12 + 24)
                                                                                  + 52);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 8) = *(_DWORD *)(v14
                                                                                 + 8 * v20
                                                                                 + *(_QWORD *)(v11 + v12 + 24)
                                                                                 + 56);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 20) = *(_DWORD *)(v14
                                                                                  + 8 * v20
                                                                                  + *(_QWORD *)(v11 + v12 + 24)
                                                                                  + 60);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 16) = *(_DWORD *)(v14
                                                                                  + 8 * v20
                                                                                  + *(_QWORD *)(v11 + v12 + 24)
                                                                                  + 64);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 28) = *(_DWORD *)(v14
                                                                                  + 8 * v20
                                                                                  + *(_QWORD *)(v11 + v12 + 24)
                                                                                  + 68);
                    *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 24) = *(_DWORD *)(v14
                                                                                  + 8 * v20
                                                                                  + *(_QWORD *)(v11 + v12 + 24)
                                                                                  + 72);
                    v20 += 4LL;
                  }
                  while ( v20 < v18 - 3 );
                }
                for ( ; v20 < v18; ++v20 )
                {
                  *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20 + 4) = *(_DWORD *)(v14
                                                                               + 8 * v20
                                                                               + *(_QWORD *)(v11 + v12 + 24)
                                                                               + 44);
                  *(_DWORD *)(*(_QWORD *)(v19 + 80) + 8 * v20) = *(_DWORD *)(v14
                                                                           + 8 * v20
                                                                           + *(_QWORD *)(v11 + v12 + 24)
                                                                           + 48);
                }
              }
            }
            ++v58;
            v10 = ++v62;
            v15 += 88LL;
            ++v13;
            v14 += 76LL;
            v8 = v58;
          }
          while ( v13 < *(_DWORD *)(v11 + v12 + 16) );
          v5 = dword_180030718;
          LODWORD(v9) = v60;
        }
      }
      v9 = (unsigned int)(v9 + 1);
      v60 = v9;
      v11 += 760LL;
    }
    while ( (int)v9 < v5 );
  }
  v21 = 0;
  if ( v5 > 0 )
  {
    do
    {
      v22 = (const char *)(qword_180030720 + 760LL * v21 + 492);
      if ( v22 )
      {
        v23 = (char *)(qword_180030720 + 760LL * v21 + 492);
        do
        {
          v24 = *v23;
          v23[v69 - v22] = *v23;
          ++v23;
        }
        while ( v24 );
        v25 = mbstowcs(0LL, v22, 0LL);
        mbstowcs(Dest, v22, v25 + 1);
      }
      if ( !(*(__int64 (__fastcall **)(__int64, wchar_t *, __int64))(*(_QWORD *)a2 + 1208LL))(a2, Dest, 0xFFFFFFFFLL) )
        return 0LL;
      ++v21;
      v5 = dword_180030718;
    }
    while ( v21 < dword_180030718 );
  }
  v59 = 0;
  v26 = 0;
  v66 = 0;
  v27 = 0;
  v67 = 0;
  if ( v5 > 0 )
  {
    v28 = 0LL;
    do
    {
      v29 = qword_180030720;
      if ( *(int *)(v28 + qword_180030720) > 0 )
      {
        v30 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a2 + 1248LL))(a2, v8, v9);
        v31 = (_QWORD *)v30;
        if ( !v30
          || !(*(unsigned int (__fastcall **)(__int64, _QWORD))(*(_QWORD *)v30 + 48LL))(
                v30,
                *(unsigned int *)(v28 + v29)) )
        {
          return 0LL;
        }
        v8 = 0LL;
        v65 = 0;
        if ( *(int *)(v28 + v29) > 0 )
        {
          v32 = 0LL;
          v33 = 0LL;
          v63 = 0LL;
          v34 = 0LL;
          while ( 1 )
          {
            v61 = *(_DWORD *)(v33 + *(_QWORD *)(v28 + v29 + 8));
            if ( !(*(__int64 (__fastcall **)(_QWORD *, __int64, _QWORD))(*v31 + 64LL))(v31, v8, (unsigned int)v61) )
              return 0LL;
            v35 = v63;
            v36 = *(_DWORD *)(*(_QWORD *)(v28 + v29 + 8) + v63 + 16);
            if ( *(_QWORD *)(a2 + 7944) )
            {
              if ( v26 >= *(_DWORD *)(a2 + 7936) )
                return 0LL;
            }
            if ( *(_QWORD *)(a2 + 7864) && v36 >= *(_DWORD *)(a2 + 7856) )
              return 0LL;
            *(_DWORD *)(v31[3] + v34 + 20) = v26;
            *(_DWORD *)(v31[3] + v34 + 16) = v36;
            v37 = 0LL;
            if ( v61 > 0 )
            {
              v38 = 0LL;
              v39 = v63;
              while ( 1 )
              {
                v40 = *(_DWORD *)(*(_QWORD *)(v28 + v29 + 8) + v39 + 4) + v59;
                if ( v40 < 0 )
                  return 0LL;
                if ( v40 >= *(_DWORD *)(a2 + 7872) )
                  return 0LL;
                *(_DWORD *)(v32 + *(_QWORD *)(v31[3] + v34 + 48) + v39) = v40;
                v41 = *(int *)(*(_QWORD *)(v28 + v29 + 8) + v39 + 4);
                if ( (int)v41 < 0 || (int)v41 >= *(_DWORD *)(v28 + v29 + 16) )
                  return 0LL;
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v31[3] + v34 + 80) + 24LL) + v38 + 4) = *(_DWORD *)(76 * v41 + *(_QWORD *)(v28 + v29 + 24) + 24);
                *(float *)(*(_QWORD *)(*(_QWORD *)(v31[3] + v34 + 80) + 24LL) + v38 + 8) = 1.0
                                                                                         - *(float *)(76 * v41 + *(_QWORD *)(v28 + v29 + 24) + 28);
                v9 = *(_QWORD *)(v28 + v29 + 24);
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v31[3] + v34 + 80) + 56LL) + v38 + 4) = *(_DWORD *)(76 * v41 + v9 + 32);
                *(float *)(*(_QWORD *)(*(_QWORD *)(v31[3] + v34 + 80) + 56LL) + v38 + 8) = 1.0
                                                                                         - *(float *)(76 * v41 + *(_QWORD *)(v28 + v29 + 24) + 36);
                ++v37;
                v39 += 4LL;
                v38 += 16LL;
                if ( v37 >= v61 )
                {
                  v35 = v63;
                  break;
                }
              }
            }
            v8 = (unsigned int)(v65 + 1);
            v65 = v8;
            v34 += 88LL;
            v33 = v35 + 20;
            v63 = v33;
            v32 -= 20LL;
            v26 = v66;
            if ( (int)v8 >= *(_DWORD *)(v28 + v29) )
            {
              v27 = v67;
              break;
            }
          }
        }
        v59 += *(_DWORD *)(v28 + v29 + 16);
        v5 = dword_180030718;
      }
      v66 = ++v26;
      v67 = ++v27;
      v28 += 760LL;
    }
    while ( v27 < v5 );
  }
  (*(void (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a2 + 968LL))(a2, 1LL, v9);
  v42 = 0;
  if ( dword_180030728 > 0 )
  {
    v43 = 0LL;
    do
    {
      memset(Source, 0, 0x104uLL);
      v44 = qword_180030730;
      v45 = (char *)qword_180030730 + 1480 * v42;
      v46 = v45 + 260;
      do
      {
        v47 = *v46;
        v46[Source - (v45 + 260)] = *v46;
        ++v46;
      }
      while ( v47 );
      if ( !v44[v43 + 260] )
      {
        v48 = (char *)(Source - v45);
        do
        {
          v49 = *v45;
          v45[(_QWORD)v48] = *v45;
          ++v45;
        }
        while ( v49 );
      }
      strcpy(v69, Source);
      v50 = mbstowcs(0LL, Source, 0LL);
      mbstowcs(Dest, Source, v50 + 1);
      v51 = (*(__int64 (__fastcall **)(__int64, wchar_t *, __int64))(*(_QWORD *)a2 + 1216LL))(a2, Dest, 0xFFFFFFFFLL);
      v52 = v51;
      Dest[0] = 0;
      v69[0] = 0;
      if ( !v51 )
        return 0LL;
      *(_DWORD *)(v51 + 792) = *(_DWORD *)((char *)qword_180030730 + v43 + 1300);
      v53 = (char *)qword_180030730;
      *(_QWORD *)(v51 + 832) = *(_QWORD *)((char *)qword_180030730 + v43 + 1312);
      *(_DWORD *)(v51 + 840) = *(_DWORD *)&v53[v43 + 1320];
      *(_OWORD *)(v51 + 920) = *(_OWORD *)((char *)qword_180030730 + v43 + 1336);
      v54 = *(float *)(v51 + 928);
      v55 = *(float *)(v51 + 932);
      v56 = (float)((float)((float)(*(float *)(v51 + 920) * *(float *)(v51 + 920))
                          + (float)(*(float *)(v51 + 924) * *(float *)(v51 + 924)))
                  + (float)(v54 * v54))
          + (float)(v55 * v55);
      if ( v56 != 0.0 )
        v56 = sqrt(v56);
      if ( v56 <= 0.000099999997 )
      {
        v57 = xmmword_180028EA0;
      }
      else
      {
        *(float *)&v64 = (float)(1.0 / v56) * *(float *)(v52 + 920);
        *((float *)&v64 + 1) = (float)(1.0 / v56) * *(float *)(v52 + 924);
        *((float *)&v64 + 2) = v54 * (float)(1.0 / v56);
        *((float *)&v64 + 3) = v55 * (float)(1.0 / v56);
        v57 = v64;
      }
      *(_OWORD *)(v52 + 920) = v57;
      ++v42;
      v43 += 1480LL;
    }
    while ( v42 < dword_180030728 );
  }
  if ( dword_180030034 == 1 )
    (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a2 + 328LL))(a2, 1LL);
  return 1LL;
}
// 1800030D7: variable 'v8' is possibly undefined
// 1800030D7: variable 'v9' is possibly undefined
// 180028EA0: using guessed type __int128 xmmword_180028EA0;
// 180030034: using guessed type int dword_180030034;
// 180030718: using guessed type int dword_180030718;
// 180030720: using guessed type __int64 qword_180030720;
// 180030728: using guessed type int dword_180030728;

//----- (00000001800035C0) ----------------------------------------------------
__int64 __fastcall sub_1800035C0(HWND hDlg)
{
  int v3; // r11d
  unsigned int v4; // ebx
  unsigned int v5; // esi
  unsigned int v6; // edi
  unsigned int v7; // r15d
  __m128i v8; // xmm6
  __m128i v9; // xmm5
  __m128i v10; // xmm7
  __m128i v11; // xmm4
  __int64 v12; // rcx
  unsigned int *v13; // rax
  __m128i v14; // xmm1
  __m128i v15; // xmm0
  __m128i v16; // xmm2
  __m128i v17; // xmm3
  __m128i v18; // xmm3
  __m128i v19; // xmm4
  __m128i v20; // xmm5
  __m128i v21; // xmm4
  __m128i v22; // xmm5
  int v23; // edx
  int v24; // r8d
  int v25; // r9d
  int v26; // r10d
  _DWORD *v27; // rax
  __int64 v28; // rcx
  __int64 v29; // rcx
  WCHAR String[256]; // [rsp+30h] [rbp-248h] BYREF

  if ( !hDlg )
    return 0LL;
  v3 = 0;
  v4 = dword_180030718;
  v5 = 0;
  v6 = 0;
  v7 = dword_180030728;
  if ( dword_180030718 >= 8 )
  {
    v8 = 0LL;
    v9 = 0LL;
    v10 = 0LL;
    v11 = 0LL;
    v12 = 0LL;
    v13 = (unsigned int *)(qword_180030720 + 1520);
    do
    {
      v14 = _mm_cvtsi32_si128(v13[190]);
      v3 += 8;
      v15 = _mm_cvtsi32_si128(*v13);
      v12 += 8LL;
      v16 = _mm_cvtsi32_si128(*(v13 - 190));
      v17 = _mm_cvtsi32_si128(*(v13 - 380));
      v13 += 1520;
      v8 = _mm_add_epi32(_mm_unpacklo_epi32(_mm_unpacklo_epi32(v17, v15), _mm_unpacklo_epi32(v16, v14)), v8);
      v10 = _mm_add_epi32(
              _mm_unpacklo_epi32(
                _mm_unpacklo_epi32(_mm_cvtsi32_si128(*(v13 - 1896)), _mm_cvtsi32_si128(*(v13 - 1516))),
                _mm_unpacklo_epi32(_mm_cvtsi32_si128(*(v13 - 1706)), _mm_cvtsi32_si128(*(v13 - 1326)))),
              v10);
      v9 = _mm_add_epi32(
             _mm_unpacklo_epi32(
               _mm_unpacklo_epi32(_mm_cvtsi32_si128(*(v13 - 1140)), _mm_cvtsi32_si128(*(v13 - 760))),
               _mm_unpacklo_epi32(_mm_cvtsi32_si128(*(v13 - 950)), _mm_cvtsi32_si128(*(v13 - 570)))),
             v9);
      v18 = _mm_add_epi32(
              _mm_unpacklo_epi32(
                _mm_unpacklo_epi32(_mm_cvtsi32_si128(*(v13 - 1136)), _mm_cvtsi32_si128(*(v13 - 756))),
                _mm_unpacklo_epi32(_mm_cvtsi32_si128(*(v13 - 946)), _mm_cvtsi32_si128(*(v13 - 566)))),
              v11);
      v11 = v18;
    }
    while ( v12 < dword_180030718 - dword_180030718 % 8 );
    v19 = _mm_add_epi32(v18, v10);
    v20 = _mm_add_epi32(v9, v8);
    v21 = _mm_add_epi32(v19, _mm_srli_si128(v19, 8));
    v22 = _mm_add_epi32(v20, _mm_srli_si128(v20, 8));
    v5 = _mm_cvtsi128_si32(_mm_add_epi32(v21, _mm_srli_si128(v21, 4)));
    v6 = _mm_cvtsi128_si32(_mm_add_epi32(v22, _mm_srli_si128(v22, 4)));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if ( v3 < dword_180030718 )
  {
    if ( dword_180030718 - v3 >= 2 )
    {
      v27 = (_DWORD *)(qword_180030720 + 760 * (v3 + 1LL));
      v28 = ((unsigned int)(dword_180030718 - v3 - 2) >> 1) + 1;
      v3 += 2 * v28;
      do
      {
        v23 += *(v27 - 190);
        v25 += *(v27 - 186);
        v24 += *v27;
        v26 += v27[4];
        v27 += 380;
        --v28;
      }
      while ( v28 );
    }
    if ( v3 < dword_180030718 )
    {
      v29 = 760LL * v3;
      v6 += *(_DWORD *)(v29 + qword_180030720);
      v5 += *(_DWORD *)(v29 + qword_180030720 + 16);
    }
    v6 += v24 + v23;
    v5 += v26 + v25;
  }
  memset(String, 0, sizeof(String));
  sub_180002920(String, (wchar_t *)L"%d", (unsigned int)dword_1800306F8);
  SetDlgItemTextW(hDlg, 1002, String);
  sub_180002920(String, (wchar_t *)L"%d", v7);
  SetDlgItemTextW(hDlg, 1008, String);
  sub_180002920(String, (wchar_t *)L"%d", v4);
  SetDlgItemTextW(hDlg, 1003, String);
  sub_180002920(String, (wchar_t *)L"%d", v5);
  SetDlgItemTextW(hDlg, 1004, String);
  sub_180002920(String, (wchar_t *)L"%d", v6);
  SetDlgItemTextW(hDlg, 1005, String);
  SendDlgItemMessageW(hDlg, 2003, 0xF1u, dword_180030034, 0LL);
  return 1LL;
}
// 180030034: using guessed type int dword_180030034;
// 1800306F8: using guessed type int dword_1800306F8;
// 180030718: using guessed type int dword_180030718;
// 180030720: using guessed type __int64 qword_180030720;
// 180030728: using guessed type int dword_180030728;

//----- (0000000180003990) ----------------------------------------------------
INT_PTR __fastcall DialogFunc(HWND a1, int a2, __int16 a3)
{
  int v4; // edx
  HWND DesktopWindow; // rax

  v4 = a2 - 272;
  if ( v4 )
  {
    if ( v4 == 1 )
    {
      if ( a3 == 1 )
      {
        dword_180030034 = SendDlgItemMessageW(a1, 2003, 0xF2u, 0LL, 0LL);
        EndDialog(a1, 1LL);
        return 1LL;
      }
      if ( a3 == 2 )
      {
        EndDialog(a1, 0LL);
        return 1LL;
      }
    }
    return 0LL;
  }
  else
  {
    sub_1800035C0(a1);
    DesktopWindow = GetDesktopWindow();
    sub_18001D360(a1, DesktopWindow);
    return 1LL;
  }
}
// 180030034: using guessed type int dword_180030034;

//----- (0000000180003A30) ----------------------------------------------------
void *sub_180003A30()
{
  return &unk_180030958;
}

//----- (0000000180003A40) ----------------------------------------------------
int sub_180003A40(char *Buffer, char *Format, ...)
{
  unsigned __int64 *v4; // rax
  va_list va; // [rsp+60h] [rbp+18h] BYREF

  va_start(va, Format);
  v4 = (unsigned __int64 *)sub_180003A30();
  return _stdio_common_vsscanf(*v4, Buffer, 0xFFFFFFFFFFFFFFFFuLL, Format, 0LL, va);
}

//----- (0000000180003A90) ----------------------------------------------------
__int64 __fastcall sub_180003A90(__int64 a1, __int64 a2)
{
  __int16 *v2; // rax
  char *v4; // r8
  __int64 v5; // rdx
  char v6; // cl
  __int64 v7; // rdx
  __int16 v8; // cx

  v2 = (__int16 *)(a1 + 12);
  if ( a2 != a1 + 12 )
  {
    v4 = (char *)(a1 + 532);
    v5 = a2 + 520 - (a1 + 532);
    do
    {
      v6 = *v4;
      v4[v5] = *v4;
      ++v4;
    }
    while ( v6 );
    v7 = a2 - (_QWORD)v2;
    do
    {
      v8 = *v2;
      *(__int16 *)((char *)v2 + v7) = *v2;
      ++v2;
    }
    while ( v8 );
  }
  return a2;
}

//----- (0000000180003AF0) ----------------------------------------------------
void __fastcall sub_180003AF0(__int64 a1)
{
  void *v2; // rcx
  void *v3; // rcx

  sub_180001690(a1);
  v2 = *(void **)(a1 + 32);
  if ( v2 )
  {
    j_j_free(v2);
    *(_QWORD *)(a1 + 32) = 0LL;
  }
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *(void **)(a1 + 32);
  if ( v3 )
  {
    j_j_free(v3);
    *(_QWORD *)(a1 + 32) = 0LL;
  }
  *(_DWORD *)(a1 + 24) = 0;
}

//----- (0000000180003B40) ----------------------------------------------------
__int64 __fastcall sub_180003B40(__int64 *a1, void *a2, unsigned int a3)
{
  __int64 v3; // r10
  __int64 v7; // rcx

  v3 = *a1;
  if ( !*a1 )
    return 0LL;
  if ( !a2 )
    return 0LL;
  v7 = *((unsigned int *)a1 + 2);
  if ( (unsigned int)v7 + a3 > *((_DWORD *)a1 + 3) )
    return 0LL;
  memcpy(a2, (const void *)(v3 + v7), a3);
  *((_DWORD *)a1 + 2) += a3;
  return 1LL;
}

//----- (0000000180003BA0) ----------------------------------------------------
__int64 __fastcall sub_180003BA0(__int64 a1)
{
  void *v2; // rcx
  __int64 result; // rax

  v2 = *(void **)a1;
  if ( v2 )
  {
    j_j_free(v2);
    result = 0LL;
    *(_QWORD *)a1 = 0LL;
  }
  else
  {
    result = 0LL;
  }
  *(_QWORD *)(a1 + 8) = 0LL;
  return result;
}

//----- (0000000180003BE0) ----------------------------------------------------
void __fastcall sub_180003BE0(__int64 a1)
{
  void *v2; // rcx
  void *v3; // rcx

  *(_QWORD *)(a1 + 24) = 0LL;
  v2 = *(void **)a1;
  if ( v2 )
  {
    j_j_free(v2);
    *(_QWORD *)a1 = 0LL;
  }
  v3 = *(void **)a1;
  *(_QWORD *)(a1 + 8) = 0LL;
  if ( v3 )
  {
    j_j_free(v3);
    *(_QWORD *)a1 = 0LL;
  }
  *(_QWORD *)(a1 + 8) = 0LL;
}

//----- (0000000180003C30) ----------------------------------------------------
void __fastcall sub_180003C30(__int64 a1)
{
  void *v2; // rcx
  void *v3; // rcx

  v2 = *(void **)a1;
  if ( v2 )
  {
    j_j_free(v2);
    *(_QWORD *)a1 = 0LL;
  }
  v3 = *(void **)a1;
  *(_QWORD *)(a1 + 8) = 0LL;
  if ( v3 )
  {
    j_j_free(v3);
    *(_QWORD *)a1 = 0LL;
  }
  *(_QWORD *)(a1 + 8) = 0LL;
}

//----- (0000000180003C80) ----------------------------------------------------
__int64 __fastcall sub_180003C80(__int64 a1)
{
  char *v2; // rax
  signed __int64 v3; // rdx
  __int16 v4; // cx
  void *v5; // rbx
  void *v6; // rsi
  const wchar_t *v7; // rax
  int v8; // eax
  WCHAR *v9; // rax
  unsigned int v10; // edi
  const wchar_t *v11; // rax
  void *v12; // rcx
  void *Block; // [rsp+28h] [rbp-E0h] BYREF
  __int64 v15; // [rsp+30h] [rbp-D8h]
  __int64 v16; // [rsp+38h] [rbp-D0h]
  __int64 v17[2]; // [rsp+40h] [rbp-C8h] BYREF
  __int64 v18; // [rsp+50h] [rbp-B8h]
  __int64 v19[2]; // [rsp+58h] [rbp-B0h] BYREF
  __int64 v20; // [rsp+68h] [rbp-A0h]
  __int64 v21; // [rsp+70h] [rbp-98h]
  __int64 v22; // [rsp+78h] [rbp-90h]
  char v23[784]; // [rsp+88h] [rbp-80h] BYREF

  v22 = -2LL;
  v2 = (char *)sub_180003A90(a1, (__int64)v23);
  v3 = (char *)&FullPath - v2;
  do
  {
    v4 = *(_WORD *)v2;
    *(_WORD *)&v2[v3] = *(_WORD *)v2;
    v2 += 2;
  }
  while ( v4 );
  v5 = 0LL;
  v6 = 0LL;
  v17[0] = 0LL;
  v17[1] = 0LL;
  LODWORD(v18) = 0;
  v7 = (const wchar_t *)sub_180003A90(a1, (__int64)v23);
  if ( v7 )
  {
    v8 = sub_1800067D0((__int64)v17, v7);
    v6 = (void *)v17[0];
  }
  else
  {
    v8 = 0;
  }
  if ( v8 )
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    LODWORD(v20) = 0;
    v21 = 0LL;
    v9 = (WCHAR *)sub_180003A90(a1, (__int64)v23);
    if ( v9 )
    {
      v10 = (unsigned int)sub_18001DF30((__int64)v19, a1, v9);
      v5 = (void *)v19[0];
    }
    else
    {
      v10 = 0;
    }
    if ( v5 )
      j_j_free(v5);
  }
  else
  {
    Block = 0LL;
    v15 = 0LL;
    LODWORD(v16) = 0;
    v11 = (const wchar_t *)sub_180003A90(a1, (__int64)v23);
    v10 = sub_180003E10((__int64)&Block, a1, v11);
    v12 = Block;
    if ( Block )
    {
      j_j_free(Block);
      v12 = 0LL;
      Block = 0LL;
    }
    v15 = 0LL;
    if ( v12 )
    {
      j_j_free(v12);
      Block = 0LL;
    }
    v15 = 0LL;
  }
  if ( v6 )
    j_j_free(v6);
  return v10;
}

//----- (0000000180003E10) ----------------------------------------------------
__int64 __fastcall sub_180003E10(__int64 a1, __int64 a2, const wchar_t *a3)
{
  __int64 result; // rax
  void *v7; // rcx
  FILE *v8; // rax
  FILE *v9; // rsi
  unsigned int v10; // eax
  void *v11; // rax
  FILE *v12; // rcx
  unsigned int v13; // ebx
  unsigned int v14; // ebx

  if ( !a3 )
    return 0LL;
  v7 = *(void **)a1;
  if ( v7 )
  {
    j_j_free(v7);
    *(_QWORD *)a1 = 0LL;
  }
  *(_QWORD *)(a1 + 8) = 0LL;
  v8 = wfopen(a3, L"rb");
  v9 = v8;
  if ( !v8 )
    return 0LL;
  fseek(v8, 0, 2);
  v10 = ftell(v9);
  *(_DWORD *)(a1 + 12) = v10;
  if ( !v10 )
    goto LABEL_10;
  v11 = operator new(v10);
  *(_QWORD *)a1 = v11;
  v12 = v9;
  if ( !v11 )
  {
LABEL_11:
    fclose(v12);
    return 0LL;
  }
  fseek(v9, 0, 0);
  v13 = *(_DWORD *)(a1 + 12);
  if ( (unsigned int)fread(*(void **)a1, 1uLL, v13, v9) != v13 )
  {
    sub_180003BA0(a1);
LABEL_10:
    v12 = v9;
    goto LABEL_11;
  }
  fclose(v9);
  v14 = sub_180003F40(a1, a2, (__int64)a3);
  sub_180003BA0(a1);
  if ( (v14 & 0xFFFFFFFC) != 0 )
    return 1LL;
  result = v14;
  if ( v14 == 1 )
    return 1LL;
  return result;
}

//----- (0000000180003F40) ----------------------------------------------------
__int64 __fastcall sub_180003F40(__int64 a1, __int64 a2, __int64 a3)
{
  __int64 v4; // rdi
  __int64 v5; // r10
  unsigned int v6; // r11d
  unsigned int v7; // r8d
  unsigned int v8; // r9d
  int v9; // esi
  int v10; // edx
  unsigned __int16 v11; // r11
  unsigned __int16 v12; // dx
  unsigned int v13; // r9d
  int v14; // ecx
  int v15; // esi
  __int64 v16; // rax
  __int64 v17; // rdi
  __int64 v18; // r9
  unsigned int v19; // r8d
  int v20; // r10d
  int v21; // r11d
  int v22; // edx
  int v23; // esi
  unsigned int v24; // r10d
  int v25; // r10d
  int v26; // esi
  unsigned int v27; // r10d
  void **v28; // rax
  char *v29; // rax
  unsigned int v30; // ecx
  unsigned int v31; // esi
  wchar_t v33; // ax
  __int64 v34; // rdx
  char *v35; // rcx
  char v36; // al
  wchar_t *v37; // rcx
  __int64 v38; // rdx
  wchar_t v39; // ax
  wchar_t v40; // ax
  __int64 v41; // rdx
  char *v42; // rcx
  char v43; // al
  wchar_t *v44; // rcx
  __int64 v45; // rdx
  wchar_t v46; // ax
  wchar_t v47; // ax
  __int64 v48; // rdx
  char *v49; // rcx
  char v50; // al
  wchar_t *v51; // rcx
  __int64 v52; // rdx
  wchar_t v53; // ax
  BOOL v54; // edx
  int v55; // r11d
  unsigned int v56; // r9d
  int v57; // esi
  unsigned int v58; // r11d
  int v59; // esi
  unsigned int v60; // r11d
  int v61; // esi
  unsigned int v62; // r11d
  unsigned int v63; // eax
  int v64; // r11d
  unsigned int v65; // r9d
  int v66; // r11d
  unsigned int v67; // r9d
  int v68; // r11d
  int v69; // r11d
  unsigned int v70; // r9d
  int v71; // r11d
  int v72; // r9d
  unsigned __int32 v73; // esi
  int v74; // r11d
  unsigned int v75; // r9d
  int v76; // r11d
  unsigned int v77; // r9d
  int v78; // eax
  unsigned int v79; // esi
  unsigned int v80; // edx
  __int64 v81; // r9
  unsigned __int32 v82; // r10d
  unsigned int v83; // r8d
  int v84; // eax
  unsigned int v85; // esi
  __int64 v86; // rdx
  unsigned __int64 v87; // rax
  __int64 v88; // rcx
  unsigned __int64 v89; // rax
  __int64 v90; // rcx
  __int16 v91; // ax
  __int64 v92; // rdx
  char *v93; // rcx
  char v94; // al
  __int16 *v95; // rcx
  __int64 v96; // rdx
  __int16 v97; // ax
  int v98; // eax
  int v99; // ebx
  unsigned __int64 v100; // rsi
  __int64 v101; // rcx
  int v102; // ecx
  unsigned __int64 v103; // rax
  __int64 v104; // rcx
  unsigned __int64 v105; // rax
  __int64 v106; // rcx
  unsigned int v107; // esi
  __int64 v108; // rax
  int v109; // r10d
  int v110; // ecx
  __int64 v111; // r8
  int v112; // r9d
  __int64 v113; // rdx
  int v114; // edx
  int v115; // [rsp+30h] [rbp-D0h]
  int v116; // [rsp+30h] [rbp-D0h]
  int v117; // [rsp+34h] [rbp-CCh] BYREF
  _DWORD v118[7]; // [rsp+38h] [rbp-C8h] BYREF
  unsigned __int32 v119; // [rsp+54h] [rbp-ACh]
  void *Block; // [rsp+58h] [rbp-A8h]
  int v121; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v122; // [rsp+68h] [rbp-98h]
  void **v123; // [rsp+70h] [rbp-90h]
  int v124; // [rsp+78h] [rbp-88h] BYREF
  int v125; // [rsp+7Ch] [rbp-84h] BYREF
  int v126; // [rsp+80h] [rbp-80h] BYREF
  __int64 v127; // [rsp+88h] [rbp-78h]
  __int64 v128; // [rsp+90h] [rbp-70h]
  __int64 v129; // [rsp+98h] [rbp-68h]
  __int64 v130; // [rsp+A0h] [rbp-60h]
  wchar_t Source[260]; // [rsp+B0h] [rbp-50h] BYREF
  char Dest[264]; // [rsp+2B8h] [rbp+1B8h] BYREF
  __int16 v133[260]; // [rsp+3C0h] [rbp+2C0h] BYREF
  char v134[264]; // [rsp+5C8h] [rbp+4C8h] BYREF
  char Buffer[272]; // [rsp+6D0h] [rbp+5D0h] BYREF

  v130 = -2LL;
  v128 = a3;
  v122 = a2;
  if ( !a2 )
    return 0LL;
  if ( !a3 )
    return 0LL;
  v4 = 0LL;
  memset(&v118[1], 0, 24);
  v119 = 0;
  v5 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v6 = *(_DWORD *)(a1 + 8) + 4;
  v7 = *(_DWORD *)(a1 + 12);
  if ( v6 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v6;
  v8 = *(_DWORD *)(v6 - 4 + v5);
  v118[0] = v8;
  v9 = *(_DWORD *)(a1 + 16);
  if ( v9 )
  {
    v8 = (v8 << 24) | ((v8 & 0xFF00) << 8) | (v8 >> 8) & 0xFF00 | HIBYTE(v8);
    v118[0] = v8;
  }
  if ( v6 + 2 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_WORD *)((unsigned int)(v10 - 2) + v5);
  LOWORD(v118[1]) = v11;
  if ( v9 )
  {
    v11 = (v11 << 8) | HIBYTE(v11);
    LOWORD(v118[1]) = v11;
  }
  if ( v10 + 2 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v12 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2) + v5);
  HIWORD(v118[1]) = v12;
  if ( v9 )
    HIWORD(v118[1]) = (v12 << 8) | HIBYTE(v12);
  if ( v8 != 1178747719 )
  {
    if ( v8 != 1397051970 )
    {
      if ( v8 == 67324752 )
      {
        do
        {
          v40 = aBresFileHeader[v4];
          Source[v4++] = v40;
        }
        while ( v40 );
        wcstombs(Dest, L"BRES file header ID not found.\r\nThis appears to be a PKZip compressed file.", 0x104uLL);
        v41 = v122 + 3912;
        if ( (wchar_t *)(v122 + 3912) != Source )
        {
          v42 = Dest;
          do
          {
            v43 = *v42;
            v42[v41 - (_QWORD)Dest + 520] = *v42;
            ++v42;
          }
          while ( v43 );
          v44 = Source;
          v45 = v41 - (_QWORD)Source;
          do
          {
            v46 = *v44;
            *(wchar_t *)((char *)v44 + v45) = *v44;
            ++v44;
          }
          while ( v46 );
        }
      }
      else
      {
        do
        {
          v47 = aBresFileHeader_0[v4];
          Source[v4++] = v47;
        }
        while ( v47 );
        wcstombs(Dest, L"BRES file header ID not found.", 0x104uLL);
        v48 = v122 + 3912;
        if ( (wchar_t *)(v122 + 3912) != Source )
        {
          v49 = Dest;
          do
          {
            v50 = *v49;
            v49[v48 - (_QWORD)Dest + 520] = *v49;
            ++v49;
          }
          while ( v50 );
          v51 = Source;
          v52 = v48 - (_QWORD)Source;
          do
          {
            v53 = *v51;
            *(wchar_t *)((char *)v51 + v52) = *v51;
            ++v51;
          }
          while ( v53 );
        }
      }
      return 0LL;
    }
    v54 = v11 != 0xFFFE;
    v117 = v54;
    *(_DWORD *)(a1 + 16) = v54;
    if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v55 = *(_DWORD *)(a1 + 8);
    v56 = *(_DWORD *)((unsigned int)(v55 - 4) + v5);
    v116 = v56;
    v118[2] = v56;
    if ( v54 )
    {
      v56 = ((v56 & 0xFF00 | (v56 << 16)) << 8) | ((HIWORD(v56) | v56 & 0xFF0000) >> 8);
      v116 = v56;
      v118[2] = v56;
    }
    if ( v55 + 4 > v7 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v57 = *(_DWORD *)(a1 + 8);
    v58 = *(_DWORD *)((unsigned int)(v57 - 4) + v5);
    v118[3] = v58;
    if ( v54 )
      v118[3] = ((v58 & 0xFF00 | (v58 << 16)) << 8) | ((HIWORD(v58) | v58 & 0xFF0000) >> 8);
    if ( v57 + 4 > v7 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v59 = *(_DWORD *)(a1 + 8);
    v60 = *(_DWORD *)((unsigned int)(v59 - 4) + v5);
    v118[4] = v60;
    if ( v54 )
      v118[4] = ((v60 & 0xFF00 | (v60 << 16)) << 8) | ((HIWORD(v60) | v60 & 0xFF0000) >> 8);
    if ( v59 + 4 > v7 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v61 = *(_DWORD *)(a1 + 8);
    v62 = *(_DWORD *)((unsigned int)(v61 - 4) + v5);
    v118[5] = v62;
    if ( v54 )
      v118[5] = ((v62 & 0xFF00 | (v62 << 16)) << 8) | ((HIWORD(v62) | v62 & 0xFF0000) >> 8);
    v63 = v61 + 4;
    if ( v56 > 0x20 )
    {
      if ( v56 >= 0x40 )
      {
        if ( v63 > v7 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v66 = *(_DWORD *)(a1 + 8);
        v67 = *(_DWORD *)((unsigned int)(v66 - 4) + v5);
        if ( v54 )
          v67 = _byteswap_ulong(v67);
        if ( v66 + 4 > v7 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v68 = *(_DWORD *)(a1 + 8);
        if ( v54 )
          v67 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v68 - 4) + v5));
        v118[5] = v67;
        if ( v68 + 4 > v7 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v69 = *(_DWORD *)(a1 + 8);
        v70 = *(_DWORD *)((unsigned int)(v69 - 4) + v5);
        if ( v54 )
          v70 = _byteswap_ulong(v70);
        if ( v69 + 4 > v7 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v71 = *(_DWORD *)(a1 + 8);
        if ( v54 )
          v70 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v71 - 4) + v5));
        v118[6] = v70;
        if ( v71 + 4 > v7 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v72 = *(_DWORD *)(a1 + 8);
        v73 = *(_DWORD *)((unsigned int)(v72 - 4) + v5);
        if ( v54 )
          v73 = _byteswap_ulong(v73);
        if ( v72 + 4 > v7 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( v54 )
          v73 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v5));
        goto LABEL_138;
      }
      if ( v63 > v7 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v74 = *(_DWORD *)(a1 + 8);
      v75 = *(_DWORD *)((unsigned int)(v74 - 4) + v5);
      v118[5] = v75;
      if ( v54 )
        v118[5] = ((v75 & 0xFF00 | (v75 << 16)) << 8) | ((HIWORD(v75) | v75 & 0xFF0000) >> 8);
      if ( v74 + 4 > v7 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v76 = *(_DWORD *)(a1 + 8);
      v77 = *(_DWORD *)((unsigned int)(v76 - 4) + v5);
      v118[6] = v77;
      if ( v54 )
        v118[6] = ((v77 & 0xFF00 | (v77 << 16)) << 8) | ((HIWORD(v77) | v77 & 0xFF0000) >> 8);
      if ( v76 + 4 > v7 )
        return 0LL;
    }
    else
    {
      if ( v63 > v7 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v64 = *(_DWORD *)(a1 + 8);
      v65 = *(_DWORD *)((unsigned int)(v64 - 4) + v5);
      v118[6] = v65;
      if ( v54 )
        v118[6] = ((v65 & 0xFF00 | (v65 << 16)) << 8) | ((HIWORD(v65) | v65 & 0xFF0000) >> 8);
      if ( v64 + 4 > v7 )
        return 0LL;
    }
    *(_DWORD *)(a1 + 8) += 4;
    v73 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v5);
    v119 = v73;
    if ( !v54 )
      goto LABEL_139;
    v73 = ((v73 & 0xFF00 | (v73 << 16)) << 8) | ((HIWORD(v73) | v73 & 0xFF0000) >> 8);
LABEL_138:
    v119 = v73;
LABEL_139:
    memset(Buffer, 0, 0x104uLL);
    v78 = *(_DWORD *)(a1 + 8);
    v121 = v78;
    if ( v73 )
    {
      *(_DWORD *)(a1 + 8) = v73;
      if ( v116 == 64 )
      {
        v79 = v73 + 4;
        v80 = *(_DWORD *)(a1 + 12);
        if ( v79 > v80 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = v79;
        v81 = *(_QWORD *)a1;
        v82 = *(_DWORD *)(v79 - 4 + *(_QWORD *)a1);
        v83 = v117;
        if ( v117 )
          v82 = _byteswap_ulong(v82);
        if ( v79 + 4 > v80 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( v83 )
          v82 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v81));
      }
      else
      {
        if ( v73 + 4 > *(_DWORD *)(a1 + 12) )
          return 0LL;
        *(_DWORD *)(a1 + 8) = v73 + 4;
        v82 = *(_DWORD *)(v73 + *(_QWORD *)a1);
        if ( v117 )
          v82 = _byteswap_ulong(v82);
      }
      sub_180005050((__int64 *)a1, v82, (__int64)Buffer);
      v78 = v121;
    }
    *(_DWORD *)(a1 + 8) = v78;
    v126 = 0;
    v125 = 0;
    v124 = 0;
    v121 = 0;
    v84 = sub_180003A40(Buffer, "%d,%d,%d,%d", &v126, &v125, &v124, &v121);
    v85 = qword_1800306F0;
    if ( v84 == 4 )
      v85 = v121;
    LODWORD(qword_1800306F0) = v85;
    v86 = 0x1080481C01014011LL;
    if ( v85 != 257 && v85 - 323 > 1 )
    {
      v87 = v85 - 859;
      if ( (unsigned int)v87 > 0x3B || (v88 = 0x810080402040281LL, !_bittest64(&v88, v87)) )
      {
        v89 = v85 - 764;
        if ( (unsigned int)v89 > 0x2F || (v90 = 0x80000001A001LL, !_bittest64(&v90, v89)) )
        {
          if ( v85 != 844 && (v85 - 930 > 0x3C || !_bittest64(&v86, (int)(v85 - 930))) )
          {
            memset(Source, 0, sizeof(Source));
            sub_180002920(Source, (wchar_t *)L"BDAE file version not supported: %d.\n", v85);
            do
            {
              v91 = Source[v4];
              v133[v4++] = v91;
            }
            while ( v91 );
            wcstombs(v134, Source, 0x104uLL);
            v92 = v122 + 3912;
            if ( (__int16 *)(v122 + 3912) != v133 )
            {
              v93 = v134;
              do
              {
                v94 = *v93;
                v93[v92 - (_QWORD)v134 + 520] = *v93;
                ++v93;
              }
              while ( v94 );
              v95 = v133;
              v96 = v92 - (_QWORD)v133;
              do
              {
                v97 = *v95;
                *(__int16 *)((char *)v95 + v96) = *v95;
                ++v95;
              }
              while ( v97 );
            }
            return 0LL;
          }
        }
      }
    }
    if ( v116 == 32 )
    {
      if ( v85 - 323 > 1 && v85 != 257 )
        return 0LL;
      v98 = sub_180006F90(a1, v118);
      v99 = 32;
    }
    else
    {
      if ( v116 == 44 )
      {
        v100 = v85 - 868;
        if ( (unsigned int)v100 > 0x22 )
          return 0LL;
        v101 = 0x402010001LL;
        if ( !_bittest64(&v101, v100) )
          return 0LL;
        v98 = sub_180010580(a1, v118);
      }
      else if ( v116 == 60 )
      {
        if ( v85 - 764 <= 0x10 && (v102 = 73729, _bittest(&v102, v85 - 764)) || v85 == 779 )
        {
          v98 = sub_180009990(a1, v118);
          v99 = v116;
          goto LABEL_200;
        }
        v103 = v85 - 811;
        if ( (unsigned int)v103 <= 0x30 && (v104 = 0x1000200000001LL, _bittest64(&v104, v103)) )
        {
          v98 = sub_18000C1B0(a1, v118);
        }
        else
        {
          if ( v85 != 866 )
            return 0LL;
          v98 = sub_18000FBF0(a1, v118, v128);
        }
      }
      else
      {
        if ( v116 == 64 )
        {
          v105 = v85 - 877;
          if ( (unsigned int)v105 > 0x29 || (v106 = 0x20400000001LL, !_bittest64(&v106, v105)) )
          {
            v107 = v85 - 930;
            if ( v107 > 0x3C || !_bittest64(&v86, (int)v107) )
              return 0LL;
          }
        }
        else if ( v116 != 80 || v85 != 779 && v85 != 866 )
        {
          return 0LL;
        }
        v98 = sub_1800156B0(a1, v118);
      }
      v99 = v118[2];
    }
LABEL_200:
    if ( !v98 )
      return 0LL;
    sub_1800068E0((__int64)&qword_1800306F0);
    sub_180006B30((__int64)&qword_1800306F0);
    if ( v99 == 60 && (_DWORD)qword_1800306F0 == 859 )
    {
      v108 = qword_180030720;
      if ( !qword_180030720 )
        return 1LL;
      if ( *(_DWORD *)(qword_180030720 + 16) != 11254 )
        return 1LL;
      v109 = 0;
      v110 = dword_180030718;
      if ( dword_180030718 <= 0 )
        return 1LL;
      v111 = 16LL;
      do
      {
        v112 = 0;
        if ( *(int *)(v111 + v108) > 0 )
        {
          v113 = 0LL;
          do
          {
            *(float *)(*(_QWORD *)(v111 + v108 + 8) + v113 + 24) = *(float *)(*(_QWORD *)(v111 + v108 + 8) + v113 + 24)
                                                                 * 3.0;
            *(float *)(*(_QWORD *)(v111 + qword_180030720 + 8) + v113 + 32) = *(float *)(*(_QWORD *)(v111 + qword_180030720 + 8)
                                                                                       + v113
                                                                                       + 32)
                                                                            * 3.0;
            *(float *)(*(_QWORD *)(v111 + qword_180030720 + 8) + v113 + 28) = 1.0
                                                                            - *(float *)(*(_QWORD *)(v111 + qword_180030720 + 8)
                                                                                       + v113
                                                                                       + 28);
            *(float *)(*(_QWORD *)(v111 + qword_180030720 + 8) + v113 + 36) = 1.0
                                                                            - *(float *)(*(_QWORD *)(v111 + qword_180030720 + 8)
                                                                                       + v113
                                                                                       + 36);
            ++v112;
            v113 += 76LL;
            v108 = qword_180030720;
          }
          while ( v112 < *(_DWORD *)(v111 + qword_180030720) );
          v110 = dword_180030718;
        }
        ++v109;
        v111 += 760LL;
      }
      while ( v109 < v110 );
    }
    if ( (unsigned int)(qword_1800306F0 - 764) <= 0x10 )
    {
      v114 = 106497;
      if ( _bittest(&v114, qword_1800306F0 - 764) )
        sub_180001960((__int64)&qword_1800306F0);
    }
    return 1LL;
  }
  *(_DWORD *)(a1 + 8) = 4;
  if ( v7 < 8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = 8;
  v13 = *(_DWORD *)(v5 + 4);
  if ( v9 )
    v13 = (*(_DWORD *)(v5 + 4) << 24) | ((*(_DWORD *)(v5 + 4) & 0xFF00) << 8) | (*(_DWORD *)(v5 + 4) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v5 + 4));
  v14 = 0;
  if ( v13 )
  {
    while ( *(_DWORD *)(a1 + 8) + 4 <= v7 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v14 >= v13 )
        goto LABEL_21;
    }
    return 0LL;
  }
LABEL_21:
  v15 = v13 - 1;
  Block = 0LL;
  v118[0] = 0;
  v16 = 0LL;
  memset(&v118[2], 0, 20);
  if ( (int)(v13 - 1) > 0 )
  {
    if ( !(unsigned int)sub_180001760((__int64)v118, v15) )
    {
LABEL_73:
      sub_180001690((__int64)v118);
      if ( Block )
        j_j_free(Block);
      return 0LL;
    }
    v16 = *(_QWORD *)&v118[2];
  }
  v115 = 0;
  v129 = v15;
  v127 = 0LL;
  if ( v15 > 0 )
  {
    v123 = (void **)(v16 + 16);
    v17 = *(_QWORD *)&v118[2];
    do
    {
      v18 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        break;
      v19 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v20 = *(_DWORD *)(a1 + 8);
      v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v18);
      v22 = *(_DWORD *)(a1 + 16);
      if ( v22 )
      {
        v21 = (*(_DWORD *)((unsigned int)(v20 - 4) + v18) << 24) | ((*(_DWORD *)((unsigned int)(v20 - 4) + v18) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v20 - 4) + v18) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v20 - 4) + v18));
        v22 = *(_DWORD *)(a1 + 16);
      }
      if ( v20 + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v23 = *(_DWORD *)(a1 + 8);
      v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v18);
      v117 = v24;
      if ( v22 )
      {
        v117 = (v24 << 24) | ((v24 & 0xFF00) << 8) | (v24 >> 8) & 0xFF00 | HIBYTE(v24);
        v22 = *(_DWORD *)(a1 + 16);
      }
      if ( v23 + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v25 = *(_DWORD *)(a1 + 8);
      v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v18);
      if ( v22 )
      {
        v26 = (*(_DWORD *)((unsigned int)(v25 - 4) + v18) << 24) | ((*(_DWORD *)((unsigned int)(v25 - 4) + v18) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v25 - 4) + v18) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v25 - 4) + v18));
        v22 = *(_DWORD *)(a1 + 16);
      }
      if ( v25 + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v27 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v18);
      if ( v22 )
        v27 = (v27 << 24) | ((v27 & 0xFF00) << 8) | (v27 >> 8) & 0xFF00 | HIBYTE(v27);
      if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( v21 != 1097097584 || v117 != 1283077152 )
        break;
      v28 = v123;
      *((_DWORD *)v123 - 4) = v26;
      *((_DWORD *)v28 - 3) = v27;
      if ( v26 )
      {
        if ( !(unsigned int)sub_180001620(v17 + 24LL * v115, v26)
          || !(unsigned int)sub_180003B40((__int64 *)a1, *v123, v26) )
        {
          break;
        }
        v28 = v123;
      }
      ++v115;
      ++v127;
      v123 = v28 + 3;
    }
    while ( v127 < v129 );
    v4 = 0LL;
    v16 = *(_QWORD *)&v118[2];
  }
  if ( !v16 )
    goto LABEL_64;
  if ( Block )
  {
    j_j_free(Block);
    Block = 0LL;
  }
  v118[6] = 0;
  v117 = 0;
  v29 = sub_180001810(v118, (unsigned int *)&v117);
  if ( !v29 )
  {
LABEL_64:
    sub_180001690((__int64)v118);
    if ( Block )
    {
      j_j_free(Block);
      Block = 0LL;
    }
    v118[6] = 0;
    do
    {
      v33 = aUnknownFileHea[v4];
      Source[v4++] = v33;
    }
    while ( v33 );
    wcstombs(Dest, L"Unknown file header: GCBF", 0x104uLL);
    v34 = v122 + 3912;
    if ( (wchar_t *)(v122 + 3912) != Source )
    {
      v35 = Dest;
      do
      {
        v36 = *v35;
        v35[v34 - (_QWORD)Dest + 520] = *v35;
        ++v35;
      }
      while ( v36 );
      v37 = Source;
      v38 = v34 - (_QWORD)Source;
      do
      {
        v39 = *v37;
        *(wchar_t *)((char *)v37 + v38) = *v37;
        ++v37;
      }
      while ( v39 );
    }
    goto LABEL_73;
  }
  Block = v29;
  v30 = v117;
  v118[6] = v117;
  if ( v117 )
  {
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 12) = v30;
    *(_DWORD *)(a1 + 8) = 0;
    v31 = sub_180003F40(a1, v122, v128);
    *(_QWORD *)a1 = 0LL;
    *(_QWORD *)(a1 + 8) = 0LL;
  }
  else
  {
    v31 = 0;
  }
  sub_180001690((__int64)v118);
  if ( Block )
  {
    j_j_free(Block);
    Block = 0LL;
  }
  v118[6] = 0;
  sub_180001690((__int64)v118);
  if ( Block )
    j_j_free(Block);
  return v31;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030718: using guessed type int dword_180030718;
// 180030720: using guessed type __int64 qword_180030720;

//----- (0000000180004F90) ----------------------------------------------------
__int64 __fastcall sub_180004F90(__int64 *a1, __int64 a2)
{
  __int64 v4; // rdx
  unsigned int v5; // eax
  unsigned int v6; // r11d
  int v7; // edx
  __int64 v8; // r9
  __int64 v9; // r10
  char v10; // al
  int v11; // eax
  unsigned int v12; // ecx

  v4 = *a1;
  if ( !*a1 )
    return 0LL;
  v5 = *((_DWORD *)a1 + 2) + 4;
  if ( v5 > *((_DWORD *)a1 + 3) )
    return 0LL;
  *((_DWORD *)a1 + 2) = v5;
  v6 = *(_DWORD *)(v5 - 4 + v4);
  if ( *((_DWORD *)a1 + 4) )
    v6 = _byteswap_ulong(v6);
  v7 = 0;
  if ( v6 )
  {
    v8 = 0LL;
    while ( 1 )
    {
      v9 = *a1;
      if ( !*a1 || (unsigned int)(*((_DWORD *)a1 + 2) + 1) > *((_DWORD *)a1 + 3) )
        return 0LL;
      v10 = *(_BYTE *)((unsigned int)(*((_DWORD *)a1 + 2))++ + v9);
      if ( v8 < 260 )
        *(_BYTE *)(v8 + a2) = v10;
      if ( v10 )
      {
        ++v7;
        ++v8;
        if ( v7 < v6 )
          continue;
      }
      if ( v7 < 260 )
        break;
      *(_BYTE *)(a2 + 259) = 0;
      goto LABEL_16;
    }
  }
  *(_BYTE *)(v7 + a2) = 0;
LABEL_16:
  v11 = *((_DWORD *)a1 + 2);
  v12 = v11 & 0xFFFFFFFC;
  if ( (v11 & 3) != 0 )
    v12 += 4;
  *((_DWORD *)a1 + 2) = v12;
  return 1LL;
}

//----- (0000000180005050) ----------------------------------------------------
__int64 __fastcall sub_180005050(__int64 *a1, int a2, __int64 a3)
{
  __int64 result; // rax
  int v5; // r8d
  int v6; // ebx
  __int64 v7; // rdx
  __int64 v8; // r10
  char v9; // al

  if ( !a3 )
    return 0LL;
  if ( a2 <= 100 )
    return 1LL;
  v5 = 0;
  v6 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = a2;
  v7 = 0LL;
  do
  {
    v8 = *a1;
    if ( !*a1 || (unsigned int)(*((_DWORD *)a1 + 2) + 1) > *((_DWORD *)a1 + 3) )
      return 0LL;
    v9 = *(_BYTE *)((unsigned int)(*((_DWORD *)a1 + 2))++ + v8);
    if ( v7 < 260 )
      *(_BYTE *)(v7 + a3) = v9;
    ++v5;
    ++v7;
  }
  while ( v9 );
  if ( v5 >= 260 )
    *(_BYTE *)(a3 + 259) = 0;
  else
    *(_BYTE *)(v5 + a3) = 0;
  result = 1LL;
  *((_DWORD *)a1 + 2) = v6;
  return result;
}

//----- (0000000180005100) ----------------------------------------------------
__int64 __fastcall sub_180005100(__int64 a1, __int64 a2, unsigned int a3, int a4, unsigned int a5, int *a6)
{
  __int64 result; // rax
  __int64 v8; // r9
  int v9; // r13d
  int v10; // r10d
  int v11; // r11d
  unsigned int v12; // r15d
  int v13; // esi
  int v14; // r14d
  int *v15; // rax
  __int64 v16; // rdx
  int v17; // edx
  int v18; // r10d
  int v19; // r12d
  int v20; // r11d
  int v21; // edi
  __int64 v22; // rdx
  int v23; // r9d
  int *v24; // rax
  int v25; // ecx
  int v26; // r9d
  int v27; // eax
  __int64 v28; // r9
  __int64 v29; // r12
  __int64 v30; // rax
  int v31; // r11d
  __int64 v32; // r8
  __int64 v33; // r10
  unsigned int v34; // eax
  int v35; // esi
  __int64 v36; // r8
  unsigned int v37; // r10d
  int v38; // edx
  unsigned __int16 v39; // r11
  int v40; // edx
  int v41; // edx
  unsigned __int16 v42; // r9
  unsigned __int16 v43; // r8
  float v44; // xmm0_4
  int v45; // eax
  int v46; // eax
  bool v47; // zf
  int v48; // eax
  int v49; // eax
  __int64 v50; // rdx
  unsigned int v51; // r10d
  unsigned int v52; // r9d
  int v53; // r11d
  __int16 v54; // r8
  __int16 v55; // dx
  float v56; // xmm0_4
  __int64 v57; // r8
  unsigned int v58; // r9d
  int v59; // edx
  unsigned __int16 v60; // cx
  unsigned __int16 v61; // r8
  int v62; // eax
  __int64 v63; // rdx
  unsigned int v64; // r10d
  unsigned int v65; // r9d
  int v66; // r11d
  __int16 v67; // r8
  __int16 v68; // dx
  float v69; // xmm0_4
  __int64 v70; // r8
  unsigned int v71; // r9d
  int v72; // edx
  unsigned __int16 v73; // cx
  unsigned __int16 v74; // r8
  __int64 v75; // rdx
  __int64 v76; // rcx
  __int64 v77; // xmm1_8
  float v78; // eax
  __int64 v79; // xmm0_8
  __int64 v80; // r10
  int v81; // r11d
  int v82; // eax
  int v83; // eax
  __int64 v84; // rdx
  unsigned int v85; // r10d
  unsigned int v86; // r9d
  int v87; // r11d
  __int16 v88; // r8
  __int16 v89; // dx
  float v90; // xmm0_4
  __int64 v91; // r8
  unsigned int v92; // r9d
  int v93; // edx
  unsigned __int16 v94; // cx
  unsigned __int16 v95; // r8
  int v96; // eax
  __int64 v97; // rdx
  unsigned int v98; // r10d
  unsigned int v99; // r9d
  int v100; // r11d
  __int16 v101; // r8
  __int16 v102; // dx
  float v103; // xmm0_4
  __int64 v104; // r8
  unsigned int v105; // r9d
  int v106; // edx
  unsigned __int16 v107; // cx
  unsigned __int16 v108; // r8
  __int64 v109; // rdx
  __int64 v110; // rcx
  __int64 v111; // xmm1_8
  int v112; // eax
  __int64 v113; // xmm0_8
  int v114; // [rsp+20h] [rbp-E0h]
  int v115; // [rsp+24h] [rbp-DCh]
  int v116; // [rsp+28h] [rbp-D8h]
  int v117; // [rsp+2Ch] [rbp-D4h]
  int v118; // [rsp+30h] [rbp-D0h]
  __int64 v119; // [rsp+38h] [rbp-C8h]
  int v120; // [rsp+40h] [rbp-C0h]
  int v121; // [rsp+44h] [rbp-BCh]
  int v122; // [rsp+48h] [rbp-B8h]
  __int64 v123; // [rsp+50h] [rbp-B0h] BYREF
  __int64 v124; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v125; // [rsp+60h] [rbp-A0h] BYREF
  __int64 v126; // [rsp+68h] [rbp-98h] BYREF
  __int64 v127; // [rsp+70h] [rbp-90h]
  __int64 v128; // [rsp+78h] [rbp-88h]
  int v129; // [rsp+80h] [rbp-80h]
  int v130; // [rsp+84h] [rbp-7Ch]
  __int64 v131; // [rsp+88h] [rbp-78h] BYREF
  float v132; // [rsp+90h] [rbp-70h]
  __int64 v133; // [rsp+98h] [rbp-68h]
  __int64 v134; // [rsp+A0h] [rbp-60h] BYREF
  int v135; // [rsp+A8h] [rbp-58h]
  __int64 v136; // [rsp+B0h] [rbp-50h] BYREF
  int v137; // [rsp+B8h] [rbp-48h]
  __int64 v138; // [rsp+C0h] [rbp-40h] BYREF
  int v139; // [rsp+C8h] [rbp-38h]
  __int64 v140; // [rsp+D0h] [rbp-30h] BYREF
  int v141; // [rsp+D8h] [rbp-28h]
  __int64 v142; // [rsp+E0h] [rbp-20h] BYREF
  int v143; // [rsp+E8h] [rbp-18h]
  __int64 v144; // [rsp+F0h] [rbp-10h]
  __int64 v145; // [rsp+F8h] [rbp-8h]
  __int64 v146; // [rsp+100h] [rbp+0h]

  if ( !a3 || !a5 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  if ( !a2 || (result = sub_180001ED0(a2, a3), (_DWORD)result) )
  {
    v8 = *a6;
    v9 = -1;
    v10 = -1;
    v11 = -1;
    v12 = 0;
    v115 = -1;
    v116 = -1;
    v13 = -1;
    v121 = 0;
    v14 = -1;
    v122 = 0;
    if ( v8 > 1 )
    {
      v15 = a6 + 7;
      v16 = v8 - 1;
      do
      {
        if ( v15[2] == 2 && *v15 >= 12 )
        {
          if ( v10 == -1 )
          {
            v13 = v15[1];
            v10 = *v15;
            v121 = *(v15 - 1);
          }
          else if ( v11 == -1 )
          {
            v14 = v15[1];
            v11 = *v15;
            v122 = *(v15 - 1);
          }
        }
        v15 += 4;
        --v16;
      }
      while ( v16 );
      v116 = v11;
      v115 = v10;
    }
    v120 = 0;
    v17 = -1;
    v117 = -1;
    v18 = -1;
    v118 = -1;
    v19 = -1;
    v129 = 0;
    v20 = -1;
    v130 = 0;
    v21 = -1;
    if ( v8 > 1 )
    {
      v22 = v8 - 1;
      v23 = -1;
      v24 = a6 + 7;
      do
      {
        if ( v24[2] == 3 && *v24 >= 12 )
        {
          if ( v9 == -1 )
          {
            v18 = v24[1];
            v9 = *v24;
            v120 = *(v24 - 1);
          }
          else if ( v19 == -1 )
          {
            v20 = v24[1];
            v19 = *v24;
            v129 = *(v24 - 1);
          }
          else if ( v23 == -1 )
          {
            v21 = v24[1];
            v117 = *v24;
            v23 = *v24;
            v130 = *(v24 - 1);
          }
        }
        v24 += 4;
        --v22;
      }
      while ( v22 );
      v17 = v117;
      v118 = v19;
    }
    v25 = *(_DWORD *)(a1 + 8);
    v114 = v25;
    if ( (unsigned int)(qword_1800306F0 - 976) > 0xE || (v26 = 16897, v27 = 1, !_bittest(&v26, qword_1800306F0 - 976)) )
      v27 = 0;
    if ( a3 )
    {
      v28 = a6[4];
      v29 = v27;
      v30 = v20;
      v31 = v115;
      v144 = v30;
      v32 = v18;
      v145 = v17;
      v33 = v13;
      v146 = v21;
      v133 = 0LL;
      v128 = v28;
      v119 = v32;
      v127 = v13;
      while ( 1 )
      {
        v34 = a5;
        v35 = *(_DWORD *)(a1 + 8);
        if ( a5 == 8 )
          break;
        if ( a5 >= 0xC )
        {
          v134 = 0LL;
          v135 = 0;
          v142 = 0LL;
          v143 = 0;
          v125 = 0LL;
          v126 = 0LL;
          if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v134) )
            return 0LL;
          if ( v9 >= 0 )
          {
            v82 = v29 ? v9 + v114 + v120 * v12 : v35 + v9;
            *(_DWORD *)(a1 + 8) = v82;
            if ( v119 == 6 && !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v142) )
              return 0LL;
          }
          if ( v81 >= 0 )
          {
            if ( v29 )
              v83 = v81 + v114 + v121 * v12;
            else
              v83 = v35 + v81;
            *(_DWORD *)(a1 + 8) = v83;
            if ( v80 == 6 )
            {
              if ( !(unsigned int)sub_18001D4E0((__int64 *)a1, (unsigned int *)&v125) )
                return 0LL;
            }
            else
            {
              if ( v80 == 2 )
              {
                v84 = *(_QWORD *)a1;
                if ( !*(_QWORD *)a1 )
                  return 0LL;
                v85 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 2 > v85 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) += 2;
                v86 = *(_DWORD *)(a1 + 8);
                v87 = *(_DWORD *)(a1 + 16);
                v88 = *(_WORD *)(v86 - 2 + v84);
                if ( v87 )
                  v88 = __ROL2__(v88, 8);
                if ( v86 + 2 > v85 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) = v86 + 2;
                v89 = *(_WORD *)(v86 + v84);
                if ( v87 )
                  v89 = __ROL2__(v89, 8);
                v90 = (float)((float)v89 * 0.000015259022) + 0.5;
                *(float *)&v125 = (float)((float)v88 * 0.000015259022) + 0.5;
              }
              else
              {
                if ( v80 != 7 )
                  goto LABEL_148;
                v91 = *(_QWORD *)a1;
                if ( !*(_QWORD *)a1 )
                  return 0LL;
                v92 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 2 > v92 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) += 2;
                v93 = *(_DWORD *)(a1 + 8);
                v94 = *(_WORD *)((unsigned int)(v93 - 2) + v91);
                if ( *(_DWORD *)(a1 + 16) )
                  v94 = __ROL2__(v94, 8);
                if ( v93 + 2 > v92 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) = v93 + 2;
                LODWORD(v125) = sub_18001DE90(v94);
                v90 = sub_18001DE90(v95);
              }
              *((float *)&v125 + 1) = v90;
            }
          }
LABEL_148:
          if ( v116 >= 0LL )
          {
            if ( v29 )
              v96 = v116 + v114 + v122 * v12;
            else
              v96 = v35 + v116;
            *(_DWORD *)(a1 + 8) = v96;
            if ( v14 == 6LL )
            {
              if ( !(unsigned int)sub_18001D4E0((__int64 *)a1, (unsigned int *)&v126) )
                return 0LL;
            }
            else
            {
              if ( v14 == 2LL )
              {
                v97 = *(_QWORD *)a1;
                if ( !*(_QWORD *)a1 )
                  return 0LL;
                v98 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 2 > v98 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) += 2;
                v99 = *(_DWORD *)(a1 + 8);
                v100 = *(_DWORD *)(a1 + 16);
                v101 = *(_WORD *)(v99 - 2 + v97);
                if ( v100 )
                  v101 = __ROL2__(v101, 8);
                if ( v99 + 2 > v98 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) = v99 + 2;
                v102 = *(_WORD *)(v99 + v97);
                if ( v100 )
                  v102 = __ROL2__(v102, 8);
                v103 = (float)((float)v102 * 0.000015259022) + 0.5;
                *(float *)&v126 = (float)((float)v101 * 0.000015259022) + 0.5;
              }
              else
              {
                if ( v14 != 7LL )
                  goto LABEL_172;
                v104 = *(_QWORD *)a1;
                if ( !*(_QWORD *)a1 )
                  return 0LL;
                v105 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 2 > v105 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) += 2;
                v106 = *(_DWORD *)(a1 + 8);
                v107 = *(_WORD *)((unsigned int)(v106 - 2) + v104);
                if ( *(_DWORD *)(a1 + 16) )
                  v107 = __ROL2__(v107, 8);
                if ( v106 + 2 > v105 )
                  return 0LL;
                *(_DWORD *)(a1 + 8) = v106 + 2;
                LODWORD(v126) = sub_18001DE90(v107);
                v103 = sub_18001DE90(v108);
              }
              *((float *)&v126 + 1) = v103;
            }
          }
LABEL_172:
          if ( a2 )
          {
            v109 = *(_QWORD *)(a2 + 24);
            v33 = v127;
            v31 = v115;
            v28 = v128;
            if ( v109 )
            {
              v110 = 76 * v133;
              v111 = v126;
              v112 = v135;
              *(_QWORD *)(v110 + v109) = v134;
              v113 = v125;
              *(_DWORD *)(v110 + v109 + 8) = v112;
              *(_QWORD *)(v110 + *(_QWORD *)(a2 + 24) + 24) = v113;
              *(_QWORD *)(v110 + *(_QWORD *)(a2 + 24) + 32) = v111;
            }
            goto LABEL_176;
          }
LABEL_175:
          v28 = v128;
          v31 = v115;
          v33 = v127;
LABEL_176:
          v34 = a5;
          v32 = v119;
          v25 = v114;
        }
        ++v133;
        ++v12;
        *(_DWORD *)(a1 + 8) = v35 + v34;
        if ( v12 >= a3 )
          return 1LL;
      }
      v131 = 0LL;
      v132 = 0.0;
      v136 = 0LL;
      v137 = 0;
      v138 = 0LL;
      v139 = 0;
      v140 = 0LL;
      v141 = 0;
      v123 = 0LL;
      v124 = 0LL;
      if ( v28 == 6 )
      {
        if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v131) )
          return 0LL;
      }
      else
      {
        if ( v28 != 7 )
          goto LABEL_47;
        v36 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v37 = *(_DWORD *)(a1 + 12);
        if ( v35 + 2 > v37 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 2;
        v38 = *(_DWORD *)(a1 + 8);
        v39 = *(_WORD *)((unsigned int)(v38 - 2) + v36);
        if ( *(_DWORD *)(a1 + 16) )
          v39 = __ROL2__(v39, 8);
        if ( v38 + 2 > v37 )
          return 0LL;
        v40 = v38 + 2;
        *(_DWORD *)(a1 + 8) = v40;
        if ( v40 + 2 > v37 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 2;
        v41 = *(_DWORD *)(a1 + 8);
        if ( v41 + 2 > v37 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = v41 + 2;
        LODWORD(v131) = sub_18001DE90(v39);
        HIDWORD(v131) = sub_18001DE90(v42);
        v44 = sub_18001DE90(v43);
        v33 = v127;
        v31 = v115;
        v132 = v44;
      }
      v32 = v119;
      v25 = v114;
LABEL_47:
      if ( v9 >= 0 )
      {
        v45 = v29 ? v9 + v25 + v120 * v12 : v35 + v9;
        *(_DWORD *)(a1 + 8) = v45;
        if ( v32 == 6 && !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v136) )
          return 0LL;
      }
      if ( v118 >= 0LL )
      {
        v46 = v29 ? v118 + v114 + v129 * v12 : v35 + v118;
        v47 = v144 == 6;
        *(_DWORD *)(a1 + 8) = v46;
        if ( v47 && !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v138) )
          return 0LL;
      }
      if ( v145 >= 0 )
      {
        v48 = v29 ? v117 + v114 + v130 * v12 : v35 + v117;
        v47 = v146 == 6;
        *(_DWORD *)(a1 + 8) = v48;
        if ( v47 && !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v140) )
          return 0LL;
      }
      if ( v31 >= 0 )
      {
        if ( v29 )
          v49 = v31 + v114 + v121 * v12;
        else
          v49 = v35 + v31;
        *(_DWORD *)(a1 + 8) = v49;
        if ( v33 == 6 )
        {
          if ( !(unsigned int)sub_18001D4E0((__int64 *)a1, (unsigned int *)&v123) )
            return 0LL;
        }
        else
        {
          if ( v33 == 2 )
          {
            v50 = *(_QWORD *)a1;
            if ( !*(_QWORD *)a1 )
              return 0LL;
            v51 = *(_DWORD *)(a1 + 12);
            if ( *(_DWORD *)(a1 + 8) + 2 > v51 )
              return 0LL;
            *(_DWORD *)(a1 + 8) += 2;
            v52 = *(_DWORD *)(a1 + 8);
            v53 = *(_DWORD *)(a1 + 16);
            v54 = *(_WORD *)(v52 - 2 + v50);
            if ( v53 )
              v54 = __ROL2__(v54, 8);
            if ( v52 + 2 > v51 )
              return 0LL;
            *(_DWORD *)(a1 + 8) = v52 + 2;
            v55 = *(_WORD *)(v52 + v50);
            if ( v53 )
              v55 = __ROL2__(v55, 8);
            v56 = (float)((float)v55 * 0.000015259022) + 0.5;
            *(float *)&v123 = (float)((float)v54 * 0.000015259022) + 0.5;
          }
          else
          {
            if ( v33 != 7 )
              goto LABEL_89;
            v57 = *(_QWORD *)a1;
            if ( !*(_QWORD *)a1 )
              return 0LL;
            v58 = *(_DWORD *)(a1 + 12);
            if ( *(_DWORD *)(a1 + 8) + 2 > v58 )
              return 0LL;
            *(_DWORD *)(a1 + 8) += 2;
            v59 = *(_DWORD *)(a1 + 8);
            v60 = *(_WORD *)((unsigned int)(v59 - 2) + v57);
            if ( *(_DWORD *)(a1 + 16) )
              v60 = __ROL2__(v60, 8);
            if ( v59 + 2 > v58 )
              return 0LL;
            *(_DWORD *)(a1 + 8) = v59 + 2;
            LODWORD(v123) = sub_18001DE90(v60);
            v56 = sub_18001DE90(v61);
          }
          *((float *)&v123 + 1) = v56;
        }
      }
LABEL_89:
      if ( v116 >= 0LL )
      {
        if ( v29 )
          v62 = v116 + v114 + v122 * v12;
        else
          v62 = v35 + v116;
        *(_DWORD *)(a1 + 8) = v62;
        switch ( v14 )
        {
          case 6:
            if ( !(unsigned int)sub_18001D4E0((__int64 *)a1, (unsigned int *)&v124) )
              return 0LL;
            break;
          case 2:
            v63 = *(_QWORD *)a1;
            if ( !*(_QWORD *)a1 )
              return 0LL;
            v64 = *(_DWORD *)(a1 + 12);
            if ( *(_DWORD *)(a1 + 8) + 2 > v64 )
              return 0LL;
            *(_DWORD *)(a1 + 8) += 2;
            v65 = *(_DWORD *)(a1 + 8);
            v66 = *(_DWORD *)(a1 + 16);
            v67 = *(_WORD *)(v65 - 2 + v63);
            if ( v66 )
              v67 = __ROL2__(v67, 8);
            if ( v65 + 2 > v64 )
              return 0LL;
            *(_DWORD *)(a1 + 8) = v65 + 2;
            v68 = *(_WORD *)(v65 + v63);
            if ( v66 )
              v68 = __ROL2__(v68, 8);
            v69 = (float)((float)v68 * 0.000015259022) + 0.5;
            *(float *)&v124 = (float)((float)v67 * 0.000015259022) + 0.5;
LABEL_112:
            *((float *)&v124 + 1) = v69;
            break;
          case 7:
            v70 = *(_QWORD *)a1;
            if ( !*(_QWORD *)a1 )
              return 0LL;
            v71 = *(_DWORD *)(a1 + 12);
            if ( *(_DWORD *)(a1 + 8) + 2 > v71 )
              return 0LL;
            *(_DWORD *)(a1 + 8) += 2;
            v72 = *(_DWORD *)(a1 + 8);
            v73 = *(_WORD *)((unsigned int)(v72 - 2) + v70);
            if ( *(_DWORD *)(a1 + 16) )
              v73 = __ROL2__(v73, 8);
            if ( v72 + 2 > v71 )
              return 0LL;
            *(_DWORD *)(a1 + 8) = v72 + 2;
            LODWORD(v124) = sub_18001DE90(v73);
            v69 = sub_18001DE90(v74);
            goto LABEL_112;
        }
      }
      if ( !a2 )
        goto LABEL_175;
      v75 = *(_QWORD *)(a2 + 24);
      v33 = v127;
      v31 = v115;
      v28 = v128;
      if ( v75 )
      {
        v76 = 76 * v133;
        v77 = v124;
        v78 = v132;
        *(_QWORD *)(v76 + v75) = v131;
        v79 = v123;
        *(float *)(v76 + v75 + 8) = v78;
        *(_QWORD *)(v76 + *(_QWORD *)(a2 + 24) + 24) = v79;
        *(_QWORD *)(v76 + *(_QWORD *)(a2 + 24) + 32) = v77;
      }
      goto LABEL_176;
    }
    return 1LL;
  }
  return result;
}
// 18000544A: variable 'v42' is possibly undefined
// 180005458: variable 'v43' is possibly undefined
// 180005537: variable 'v31' is possibly undefined
// 18000555C: variable 'v33' is possibly undefined
// 180005687: variable 'v61' is possibly undefined
// 1800057ED: variable 'v74' is possibly undefined
// 1800058EC: variable 'v81' is possibly undefined
// 180005911: variable 'v80' is possibly undefined
// 180005A3C: variable 'v95' is possibly undefined
// 180005BA2: variable 'v108' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (0000000180005C80) ----------------------------------------------------
__int64 __fastcall sub_180005C80(__int64 a1, __int64 a2, int a3, unsigned int a4, int a5, int *a6, size_t Size)
{
  unsigned int v8; // ebx
  __int64 v9; // r11
  unsigned int v10; // r8d
  int v11; // esi
  int v12; // edi
  unsigned int v13; // r15d
  void *v14; // r13
  size_t v15; // rdi
  char *v16; // rax
  char *v17; // rsi
  char *v18; // rax
  int v19; // eax
  int v20; // esi
  int v21; // r13d
  int v22; // r8d
  int v23; // r9d
  int *v24; // rax
  __int64 v25; // rdx
  unsigned int v26; // r14d
  __int64 v27; // rbx
  __int64 v28; // rdi
  unsigned int v29; // eax
  unsigned int v30; // ecx
  __int64 v31; // r10
  __int64 v32; // r11
  __int64 v33; // rdx
  unsigned int v34; // r9d
  unsigned __int16 v35; // r11
  int v36; // ebx
  unsigned int v37; // r8d
  unsigned __int16 v38; // r10
  unsigned int v39; // r10d
  unsigned __int16 v40; // r8
  unsigned __int16 v41; // dx
  __int64 v42; // rcx
  __int64 v44; // [rsp+20h] [rbp-60h] BYREF
  _QWORD *v45; // [rsp+28h] [rbp-58h] BYREF
  unsigned int v46; // [rsp+30h] [rbp-50h]
  unsigned int v47; // [rsp+34h] [rbp-4Ch]
  int v48; // [rsp+38h] [rbp-48h]
  __int64 v49[2]; // [rsp+40h] [rbp-40h] BYREF
  void *v50; // [rsp+50h] [rbp-30h]
  __int64 v51; // [rsp+58h] [rbp-28h] BYREF
  int v52; // [rsp+60h] [rbp-20h]
  __int64 v53; // [rsp+68h] [rbp-18h]
  __int64 v54; // [rsp+70h] [rbp-10h]

  v54 = -2LL;
  v8 = Size;
  if ( !(_DWORD)Size || !a4 || !a3 || !a5 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  v9 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    v10 = *(_DWORD *)(a1 + 12);
    if ( a4 + 4 <= v10 )
    {
      v11 = *(_DWORD *)(a4 + v9);
      v12 = *(_DWORD *)(a1 + 16);
      if ( v12 )
        v11 = (*(_DWORD *)(a4 + v9) << 24) | ((*(_DWORD *)(a4 + v9) & 0xFF00) << 8) | (*(_DWORD *)(a4 + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(a4 + v9));
      if ( v11 == 1097097584 )
      {
        *(_DWORD *)(a1 + 8) = a4 + 8;
        if ( a4 + 12 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 12;
        v8 = *(_DWORD *)(a4 + 8 + v9);
        if ( v12 )
          v8 = (*(_DWORD *)(a4 + 8 + v9) << 24) | ((*(_DWORD *)(a4 + 8 + v9) & 0xFF00) << 8) | (*(_DWORD *)(a4 + 8 + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(a4 + 8 + v9));
        if ( a4 + 16 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 16;
        if ( a4 + 20 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 20;
        if ( a4 + 24 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 24;
        if ( a4 + 28 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 28;
        if ( a4 + 32 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 32;
        if ( a4 + 36 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = a4 + 36;
      }
      v13 = 0;
      v14 = 0LL;
      v50 = 0LL;
      if ( !v8 || (v14 = operator new(v8), (v50 = v14) != 0LL) )
      {
        if ( !(unsigned int)sub_180003B40((__int64 *)a1, v14, v8) )
          goto LABEL_87;
        v15 = (unsigned int)(a5 * a3);
        LODWORD(Size) = a5 * a3;
        if ( v11 == 1097097584 )
        {
          if ( v14 )
          {
            if ( v8 )
            {
              if ( (_DWORD)v15 )
              {
                v16 = (char *)operator new((unsigned int)v15);
                v17 = v16;
                if ( v16 )
                {
                  memset(v16, 0, (unsigned int)v15);
                  sub_180021580((unsigned __int8 *)v14, v17, v8, v15);
                  goto LABEL_35;
                }
              }
            }
            goto LABEL_87;
          }
        }
        else if ( v14 )
        {
          if ( v8 )
          {
            if ( (_DWORD)v15 )
            {
              v18 = (char *)operator new((unsigned int)(a5 * a3));
              v17 = v18;
              if ( v18 )
              {
                memset(v18, 0, v15);
                LODWORD(v44) = v8;
                v19 = sub_18001E550(v17, (int *)&Size, (__int64)v14, (int *)&v44);
                LODWORD(v15) = Size;
                if ( (_DWORD)Size && !v19 )
                {
LABEL_35:
                  if ( v17 )
                  {
                    v48 = 0;
                    v45 = v17;
                    v47 = v15;
                    v46 = 0;
                    if ( !a2 || (unsigned int)sub_180001ED0(a2, a3) )
                    {
                      v20 = -1;
                      v21 = -1;
                      v22 = -1;
                      v23 = -1;
                      if ( *a6 > 0 )
                      {
                        v24 = a6 + 3;
                        v25 = (unsigned int)*a6;
                        do
                        {
                          if ( v24[2] == 2 && *v24 >= 12 )
                          {
                            if ( v20 == -1 )
                            {
                              v20 = *v24;
                              v22 = v24[1];
                            }
                            else if ( v21 == -1 )
                            {
                              v21 = *v24;
                              v23 = v24[1];
                            }
                          }
                          v24 += 4;
                          --v25;
                        }
                        while ( v25 );
                      }
                      v26 = 0;
                      if ( a3 )
                      {
                        v27 = v20;
                        v49[1] = v22;
                        v53 = v23;
                        v28 = 0LL;
                        v29 = a5;
                        v30 = a3;
                        do
                        {
                          if ( v29 < 0xC )
                            goto LABEL_82;
                          v51 = 0LL;
                          v52 = 0;
                          v44 = 0LL;
                          v49[0] = 0LL;
                          if ( !(unsigned int)sub_18001D5C0((__int64 *)&v45, (unsigned int *)&v51) )
                            break;
                          if ( v27 >= 0 )
                          {
                            *(_DWORD *)(a1 + 8) = v13 + v20;
                            if ( v31 == 6 )
                            {
                              if ( !(unsigned int)sub_18001D4E0((__int64 *)&v45, (unsigned int *)&v44) )
                                break;
                            }
                            else if ( v31 == 2 )
                            {
                              v33 = (__int64)v45;
                              if ( !v45 )
                                break;
                              v34 = v47;
                              if ( v46 + 2 > v47 )
                                break;
                              v35 = *(_WORD *)((char *)v45 + v46);
                              v36 = v48;
                              if ( v48 )
                                v35 = (v35 << 8) | HIBYTE(v35);
                              v37 = v46 + 4;
                              if ( v46 + 4 > v47 )
                                break;
                              v46 += 4;
                              v38 = *(_WORD *)((char *)v45 + v37 - 2);
                              if ( v48 )
                                v38 = (v38 << 8) | HIBYTE(v38);
                              *(float *)&v44 = (float)((float)(__int16)v35 * 0.000015259022) + 0.5;
                              *((float *)&v44 + 1) = (float)((float)(__int16)v38 * 0.000015259022) + 0.5;
                              v32 = v53;
                              goto LABEL_65;
                            }
                          }
                          v33 = (__int64)v45;
                          v37 = v46;
                          v34 = v47;
                          v36 = v48;
LABEL_65:
                          if ( v21 >= 0 )
                          {
                            *(_DWORD *)(a1 + 8) = v13 + v21;
                            if ( v32 == 6 )
                            {
                              if ( !(unsigned int)sub_18001D4E0((__int64 *)&v45, (unsigned int *)v49) )
                                break;
                            }
                            else if ( v32 == 2 )
                            {
                              if ( !v33 )
                                break;
                              v39 = v37 + 2;
                              if ( v37 + 2 > v34 )
                                break;
                              v40 = *(_WORD *)(v37 + v33);
                              if ( v36 )
                                v40 = (v40 << 8) | HIBYTE(v40);
                              if ( v39 + 2 > v34 )
                                break;
                              v41 = *(_WORD *)(v39 + v33);
                              if ( v36 )
                                v41 = (v41 << 8) | HIBYTE(v41);
                              *(float *)v49 = (float)((float)(__int16)v40 * 0.000015259022) + 0.5;
                              *((float *)v49 + 1) = (float)((float)(__int16)v41 * 0.000015259022) + 0.5;
                            }
                          }
                          v27 = v20;
                          if ( a2 )
                          {
                            v42 = *(_QWORD *)(a2 + 24);
                            if ( v42 )
                            {
                              *(_QWORD *)(v28 + v42) = v51;
                              *(_DWORD *)(v28 + v42 + 8) = v52;
                              *(_QWORD *)(v28 + *(_QWORD *)(a2 + 24) + 24) = v44;
                              *(_QWORD *)(v28 + *(_QWORD *)(a2 + 24) + 32) = v49[0];
                            }
                          }
                          v29 = a5;
                          v30 = a3;
LABEL_82:
                          v13 += v29;
                          v46 = v13;
                          ++v26;
                          v28 += 76LL;
                        }
                        while ( v26 < v30 );
                      }
                      v14 = v50;
                    }
                    j_j_free(v14);
                    return 1LL;
                  }
                  goto LABEL_87;
                }
                j_j_free(v17);
              }
            }
          }
LABEL_87:
          j_j_free(v14);
        }
      }
    }
  }
  return 0LL;
}
// 180006003: variable 'v31' is possibly undefined
// 1800060F5: variable 'v32' is possibly undefined

//----- (0000000180006250) ----------------------------------------------------
__int64 __fastcall sub_180006250(__int64 *a1, __int64 a2, _DWORD *a3)
{
  __int64 result; // rax
  int v7; // eax
  unsigned int v8; // r12d
  int v9; // ebp
  __int64 v10; // rsi
  __int64 v11; // r10
  __int64 v12; // rdx
  unsigned int v13; // r8d
  int v14; // r9d
  int v15; // r14d
  unsigned __int16 v16; // r11
  int v17; // r15d
  unsigned __int16 v18; // r9
  unsigned __int16 v19; // dx
  __int64 v20; // rcx
  unsigned int v21; // eax

  if ( !a2 || !a3 )
    return 0LL;
  if ( !*a3 )
    return 1LL;
  v7 = a3[1];
  if ( !v7 )
    return 1LL;
  *((_DWORD *)a1 + 2) = v7;
  v8 = *a3 / 3u;
  if ( !v8 || *(_QWORD *)(a2 + 8) || (result = sub_180001E80(a2, v8), (_DWORD)result) )
  {
    v9 = 0;
    v10 = *(int *)(a2 + 224);
    if ( v8 )
    {
      v11 = 20 * v10;
      while ( 1 )
      {
        v12 = *a1;
        if ( !*a1 )
          return 0LL;
        v13 = *((_DWORD *)a1 + 3);
        if ( *((_DWORD *)a1 + 2) + 2 > v13 )
          return 0LL;
        *((_DWORD *)a1 + 2) += 2;
        v14 = *((_DWORD *)a1 + 2);
        v15 = *((_DWORD *)a1 + 4);
        v16 = *(_WORD *)((unsigned int)(v14 - 2) + v12);
        if ( v15 )
          v16 = __ROL2__(v16, 8);
        if ( v14 + 2 > v13 )
          return 0LL;
        *((_DWORD *)a1 + 2) += 2;
        v17 = *((_DWORD *)a1 + 2);
        v18 = *(_WORD *)((unsigned int)(v17 - 2) + v12);
        if ( v15 )
          v18 = __ROL2__(v18, 8);
        if ( v17 + 2 > v13 )
          return 0LL;
        *((_DWORD *)a1 + 2) += 2;
        v19 = *(_WORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 2) + v12);
        if ( v15 )
          v19 = __ROL2__(v19, 8);
        v20 = *(_QWORD *)(a2 + 8);
        if ( v20 && (int)v10 < *(_DWORD *)a2 )
        {
          *(_DWORD *)(v11 + v20 + 4) = a3[4] + v16;
          *(_DWORD *)(v11 + *(_QWORD *)(a2 + 8) + 8) = a3[4] + v18;
          *(_DWORD *)(v11 + *(_QWORD *)(a2 + 8) + 12) = a3[4] + v19;
        }
        LODWORD(v10) = v10 + 1;
        v11 += 20LL;
        if ( ++v9 >= v8 )
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      v21 = (a1[1] & 0xFFFFFFFC) + 4;
      if ( (a1[1] & 3) == 0 )
        v21 = a1[1] & 0xFFFFFFFC;
      *((_DWORD *)a1 + 2) = v21;
      return 1LL;
    }
  }
  return result;
}

//----- (0000000180006420) ----------------------------------------------------
__int64 __fastcall sub_180006420(__int64 a1, __int64 a2, _DWORD *a3)
{
  unsigned int v6; // ebp
  size_t v7; // rdi
  __int64 v8; // r9
  __int64 v9; // r11
  unsigned int v10; // r8d
  int v11; // r13d
  int v12; // ebx
  __int64 v13; // rbx
  void *v14; // r12
  char *v15; // rax
  char *v16; // rsi
  char *v17; // rax
  int v18; // eax
  unsigned int v19; // ebp
  __int64 v20; // r9
  unsigned int v21; // r10d
  __int64 v22; // r8
  unsigned int v23; // edx
  unsigned int v24; // edx
  unsigned int v25; // edx
  unsigned __int16 v26; // r11
  unsigned __int16 v27; // r13
  __int64 v28; // rcx
  int v30; // [rsp+88h] [rbp+10h] BYREF
  unsigned int v31; // [rsp+98h] [rbp+20h] BYREF

  if ( a2 && a3 )
  {
    v6 = a3[3];
    v7 = (unsigned int)a3[2];
    if ( !v6 )
      return 1LL;
    if ( !(_DWORD)v7 )
      return 1LL;
    if ( !*a3 )
      return 1LL;
    v8 = (unsigned int)a3[1];
    if ( !(_DWORD)v8 )
      return 1LL;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)a1;
    if ( *(_QWORD *)a1 )
    {
      v10 = *(_DWORD *)(a1 + 12);
      if ( (int)v8 + 4 <= v10 )
      {
        v11 = *(_DWORD *)(v8 + v9);
        v12 = *(_DWORD *)(a1 + 16);
        if ( v12 )
          v11 = (*(_DWORD *)(v8 + v9) << 24) | ((*(_DWORD *)(v8 + v9) & 0xFF00) << 8) | (*(_DWORD *)(v8 + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v8 + v9));
        if ( v11 == 1097097584 )
        {
          *(_DWORD *)(a1 + 8) = v8 + 8;
          if ( (int)v8 + 12 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 12;
          v6 = *(_DWORD *)((unsigned int)(v8 + 8) + v9);
          if ( v12 )
            v6 = (*(_DWORD *)((unsigned int)(v8 + 8) + v9) << 24) | ((*(_DWORD *)((unsigned int)(v8 + 8) + v9) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v8 + 8) + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v8 + 8) + v9));
          if ( (int)v8 + 16 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 16;
          if ( (int)v8 + 20 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 20;
          if ( (int)v8 + 24 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 24;
          if ( (int)v8 + 28 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 28;
          if ( (int)v8 + 32 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 32;
          if ( (int)v8 + 36 > v10 )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v8 + 36;
        }
        v13 = 0LL;
        v14 = 0LL;
        if ( !v6 || (v14 = operator new(v6)) != 0LL )
        {
          if ( !(unsigned int)sub_180003B40((__int64 *)a1, v14, v6) )
            goto LABEL_51;
          v30 = v7;
          if ( v11 == 1097097584 )
          {
            if ( v14 )
            {
              if ( v6 )
              {
                v15 = (char *)operator new(v7);
                v16 = v15;
                if ( v15 )
                {
                  memset(v15, 0, v7);
                  sub_180021580((unsigned __int8 *)v14, v16, v6, v7);
                  goto LABEL_35;
                }
              }
              goto LABEL_51;
            }
          }
          else if ( v14 )
          {
            if ( v6 )
            {
              v17 = (char *)operator new(v7);
              v16 = v17;
              if ( v17 )
              {
                memset(v17, 0, v7);
                v31 = v6;
                v18 = sub_18001E550(v16, &v30, (__int64)v14, (int *)&v31);
                LODWORD(v7) = v30;
                if ( v30 && !v18 )
                {
LABEL_35:
                  if ( v16 )
                  {
                    v19 = *a3 / 3u;
                    if ( !v19 || *(_QWORD *)(a2 + 8) || (unsigned int)sub_180001E80(a2, v19) )
                    {
                      v20 = *(int *)(a2 + 224);
                      v21 = 0;
                      if ( v19 )
                      {
                        v22 = 20 * v20;
                        v23 = 2;
                        do
                        {
                          if ( v23 > (unsigned int)v7 )
                            break;
                          v24 = v23 + 2;
                          LOWORD(v30) = *(_WORD *)&v16[v13];
                          if ( v24 > (unsigned int)v7 )
                            break;
                          v25 = v24 + 2;
                          v26 = *(_WORD *)&v16[(unsigned int)(v13 + 2)];
                          if ( v25 > (unsigned int)v7 )
                            break;
                          v13 = (unsigned int)(v13 + 6);
                          v23 = v25 + 2;
                          v27 = *(_WORD *)&v16[(unsigned int)(v13 - 2)];
                          v28 = *(_QWORD *)(a2 + 8);
                          if ( v28 )
                          {
                            if ( (int)v20 < *(_DWORD *)a2 )
                            {
                              *(_DWORD *)(v28 + v22 + 4) = a3[4] + (unsigned __int16)v30;
                              *(_DWORD *)(*(_QWORD *)(a2 + 8) + v22 + 8) = a3[4] + v26;
                              *(_DWORD *)(*(_QWORD *)(a2 + 8) + v22 + 12) = a3[4] + v27;
                            }
                          }
                          LODWORD(v20) = v20 + 1;
                          v22 += 20LL;
                          ++v21;
                        }
                        while ( v21 < v19 );
                      }
                    }
                    j_j_free(v14);
                    return 1LL;
                  }
                  goto LABEL_51;
                }
                j_j_free(v16);
              }
            }
LABEL_51:
            j_j_free(v14);
          }
        }
      }
    }
  }
  return 0LL;
}
// 1800065F3: conditional instruction was optimized away because edi.4!=0
// 180006643: conditional instruction was optimized away because edi.4!=0

//----- (00000001800067D0) ----------------------------------------------------
__int64 __fastcall sub_1800067D0(__int64 a1, const wchar_t *a2)
{
  unsigned int v3; // ebp
  void *v4; // rcx
  FILE *v6; // rax
  FILE *v7; // rsi
  unsigned int v8; // eax
  void *v9; // rax
  FILE *v10; // rcx
  unsigned int v11; // ebx
  char *v13; // rdx
  unsigned int v14; // eax
  unsigned int v15; // eax

  v3 = 0;
  v4 = *(void **)a1;
  if ( v4 )
  {
    j_j_free(v4);
    *(_QWORD *)a1 = 0LL;
  }
  *(_QWORD *)(a1 + 8) = 0LL;
  v6 = wfopen(a2, L"rb");
  v7 = v6;
  if ( !v6 )
    return 0LL;
  fseek(v6, 0, 2);
  v8 = ftell(v7);
  *(_DWORD *)(a1 + 12) = v8;
  if ( !v8 )
    goto LABEL_8;
  v9 = operator new(v8);
  *(_QWORD *)a1 = v9;
  v10 = v7;
  if ( !v9 )
  {
LABEL_9:
    fclose(v10);
    return 0LL;
  }
  fseek(v7, 0, 0);
  v11 = *(_DWORD *)(a1 + 12);
  if ( (unsigned int)fread(*(void **)a1, 1uLL, v11, v7) != v11 )
  {
    sub_180003BA0(a1);
LABEL_8:
    v10 = v7;
    goto LABEL_9;
  }
  fclose(v7);
  v13 = *(char **)a1;
  if ( *(_QWORD *)a1 )
  {
    v14 = *(_DWORD *)(a1 + 8) + 4;
    if ( v14 <= *(_DWORD *)(a1 + 12) )
    {
      *(_DWORD *)(a1 + 8) = v14;
      v15 = *(_DWORD *)&v13[v14 - 4];
      if ( *(_DWORD *)(a1 + 16) )
        v15 = _byteswap_ulong(v15);
      LOBYTE(v3) = v15 == 67324752;
    }
  }
  sub_180003BA0(a1);
  return v3;
}

//----- (00000001800068E0) ----------------------------------------------------
void __fastcall sub_1800068E0(__int64 a1)
{
  int v2; // ebx
  int v3; // r9d
  __int64 v4; // r8
  __int64 v5; // rax
  __int64 v6; // rax
  __int64 v7; // r8
  int v8; // r9d
  int v9; // eax
  __int64 v10; // rdi
  __int64 v11; // r10
  __int64 v12; // rcx

  if ( *(_QWORD *)(a1 + 64) )
  {
    v2 = 0;
    v3 = 0;
    if ( *(int *)(a1 + 56) > 0 )
    {
      v4 = 0LL;
      do
      {
        v5 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(v4 + v5 + 1352) = 1065353216LL;
        *(_QWORD *)(v4 + v5 + 1360) = 0LL;
        *(_DWORD *)(v4 + v5 + 1368) = 0;
        *(_QWORD *)(v4 + v5 + 1372) = 1065353216LL;
        *(_QWORD *)(v4 + v5 + 1380) = 0LL;
        *(_DWORD *)(v4 + v5 + 1388) = 0;
        *(_QWORD *)(v4 + v5 + 1392) = 1065353216LL;
        *(_QWORD *)(v4 + v5 + 1400) = 0LL;
        *(_DWORD *)(v4 + v5 + 1408) = 0;
        *(_DWORD *)(v4 + v5 + 1412) = 1065353216;
        v6 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(v4 + v6 + 1416) = 1065353216LL;
        *(_QWORD *)(v4 + v6 + 1424) = 0LL;
        *(_DWORD *)(v4 + v6 + 1432) = 0;
        *(_QWORD *)(v4 + v6 + 1436) = 1065353216LL;
        *(_QWORD *)(v4 + v6 + 1444) = 0LL;
        *(_DWORD *)(v4 + v6 + 1452) = 0;
        *(_QWORD *)(v4 + v6 + 1456) = 1065353216LL;
        *(_QWORD *)(v4 + v6 + 1464) = 0LL;
        *(_DWORD *)(v4 + v6 + 1472) = 0;
        *(_DWORD *)(v4 + v6 + 1476) = 1065353216;
        sub_18001DD00(
          (float *)(*(_QWORD *)(a1 + 64) + 1336LL + 1480LL * v3),
          1480LL * v3 + *(_QWORD *)(a1 + 64) + 1352LL);
        v4 = v7 + 1480;
        v3 = v8 + 1;
        *(_DWORD *)((char *)qword_180030730 + v4 - 116) = *(_DWORD *)((char *)qword_180030730 + v4 - 168);
        *(_DWORD *)((char *)qword_180030730 + v4 - 100) = *(_DWORD *)((char *)qword_180030730 + v4 - 164);
        *(_DWORD *)((char *)qword_180030730 + v4 - 84) = *(_DWORD *)((char *)qword_180030730 + v4 - 160);
      }
      while ( v3 < *(_DWORD *)(a1 + 56) );
    }
    v9 = *(_DWORD *)(a1 + 56);
    if ( v9 > 0 )
    {
      v10 = 0LL;
      do
      {
        v11 = *(_QWORD *)(a1 + 64);
        v12 = *(int *)(v10 + v11 + 1300);
        if ( (_DWORD)v12 != v2 && (int)v12 < v9 )
        {
          if ( (int)v12 >= 0 )
          {
            sub_18001DBF0((_OWORD *)(1480LL * v2 + v11 + 1416), 1480 * v12 + v11 + 1416, 1480LL * v2 + v11 + 1352);
          }
          else
          {
            *(_OWORD *)(v10 + v11 + 1416) = *(_OWORD *)(v10 + v11 + 1352);
            *(_OWORD *)(v10 + v11 + 1432) = *(_OWORD *)(v10 + v11 + 1368);
            *(_OWORD *)(v10 + v11 + 1448) = *(_OWORD *)(v10 + v11 + 1384);
            *(_OWORD *)(v10 + v11 + 1464) = *(_OWORD *)(v10 + v11 + 1400);
          }
        }
        v9 = *(_DWORD *)(a1 + 56);
        ++v2;
        v10 += 1480LL;
      }
      while ( v2 < v9 );
    }
  }
}
// 180006A05: variable 'v7' is possibly undefined
// 180006A0C: variable 'v8' is possibly undefined

//----- (0000000180006B30) ----------------------------------------------------
void __fastcall sub_180006B30(__int64 a1)
{
  int v2; // esi
  __int64 v3; // r14
  __int64 v4; // rdx
  char *v5; // rcx
  char v6; // al
  char v7; // al
  char *v8; // rcx
  char v9; // al
  int v10; // ebx
  int v11; // r8d
  __int64 v12; // r10
  int v13; // edx
  __int64 v14; // rcx
  _DWORD *v15; // rax
  int v16; // r10d
  __int64 v17; // r9
  __int64 v18; // rdx
  __int64 v19; // rax
  __int64 v20; // rcx
  __int64 v21; // rax
  int v22; // r11d
  __int64 v23; // r8
  __int64 v24; // rcx
  __int64 v25; // [rsp+28h] [rbp-E0h]
  float v26; // [rsp+30h] [rbp-D8h]
  __int128 v27; // [rsp+38h] [rbp-D0h]
  __int128 v28; // [rsp+48h] [rbp-C0h]
  __int128 v29; // [rsp+58h] [rbp-B0h]
  char String2[272]; // [rsp+78h] [rbp-90h] BYREF

  if ( *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 48) )
  {
    v2 = 0;
    if ( *(int *)(a1 + 56) > 0 )
    {
      v3 = 0LL;
      do
      {
        memset(String2, 0, 0x104uLL);
        v4 = 1480LL * v2 + *(_QWORD *)(a1 + 64) + 780LL;
        v5 = &String2[-v4];
        do
        {
          v6 = *(_BYTE *)v4;
          v5[v4] = *(_BYTE *)v4;
          ++v4;
        }
        while ( v6 );
        v7 = String2[0];
        if ( String2[0] == 35 )
        {
          v8 = &String2[1];
          do
          {
            v9 = *v8;
            *(v8 - 1) = *v8;
            ++v8;
          }
          while ( v9 );
          v7 = String2[0];
        }
        if ( v7 && (v10 = 0, *(int *)(a1 + 40) > 0) )
        {
          while ( stricmp((const char *)(*(_QWORD *)(a1 + 48) + 232LL + 760LL * v10), String2) )
          {
            if ( ++v10 >= *(_DWORD *)(a1 + 40) )
              goto LABEL_15;
          }
        }
        else
        {
LABEL_15:
          v10 = -1;
        }
        ++v2;
        *(_DWORD *)(v3 + *(_QWORD *)(a1 + 64) + 1308) = v10;
        v3 += 1480LL;
      }
      while ( v2 < *(_DWORD *)(a1 + 56) );
    }
    v11 = 0;
    if ( *(int *)(a1 + 40) > 0 )
    {
      v12 = 0LL;
      do
      {
        v13 = 0;
        v14 = 0LL;
        if ( *(int *)(a1 + 56) > 0 )
        {
          v15 = (_DWORD *)(*(_QWORD *)(a1 + 64) + 1308LL);
          while ( *v15 != v11 )
          {
            ++v13;
            ++v14;
            v15 += 370;
            if ( v14 >= *(int *)(a1 + 56) )
              goto LABEL_25;
          }
          *(_DWORD *)(v12 + *(_QWORD *)(a1 + 48) + 752) = v13;
        }
LABEL_25:
        ++v11;
        v12 += 760LL;
      }
      while ( v11 < *(_DWORD *)(a1 + 40) );
    }
    v16 = 0;
    if ( *(int *)(a1 + 40) > 0 )
    {
      v17 = *(_QWORD *)(a1 + 48);
      v18 = 0LL;
      do
      {
        v19 = *(int *)(v18 + v17 + 752);
        if ( (int)v19 >= 0 )
        {
          v20 = 1480 * v19;
          v21 = *(_QWORD *)(a1 + 64);
          v22 = 0;
          v27 = *(_OWORD *)(v20 + v21 + 1416);
          v28 = *(_OWORD *)(v20 + v21 + 1432);
          v29 = *(_OWORD *)(v20 + v21 + 1448);
          if ( *(int *)(v18 + v17 + 16) > 0 )
          {
            v23 = 0LL;
            do
            {
              ++v22;
              v24 = *(_QWORD *)(v18 + *(_QWORD *)(a1 + 48) + 24);
              v25 = *(_QWORD *)(v24 + v23);
              v26 = *(float *)(v24 + v23 + 8);
              *(float *)(v24 + v23) = (float)((float)((float)(*((float *)&v27 + 1) * *((float *)&v25 + 1))
                                                    + (float)(*(float *)&v27 * *(float *)&v25))
                                            + (float)(*((float *)&v27 + 2) * v26))
                                    + *((float *)&v27 + 3);
              *(float *)(v24 + v23 + 4) = (float)((float)((float)(*((float *)&v28 + 1) * *((float *)&v25 + 1))
                                                        + (float)(*(float *)&v28 * *(float *)&v25))
                                                + (float)(*((float *)&v28 + 2) * v26))
                                        + *((float *)&v28 + 3);
              *(float *)(v24 + v23 + 8) = (float)((float)((float)(*((float *)&v29 + 1) * *((float *)&v25 + 1))
                                                        + (float)(*(float *)&v29 * *(float *)&v25))
                                                + (float)(*((float *)&v29 + 2) * v26))
                                        + *((float *)&v29 + 3);
              v23 += 76LL;
              v17 = *(_QWORD *)(a1 + 48);
            }
            while ( v22 < *(_DWORD *)(v18 + v17 + 16) );
          }
        }
        ++v16;
        v18 += 760LL;
      }
      while ( v16 < *(_DWORD *)(a1 + 40) );
    }
  }
}

//----- (0000000180006F20) ----------------------------------------------------
__int64 __fastcall sub_180006F20(__int64 *a1, unsigned int *a2)
{
  __int64 v3; // rdx
  unsigned int v5; // eax
  unsigned int v6; // edx

  v3 = *a1;
  if ( *a1 && (v5 = *((_DWORD *)a1 + 2) + 4, v5 <= *((_DWORD *)a1 + 3)) )
  {
    *((_DWORD *)a1 + 2) = v5;
    *a2 = *(_DWORD *)(v5 - 4 + v3);
    if ( *((_DWORD *)a1 + 4) )
    {
      v6 = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1);
      *a2 = (((v6 << 16) | v6 & 0xFF00) << 8) | ((HIWORD(v6) | v6 & 0xFF0000) >> 8);
    }
    return 1LL;
  }
  else
  {
    *a2 = 0;
    return 0LL;
  }
}

//----- (0000000180006F90) ----------------------------------------------------
__int64 __fastcall sub_180006F90(__int64 a1, _DWORD *a2)
{
  int v2; // eax
  __int64 v6; // r11
  int v7; // edx
  unsigned int v8; // r10d
  unsigned int v9; // eax
  unsigned int v10; // eax
  unsigned int v11; // eax
  int v12; // edx
  unsigned int v13; // r13d
  int v14; // ecx
  unsigned int v15; // edi
  unsigned int v16; // r9d
  unsigned int v17; // r8d
  __int64 v18; // rdx
  CHAR v19; // al
  unsigned int v20; // ecx
  int v21; // ecx
  unsigned __int32 v22; // edx
  __int64 v23; // r8
  int i; // ecx
  int v25; // r9d
  unsigned int v26; // edx
  int v27; // r9d
  int v28; // ecx
  int v29; // ecx
  int v30; // ecx
  int v31; // ecx
  int v32; // r10d
  int v33; // r9d
  int v34; // r10d
  unsigned __int32 v35; // r15d
  int v36; // r10d
  unsigned int v37; // r11d
  int v38; // r10d
  unsigned int v39; // esi
  int v40; // r10d
  unsigned int v41; // r12d
  int v42; // r10d
  unsigned int v43; // eax
  int v44; // r10d
  unsigned int v45; // eax
  int v46; // r10d
  unsigned int v47; // eax
  int v48; // r10d
  unsigned int v49; // eax
  int v50; // r10d
  unsigned int v51; // eax
  int v52; // r10d
  unsigned __int32 v53; // r14d
  int v54; // r10d
  int v55; // ecx
  int v56; // ecx
  int v57; // ecx
  int v58; // ecx
  int v59; // r10d
  unsigned int v60; // ebp
  int v61; // r10d
  int v62; // r14d
  __int64 v63; // r8
  unsigned int v64; // edx
  int v65; // r9d
  int v66; // r10d
  unsigned __int32 v67; // r11d
  unsigned int v68; // r9d
  unsigned __int32 v69; // ebp
  int v70; // r9d
  unsigned __int32 v71; // esi
  unsigned int v72; // r9d
  unsigned __int32 v73; // edi
  __int64 *v74; // rcx
  __int64 *v75; // rcx
  __int64 *v76; // rcx
  __int64 *v77; // rcx
  int v78; // r9d
  int v79; // edi
  __int64 v80; // r8
  unsigned int v81; // r9d
  int v82; // r10d
  unsigned __int32 v83; // edx
  __int64 *v84; // rcx
  int v85; // r9d
  int v86; // ecx
  unsigned int v87; // edx
  unsigned int v88; // eax
  unsigned int v89; // eax
  unsigned int v90; // eax
  int v91; // ecx
  unsigned int v92; // eax
  __int64 v93; // rdx
  __int64 v94; // [rsp+0h] [rbp-5D8h] BYREF
  unsigned __int32 v95; // [rsp+30h] [rbp-5A8h]
  unsigned int v96; // [rsp+34h] [rbp-5A4h]
  unsigned int v97; // [rsp+38h] [rbp-5A0h]
  int v98; // [rsp+3Ch] [rbp-59Ch]
  unsigned int v99; // [rsp+40h] [rbp-598h]
  int v100; // [rsp+44h] [rbp-594h]
  unsigned int v101; // [rsp+48h] [rbp-590h]
  unsigned int v102; // [rsp+4Ch] [rbp-58Ch]
  CHAR MultiByteStr[272]; // [rsp+50h] [rbp-588h] BYREF
  char v104[272]; // [rsp+160h] [rbp-478h] BYREF
  char v105[272]; // [rsp+270h] [rbp-368h] BYREF
  char v106[272]; // [rsp+380h] [rbp-258h] BYREF
  char v107[272]; // [rsp+490h] [rbp-148h] BYREF

  v2 = a2[2];
  if ( !v2 )
    return 0LL;
  v6 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = v2;
  v7 = a2[4];
  if ( !v6 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = v2 + 4;
  if ( v9 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v9;
  v10 = v9 + 4;
  if ( v10 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10;
  v11 = v10 + 4;
  if ( v11 > v8 )
    return 0LL;
  v12 = v7 - 3;
  v13 = 0;
  *(_DWORD *)(a1 + 8) = v11;
  v14 = 0;
  if ( v12 <= 0 )
  {
LABEL_10:
    v15 = a2[7];
    if ( *(_DWORD *)(a1 + 8) < v15 )
    {
      while ( &v94 != (__int64 *)-80LL && *(_DWORD *)(a1 + 8) + 4 <= v8 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v16 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
        if ( *(_DWORD *)(a1 + 16) )
          v16 = _byteswap_ulong(v16);
        v17 = 0;
        v18 = 0LL;
        if ( !v16 )
          goto LABEL_22;
        do
        {
          if ( *(_DWORD *)(a1 + 8) + 1 > v8 )
            return 0LL;
          v19 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v6);
          if ( v18 < 260 )
            MultiByteStr[v18] = v19;
          if ( !v19 )
            break;
          ++v17;
          ++v18;
        }
        while ( v17 < v16 );
        if ( v18 < 260 )
LABEL_22:
          MultiByteStr[v18] = 0;
        v20 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
        if ( (*(_DWORD *)(a1 + 8) & 3) != 0 )
          v20 += 4;
        *(_DWORD *)(a1 + 8) = v20;
        if ( v20 >= v15 )
          goto LABEL_26;
      }
      return 0LL;
    }
LABEL_26:
    v21 = *(_DWORD *)(a1 + 8);
    if ( a2[7] )
      v21 = a2[7];
    *(_DWORD *)(a1 + 8) = v21;
    if ( v21 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v22 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
    if ( *(_DWORD *)(a1 + 16) )
      v22 = _byteswap_ulong(v22);
    sub_180005050((__int64 *)a1, v22, (__int64)MultiByteStr);
    v23 = *(_QWORD *)a1;
    for ( i = 0; i < 6; ++i )
    {
      if ( !v23 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v25 = *(_DWORD *)(a1 + 8);
    }
    v26 = *(_DWORD *)(a1 + 12);
    if ( v25 + 4 > v26 )
      return 0LL;
    v27 = v25 + 4;
    *(_DWORD *)(a1 + 8) = v27;
    if ( v27 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v28 = *(_DWORD *)(a1 + 8);
    if ( v28 + 4 > v26 )
      return 0LL;
    v29 = v28 + 4;
    *(_DWORD *)(a1 + 8) = v29;
    if ( v29 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v30 = *(_DWORD *)(a1 + 8);
    if ( v30 + 4 > v26 )
      return 0LL;
    v31 = v30 + 4;
    *(_DWORD *)(a1 + 8) = v31;
    if ( v31 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v32 = *(_DWORD *)(a1 + 8);
    if ( v32 + 4 > v26 )
      return 0LL;
    v33 = *(_DWORD *)(a1 + 16);
    v34 = v32 + 4;
    *(_DWORD *)(a1 + 8) = v34;
    v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v23);
    if ( v33 )
      v35 = _byteswap_ulong(v35);
    if ( v34 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v36 = *(_DWORD *)(a1 + 8);
    v37 = *(_DWORD *)((unsigned int)(v36 - 4) + v23);
    if ( v33 )
      v37 = _byteswap_ulong(v37);
    if ( v36 + 4 > v26 )
      return 0LL;
    v38 = v36 + 4;
    *(_DWORD *)(a1 + 8) = v38;
    v39 = *(_DWORD *)((unsigned int)(v38 - 4) + v23);
    v96 = v39;
    if ( v33 )
    {
      v39 = _byteswap_ulong(v39);
      v96 = v39;
    }
    if ( v38 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v40 = *(_DWORD *)(a1 + 8);
    v41 = *(_DWORD *)((unsigned int)(v40 - 4) + v23);
    if ( v33 )
      v41 = _byteswap_ulong(v41);
    if ( v40 + 4 > v26 )
      return 0LL;
    v42 = v40 + 4;
    *(_DWORD *)(a1 + 8) = v42;
    v43 = *(_DWORD *)((unsigned int)(v42 - 4) + v23);
    v99 = v43;
    if ( v33 )
      v99 = _byteswap_ulong(v43);
    if ( v42 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v44 = *(_DWORD *)(a1 + 8);
    v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v23);
    v98 = v45;
    if ( v33 )
      v98 = _byteswap_ulong(v45);
    if ( v44 + 4 > v26 )
      return 0LL;
    v46 = v44 + 4;
    *(_DWORD *)(a1 + 8) = v46;
    v47 = *(_DWORD *)((unsigned int)(v46 - 4) + v23);
    v101 = v47;
    if ( v33 )
      v101 = _byteswap_ulong(v47);
    if ( v46 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v48 = *(_DWORD *)(a1 + 8);
    v49 = *(_DWORD *)((unsigned int)(v48 - 4) + v23);
    v100 = v49;
    if ( v33 )
      v100 = _byteswap_ulong(v49);
    if ( v48 + 4 > v26 )
      return 0LL;
    v50 = v48 + 4;
    *(_DWORD *)(a1 + 8) = v50;
    v51 = *(_DWORD *)((unsigned int)(v50 - 4) + v23);
    v102 = v51;
    if ( v33 )
      v102 = _byteswap_ulong(v51);
    if ( v50 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v52 = *(_DWORD *)(a1 + 8);
    v53 = *(_DWORD *)((unsigned int)(v52 - 4) + v23);
    v95 = v53;
    if ( v33 )
    {
      v53 = _byteswap_ulong(v53);
      v95 = v53;
    }
    if ( v52 + 4 > v26 )
      return 0LL;
    v54 = v52 + 4;
    *(_DWORD *)(a1 + 8) = v54;
    if ( v54 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v55 = *(_DWORD *)(a1 + 8);
    if ( v55 + 4 > v26 )
      return 0LL;
    v56 = v55 + 4;
    *(_DWORD *)(a1 + 8) = v56;
    if ( v56 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v57 = *(_DWORD *)(a1 + 8);
    if ( v57 + 4 > v26 )
      return 0LL;
    v58 = v57 + 4;
    *(_DWORD *)(a1 + 8) = v58;
    if ( v58 + 4 > v26 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v59 = *(_DWORD *)(a1 + 8);
    v60 = *(_DWORD *)((unsigned int)(v59 - 4) + v23);
    v97 = v60;
    if ( v33 )
    {
      v60 = _byteswap_ulong(v60);
      v97 = v60;
    }
    if ( v59 + 4 <= v26 )
    {
      v61 = v59 + 4;
      *(_DWORD *)(a1 + 8) = v61;
      if ( v61 + 4 <= v26 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( !v37 )
          goto LABEL_104;
        *(_DWORD *)(a1 + 8) = v37;
        if ( !v35 || (unsigned int)sub_180001FD0((__int64)&qword_1800306F0, v35) )
        {
          v62 = 0;
          if ( v35 )
          {
            while ( 1 )
            {
              memset(MultiByteStr, 0, 0x104uLL);
              v63 = *(_QWORD *)a1;
              if ( !*(_QWORD *)a1 )
                return 0LL;
              v64 = *(_DWORD *)(a1 + 12);
              if ( *(_DWORD *)(a1 + 8) + 4 > v64 )
                return 0LL;
              *(_DWORD *)(a1 + 8) += 4;
              v65 = *(_DWORD *)(a1 + 8);
              v66 = *(_DWORD *)(a1 + 16);
              v67 = *(_DWORD *)((unsigned int)(v65 - 4) + v63);
              if ( v66 )
                v67 = _byteswap_ulong(v67);
              v68 = v65 + 4;
              if ( v68 > v64 )
                return 0LL;
              *(_DWORD *)(a1 + 8) = v68;
              v69 = *(_DWORD *)(v68 - 4 + v63);
              if ( v66 )
                v69 = _byteswap_ulong(v69);
              if ( v68 + 4 > v64 )
                return 0LL;
              *(_DWORD *)(a1 + 8) += 4;
              v70 = *(_DWORD *)(a1 + 8);
              v71 = *(_DWORD *)((unsigned int)(v70 - 4) + v63);
              if ( v66 )
                v71 = _byteswap_ulong(v71);
              v72 = v70 + 4;
              if ( v72 > v64 )
                return 0LL;
              *(_DWORD *)(a1 + 8) = v72;
              v73 = *(_DWORD *)(v72 - 4 + v63);
              if ( v66 )
                v73 = _byteswap_ulong(v73);
              if ( v72 + 4 > v64 )
                return 0LL;
              *(_DWORD *)(a1 + 8) += 4;
              sub_180005050((__int64 *)a1, v67, (__int64)MultiByteStr);
              sub_180005050(v74, v69, (__int64)v106);
              sub_180005050(v75, v71, (__int64)v107);
              sub_180005050(v76, v73, (__int64)v104);
              sub_180005050(v77, v78, (__int64)v105);
              if ( qword_180030700 )
                MultiByteToWideChar(0, 1u, MultiByteStr, -1, (LPWSTR)qword_180030700 + 260 * v62, 255);
              if ( ++v62 >= v35 )
              {
                v39 = v96;
                v60 = v97;
                break;
              }
            }
          }
          v53 = v95;
LABEL_104:
          if ( v41 && (*(_DWORD *)(a1 + 8) = v41, v79 = 0, v39) )
          {
            v80 = *(_QWORD *)a1;
LABEL_107:
            if ( v80 )
            {
              v81 = *(_DWORD *)(a1 + 12);
              if ( *(_DWORD *)(a1 + 8) + 4 <= v81 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                v82 = *(_DWORD *)(a1 + 8);
                v83 = *(_DWORD *)((unsigned int)(v82 - 4) + v80);
                if ( *(_DWORD *)(a1 + 16) )
                  v83 = _byteswap_ulong(v83);
                if ( v82 + 4 <= v81 )
                {
                  *(_DWORD *)(a1 + 8) = v82 + 4;
                  sub_180005050((__int64 *)a1, v83, (__int64)v105);
                  sub_180005050(v84, v85, (__int64)v104);
                  v80 = *(_QWORD *)a1;
                  v86 = 0;
                  while ( v80 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( ++v86 >= 9 )
                    {
                      v87 = *(_DWORD *)(a1 + 12);
                      v88 = *(_DWORD *)(a1 + 8) + 4;
                      if ( v88 <= v87 )
                      {
                        *(_DWORD *)(a1 + 8) = v88;
                        if ( v88 + 4 <= v87 )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v89 = *(_DWORD *)(a1 + 8) + 4;
                          if ( v89 <= v87 )
                          {
                            *(_DWORD *)(a1 + 8) = v89;
                            if ( v89 + 4 <= v87 )
                            {
                              *(_DWORD *)(a1 + 8) += 4;
                              v90 = *(_DWORD *)(a1 + 8) + 4;
                              if ( v90 <= v87 )
                              {
                                *(_DWORD *)(a1 + 8) = v90;
                                if ( v90 + 4 <= v87 )
                                {
                                  *(_DWORD *)(a1 + 8) += 4;
                                  v91 = 0;
                                  v92 = *(_DWORD *)(a1 + 8);
                                  while ( 1 )
                                  {
                                    v92 += 4;
                                    if ( v92 > v87 )
                                      break;
                                    ++v91;
                                    *(_DWORD *)(a1 + 8) = v92;
                                    if ( v91 >= 5 )
                                    {
                                      if ( ++v79 < v39 )
                                        goto LABEL_107;
                                      goto LABEL_126;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      return 0LL;
                    }
                  }
                }
              }
            }
          }
          else
          {
LABEL_126:
            if ( (unsigned int)sub_1800077E0(a1, v99, v98)
              && (unsigned int)sub_180007A40(a1, v101, v100)
              && (unsigned int)sub_180008650(a1, v102, v53) )
            {
              LOBYTE(v13) = (unsigned int)sub_180008DC0(a1, v93, v60) != 0;
              return v13;
            }
          }
        }
      }
    }
    return 0LL;
  }
  while ( *(_DWORD *)(a1 + 8) + 4 <= v8 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    if ( ++v14 >= v12 )
      goto LABEL_10;
  }
  return 0LL;
}
// 18000714C: conditional instruction was optimized away because r8.8!=0
// 180007699: conditional instruction was optimized away because r8.8!=0
// 18000754B: variable 'v74' is possibly undefined
// 18000755A: variable 'v75' is possibly undefined
// 180007569: variable 'v76' is possibly undefined
// 180007579: variable 'v77' is possibly undefined
// 180007579: variable 'v78' is possibly undefined
// 180007661: variable 'v84' is possibly undefined
// 180007661: variable 'v85' is possibly undefined
// 18000776B: variable 'v93' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180006F90: using guessed type CHAR MultiByteStr[272];
// 180006F90: using guessed type char var_258[272];
// 180006F90: using guessed type char var_148[272];

//----- (00000001800077E0) ----------------------------------------------------
__int64 __fastcall sub_1800077E0(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  unsigned int v6; // esi
  __int64 v7; // rbp
  __int64 v8; // r8
  unsigned int v9; // edx
  int v10; // r9d
  int v11; // r11d
  unsigned __int32 v12; // r10d
  int v13; // r9d
  unsigned __int32 v14; // edi
  __int64 *v15; // rcx
  __int64 *v16; // rcx
  int v17; // r9d
  __int64 v18; // r9
  unsigned int v19; // edx
  int v20; // r8d
  unsigned int v21; // r9d
  int v22; // ecx
  char *v23; // rdx
  char *v24; // r8
  char v25; // al
  char v26[272]; // [rsp+20h] [rbp-358h] BYREF
  char v27[272]; // [rsp+130h] [rbp-248h] BYREF
  char v28[272]; // [rsp+240h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !a2 || (result = sub_1800020D0((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = 0;
    if ( a2 )
    {
      v7 = 0LL;
LABEL_7:
      memset(v26, 0, 0x104uLL);
      v8 = *(_QWORD *)a1;
      if ( *(_QWORD *)a1 )
      {
        v9 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          v10 = *(_DWORD *)(a1 + 8);
          v11 = *(_DWORD *)(a1 + 16);
          v12 = *(_DWORD *)((unsigned int)(v10 - 4) + v8);
          if ( v11 )
            v12 = _byteswap_ulong(v12);
          if ( v10 + 4 <= v9 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v13 = *(_DWORD *)(a1 + 8);
            v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v8);
            if ( v11 )
              v14 = _byteswap_ulong(v14);
            if ( v13 + 4 <= v9 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                sub_180005050((__int64 *)a1, v12, (__int64)v26);
                sub_180005050(v15, v14, (__int64)v27);
                sub_180005050(v16, v17, (__int64)v28);
                v18 = *(_QWORD *)a1;
                if ( *(_QWORD *)a1 )
                {
                  v19 = *(_DWORD *)(a1 + 12);
                  if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        v20 = *(_DWORD *)(a1 + 8);
                        v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v18);
                        if ( *(_DWORD *)(a1 + 16) )
                          v21 = _byteswap_ulong(v21);
                        if ( v20 + 4 <= v19 )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v22 = 0;
                          while ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( ++v22 >= 8 )
                            {
                              if ( qword_180030710 )
                              {
                                v23 = v26;
                                v24 = (char *)qword_180030710 + 312 * (int)v6 + 52;
                                do
                                {
                                  v25 = *v23++;
                                  *v24++ = v25;
                                }
                                while ( v25 );
                                *(_DWORD *)((char *)qword_180030710 + v7 + 40) = v21;
                              }
                              ++v6;
                              v7 += 312LL;
                              if ( v6 < a2 )
                                goto LABEL_7;
                              return 1LL;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return 0LL;
    }
    else
    {
      return 1LL;
    }
  }
  return result;
}
// 18000790F: variable 'v15' is possibly undefined
// 18000791F: variable 'v16' is possibly undefined
// 18000791F: variable 'v17' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 1800077E0: using guessed type char var_248[272];
// 1800077E0: using guessed type char var_138[272];

//----- (0000000180007A40) ----------------------------------------------------
__int64 __fastcall sub_180007A40(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  unsigned int v6; // ebp
  int v7; // edi
  unsigned int v8; // r14d
  __int64 v9; // r9
  unsigned int v10; // r8d
  int v11; // r10d
  unsigned __int32 v12; // edx
  __int64 *v13; // rcx
  int v14; // r9d
  __int64 v15; // r8
  char *v16; // rcx
  _BYTE *v17; // rdx
  char v18; // al
  char *v19; // rcx
  _BYTE *v20; // rdx
  char v21; // al
  __int64 v22; // r9
  __int64 v23; // rsi
  unsigned int v24; // r8d
  int v25; // r11d
  unsigned __int32 v26; // r10d
  int v27; // edx
  unsigned __int32 v28; // edi
  __int64 *v29; // rcx
  __int64 v30; // rcx
  __int64 v31; // r8
  int v32; // r9d
  char v33[272]; // [rsp+20h] [rbp-258h] BYREF
  char v34[272]; // [rsp+130h] [rbp-148h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !a2 || (result = sub_180001B50((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 8);
    if ( a2 )
    {
      while ( 1 )
      {
        memset(v33, 0, 0x104uLL);
        memset(v34, 0, 0x104uLL);
        v9 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v10 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)(a1 + 8);
        v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
        if ( *(_DWORD *)(a1 + 16) )
          v12 = _byteswap_ulong(v12);
        if ( v11 + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v12, (__int64)v33);
        sub_180005050(v13, v14, (__int64)v34);
        if ( qword_180030720 )
        {
          v15 = 760LL * v7;
          v16 = v33;
          v17 = (_BYTE *)(v15 + qword_180030720 + 232);
          do
          {
            v18 = *v16++;
            *v17++ = v18;
          }
          while ( v18 );
          v19 = v34;
          v20 = (_BYTE *)(v15 + qword_180030720 + 492);
          do
          {
            v21 = *v19++;
            *v20++ = v21;
          }
          while ( v21 );
        }
        if ( ++v7 >= a2 )
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      *(_DWORD *)(a1 + 8) = v8;
      if ( a2 )
      {
        while ( 1 )
        {
          v22 = *(_QWORD *)a1;
          v23 = qword_180030720 + 760LL * (int)v6;
          if ( !*(_QWORD *)a1 )
            break;
          v24 = *(_DWORD *)(a1 + 12);
          if ( v8 + 4 > v24 )
            break;
          v25 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 8) = v8 + 4;
          v26 = *(_DWORD *)(v8 + v22);
          if ( v25 )
            v26 = _byteswap_ulong(v26);
          if ( v8 + 8 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v27 = *(_DWORD *)(a1 + 8);
          v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v22);
          if ( v25 )
            v28 = _byteswap_ulong(v28);
          if ( v27 + 4 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v26, (__int64)v34);
          sub_180005050(v29, v28, (__int64)v33);
          v8 = *(_DWORD *)(a1 + 8);
          if ( !(unsigned int)sub_180007D40(v30, v23, v31, v32) )
            break;
          ++v6;
          *(_DWORD *)(a1 + 8) = v8;
          if ( v6 >= a2 )
            return 1LL;
        }
        return 0LL;
      }
      else
      {
        return 1LL;
      }
    }
  }
  return result;
}
// 180007B82: variable 'v13' is possibly undefined
// 180007B82: variable 'v14' is possibly undefined
// 180007CC5: variable 'v29' is possibly undefined
// 180007CD1: variable 'v30' is possibly undefined
// 180007CD1: variable 'v31' is possibly undefined
// 180007CD1: variable 'v32' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030720: using guessed type __int64 qword_180030720;

//----- (0000000180007D40) ----------------------------------------------------
__int64 __fastcall sub_180007D40(__int64 a1, __int64 a2, __int64 a3, int a4)
{
  __int64 v6; // r10
  unsigned int v7; // eax
  unsigned int v8; // r9d
  int v9; // r8d
  int v10; // r11d
  int v11; // edi
  int v12; // r8d
  unsigned int v13; // r9d
  __int64 v14; // r15
  unsigned int v15; // r10d
  int v16; // r8d
  int v17; // r13d
  int v18; // r9d
  int v19; // r8d
  int v20; // r9d
  unsigned int v21; // r14d
  int v22; // r11d
  unsigned int v23; // r9d
  unsigned int v24; // r12d
  unsigned int v25; // edi
  int v26; // esi
  char *v27; // r14
  int v28; // r11d
  int v29; // r11d
  char *v30; // rsi
  int v31; // r8d
  int v32; // ecx
  int v33; // r9d
  char *v34; // rcx
  int v35; // eax
  int v36; // edx
  int v37; // eax
  int v38; // r9d
  __int64 v39; // r13
  __int64 v40; // rdx
  unsigned int v41; // r8d
  int v42; // r10d
  int v43; // r9d
  unsigned int v44; // r8d
  unsigned int v45; // r10d
  unsigned int v46; // r11d
  int v47; // esi
  __int64 v48; // r12
  __int64 v49; // r14
  __int64 v50; // r10
  __int64 v51; // rdx
  unsigned int v52; // r11d
  int v53; // r9d
  unsigned __int16 v54; // r8
  int v55; // esi
  int v56; // r15d
  unsigned __int16 v57; // r9
  unsigned __int16 v58; // dx
  __int64 v59; // rcx
  int v60; // [rsp+30h] [rbp-D0h]
  unsigned int v61; // [rsp+34h] [rbp-CCh]
  unsigned int v62; // [rsp+38h] [rbp-C8h]
  int v63; // [rsp+3Ch] [rbp-C4h]
  int v64; // [rsp+40h] [rbp-C0h]
  unsigned int v65; // [rsp+48h] [rbp-B8h] BYREF
  __int64 v66; // [rsp+4Ch] [rbp-B4h]
  unsigned int v67; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v68; // [rsp+5Ch] [rbp-A4h]
  __int64 v69; // [rsp+68h] [rbp-98h]
  __int64 v70; // [rsp+70h] [rbp-90h]
  __int64 v71; // [rsp+80h] [rbp-80h] BYREF
  char Base[4]; // [rsp+88h] [rbp-78h] BYREF
  char v73[4]; // [rsp+8Ch] [rbp-74h] BYREF
  char v74; // [rsp+90h] [rbp-70h] BYREF
  char v75[272]; // [rsp+130h] [rbp+30h] BYREF

  v70 = -2LL;
  v69 = a2;
  if ( !a2 )
    return 0LL;
  if ( !a4 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  sub_1800010C0(&v71);
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    goto LABEL_117;
  v7 = *(_DWORD *)(a1 + 8) + 4;
  v8 = *(_DWORD *)(a1 + 12);
  if ( v7 > v8 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) = v7;
  if ( v7 + 4 > v8 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v9 = *(_DWORD *)(a1 + 8);
  v63 = *(_DWORD *)((unsigned int)(v9 - 4) + v6);
  v10 = *(_DWORD *)(a1 + 16);
  if ( v10 )
    v63 = (*(_DWORD *)((unsigned int)(v9 - 4) + v6) << 24) | ((*(_DWORD *)((unsigned int)(v9 - 4) + v6) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v9 - 4) + v6) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v9 - 4) + v6));
  if ( v9 + 4 > v8 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v11 = *(_DWORD *)(a1 + 8);
  v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v6);
  if ( v10 )
    v12 = (*(_DWORD *)((unsigned int)(v11 - 4) + v6) << 24) | ((*(_DWORD *)((unsigned int)(v11 - 4) + v6) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v11 - 4) + v6) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v11 - 4) + v6));
  if ( v11 + 4 > v8 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v64 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
  if ( v10 )
  {
    v13 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
    v64 = (v13 << 24) | ((v13 & 0xFF00) << 8) | (v13 >> 8) & 0xFF00 | HIBYTE(v13);
  }
  if ( !v12 )
  {
LABEL_116:
    v25 = 1;
    goto LABEL_118;
  }
  v66 = 0LL;
  v65 = 0;
  v68 = 0LL;
  v67 = 0;
  if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v65) )
    goto LABEL_117;
  if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v67) )
    goto LABEL_117;
  v14 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    goto LABEL_117;
  v15 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v16 = *(_DWORD *)(a1 + 8);
  v60 = *(_DWORD *)((unsigned int)(v16 - 4) + v14);
  v17 = *(_DWORD *)(a1 + 16);
  if ( v17 )
    v60 = (*(_DWORD *)((unsigned int)(v16 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v16 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v16 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v16 - 4) + v14));
  if ( v16 + 4 > v15 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v18 = *(_DWORD *)(a1 + 8);
  v19 = *(_DWORD *)((unsigned int)(v18 - 4) + v14);
  if ( v17 )
    v19 = (*(_DWORD *)((unsigned int)(v18 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v18 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v18 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v18 - 4) + v14));
  if ( v18 + 4 > v15 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v14);
  v61 = v21;
  if ( v17 )
  {
    v21 = (*(_DWORD *)((unsigned int)(v20 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v20 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v20 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v20 - 4) + v14));
    v61 = v21;
  }
  if ( v20 + 4 > v15 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
    goto LABEL_117;
  *(_DWORD *)(a1 + 8) += 4;
  v22 = *(_DWORD *)(a1 + 8);
  v62 = *(_DWORD *)((unsigned int)(v22 - 4) + v14);
  if ( v17 )
    v62 = (*(_DWORD *)((unsigned int)(v22 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v22 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v22 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v22 - 4) + v14));
  if ( v22 + 4 > v15 || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v15) )
  {
LABEL_117:
    v25 = 0;
    goto LABEL_118;
  }
  *(_DWORD *)(a1 + 8) += 4;
  v23 = *(_DWORD *)(a1 + 8);
  v24 = *(_DWORD *)(v23 - 4 + v14);
  if ( v17 )
    v24 = (*(_DWORD *)(v23 - 4 + v14) << 24) | ((*(_DWORD *)(v23 - 4 + v14) & 0xFF00) << 8) | (*(_DWORD *)(v23 - 4 + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v23 - 4 + v14));
  HIDWORD(v71) = v19;
  v25 = 0;
  v26 = 0;
  if ( v19 )
  {
    v27 = v73;
    do
    {
      if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
        goto LABEL_118;
      *(_DWORD *)(a1 + 8) += 4;
      v23 = *(_DWORD *)(a1 + 8);
      v28 = *(_DWORD *)(v23 - 4 + v14);
      if ( v17 )
        v28 = (*(_DWORD *)(v23 - 4 + v14) << 24) | ((*(_DWORD *)(v23 - 4 + v14) & 0xFF00) << 8) | (*(_DWORD *)(v23 - 4 + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v23 - 4 + v14));
      if ( v26 < (int)v71 )
        *(_DWORD *)v27 = v28;
      ++v26;
      v27 += 16;
    }
    while ( v26 < (unsigned int)v19 );
    v19 = HIDWORD(v71);
    v21 = v61;
  }
  v29 = 0;
  if ( v21 )
  {
    v30 = &v74;
    do
    {
      if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
        goto LABEL_118;
      *(_DWORD *)(a1 + 8) += 4;
      v23 = *(_DWORD *)(a1 + 8);
      v31 = *(_DWORD *)(v23 - 4 + v14);
      if ( v17 )
        v31 = (*(_DWORD *)(v23 - 4 + v14) << 24) | ((*(_DWORD *)(v23 - 4 + v14) & 0xFF00) << 8) | (*(_DWORD *)(v23 - 4 + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v23 - 4 + v14));
      if ( v29 < (int)v71 )
        *(_DWORD *)v30 = v31;
      ++v29;
      v30 += 16;
    }
    while ( v29 < v21 );
    v19 = HIDWORD(v71);
  }
  v32 = 0;
  if ( v62 )
  {
    while ( *(_DWORD *)(a1 + 8) + 4 <= v15 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      v23 = *(_DWORD *)(a1 + 8);
      if ( ++v32 >= v62 )
        goto LABEL_60;
    }
    goto LABEL_118;
  }
LABEL_60:
  if ( v23 < v24 )
  {
    while ( v23 + 4 <= v15 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      v23 = *(_DWORD *)(a1 + 8);
      if ( v23 >= v24 )
        goto LABEL_63;
    }
    goto LABEL_118;
  }
LABEL_63:
  if ( v24 )
    *(_DWORD *)(a1 + 8) = v24;
  if ( v19 > 1 )
  {
    qsort(Base, v19, 0x10uLL, (_CoreCrtNonSecureSearchSortCompareFunction)CompareFunction);
    v19 = HIDWORD(v71);
  }
  v33 = 0;
  if ( v19 > 0 )
  {
    v34 = v73;
    while ( 1 )
    {
      v35 = v60;
      if ( ++v33 < v19 )
        v35 = *((_DWORD *)v34 + 4);
      v36 = *((_DWORD *)v34 + 1);
      if ( v36 == 6 )
        break;
      if ( v36 == 2 )
      {
        v37 = (v35 - *(_DWORD *)v34) / 2;
        goto LABEL_75;
      }
LABEL_76:
      v34 += 16;
      if ( v33 >= v19 )
        goto LABEL_77;
    }
    v37 = (v35 - *(_DWORD *)v34) / 4;
LABEL_75:
    *((_DWORD *)v34 + 2) = v37;
    v19 = HIDWORD(v71);
    goto LABEL_76;
  }
LABEL_77:
  v38 = *(_DWORD *)(a1 + 8);
  v39 = v69;
  if ( !v38 || (unsigned int)sub_180005100(a1, v69, v63, v38, v60, (int *)&v71) )
  {
    if ( v64 )
      *(_DWORD *)(a1 + 8) = v64;
    v40 = *(_QWORD *)a1;
    if ( *(_QWORD *)a1 )
    {
      v41 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 <= v41 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 <= v41 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          v42 = *(_DWORD *)(a1 + 8);
          v43 = *(_DWORD *)((unsigned int)(v42 - 4) + v40);
          if ( *(_DWORD *)(a1 + 16) )
            v43 = (*(_DWORD *)((unsigned int)(v42 - 4) + v40) << 24) | ((*(_DWORD *)((unsigned int)(v42 - 4) + v40) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v42 - 4) + v40) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v42 - 4) + v40));
          if ( v42 + 4 <= v41 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            if ( *(_DWORD *)(a1 + 8) + 4 <= v41 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 <= v41 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 <= v41 )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  sub_180005050((__int64 *)a1, v43, (__int64)v75);
                  if ( *(_QWORD *)a1 )
                  {
                    v44 = *(_DWORD *)(a1 + 12);
                    if ( *(_DWORD *)(a1 + 8) + 4 <= v44 )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      if ( *(_DWORD *)(a1 + 8) + 4 <= v44 )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        if ( *(_DWORD *)(a1 + 8) + 2 <= v44 )
                        {
                          *(_DWORD *)(a1 + 8) += 2;
                          if ( *(_DWORD *)(a1 + 8) + 2 <= v44 )
                          {
                            *(_DWORD *)(a1 + 8) += 2;
                            v68 = 0LL;
                            v67 = 0;
                            v66 = 0LL;
                            v65 = 0;
                            if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v67) )
                            {
                              if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v65) )
                              {
                                if ( v45 > *(_DWORD *)(a1 + 8) )
                                  *(_DWORD *)(a1 + 8) = v45;
                                v47 = v46 / 3;
                                if ( (int)(v46 / 3) <= 0 || (unsigned int)sub_180001E80(v39, v47) )
                                {
                                  v48 = (unsigned int)v47;
                                  v49 = 0LL;
                                  if ( v47 > 0 )
                                  {
                                    v50 = 0LL;
                                    while ( 1 )
                                    {
                                      v51 = *(_QWORD *)a1;
                                      if ( !*(_QWORD *)a1 )
                                        goto LABEL_118;
                                      v52 = *(_DWORD *)(a1 + 12);
                                      if ( *(_DWORD *)(a1 + 8) + 2 > v52 )
                                        goto LABEL_118;
                                      *(_DWORD *)(a1 + 8) += 2;
                                      v53 = *(_DWORD *)(a1 + 8);
                                      v54 = *(_WORD *)((unsigned int)(v53 - 2) + v51);
                                      v55 = *(_DWORD *)(a1 + 16);
                                      if ( v55 )
                                        v54 = (v54 << 8) | HIBYTE(v54);
                                      if ( v53 + 2 > v52 )
                                        goto LABEL_118;
                                      *(_DWORD *)(a1 + 8) += 2;
                                      v56 = *(_DWORD *)(a1 + 8);
                                      v57 = *(_WORD *)((unsigned int)(v56 - 2) + v51);
                                      if ( v55 )
                                        v57 = (v57 << 8) | HIBYTE(v57);
                                      if ( v56 + 2 > v52 )
                                        goto LABEL_118;
                                      *(_DWORD *)(a1 + 8) += 2;
                                      v58 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2) + v51);
                                      if ( v55 )
                                        v58 = (v58 << 8) | HIBYTE(v58);
                                      v59 = *(_QWORD *)(v39 + 8);
                                      if ( v59 )
                                      {
                                        *(_DWORD *)(v59 + v50 + 4) = v54;
                                        *(_DWORD *)(v50 + *(_QWORD *)(v39 + 8) + 8) = v57;
                                        *(_DWORD *)(v50 + *(_QWORD *)(v39 + 8) + 12) = v58;
                                      }
                                      ++v49;
                                      v50 += 20LL;
                                      if ( v49 >= v48 )
                                        goto LABEL_116;
                                    }
                                  }
                                  goto LABEL_116;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_118:
  `eh vector destructor iterator'(Base, 0x10uLL, 0xAuLL, guard_check_icall_nop);
  return v25;
}
// 1800084E7: variable 'v45' is possibly undefined
// 1800084F7: variable 'v46' is possibly undefined
// 180007D40: using guessed type char var_150[272];

//----- (0000000180008650) ----------------------------------------------------
__int64 __fastcall sub_180008650(__int64 a1, unsigned int a2, int a3)
{
  __int64 v7; // rdx
  unsigned int v8; // r8d
  int v9; // r10d
  unsigned __int32 v10; // edx
  int v11; // r9d
  int v12; // ebp
  __int64 v13; // r11
  unsigned int v14; // r8d
  int v15; // r9d
  int v16; // r10d
  signed int v17; // edx
  int v18; // r9d
  unsigned int v19; // esi
  __int64 v20; // rdx
  char v21; // al
  int v22; // edi
  char Str[272]; // [rsp+20h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( a2 )
  {
    while ( 1 )
    {
      v7 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
      if ( *(_DWORD *)(a1 + 16) )
        v10 = _byteswap_ulong(v10);
      if ( v9 + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v10, (__int64)Str);
      if ( v11 + 1 >= a2 )
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v12 = 0;
    *(_DWORD *)(a1 + 8) = a3;
    if ( a2 )
    {
      while ( 1 )
      {
        memset(Str, 0, 0x104uLL);
        v13 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v14 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_DWORD *)(a1 + 16);
        v17 = *(_DWORD *)((unsigned int)(v15 - 4) + v13);
        if ( v16 )
          v17 = _byteswap_ulong(v17);
        if ( v15 + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v18 = *(_DWORD *)(a1 + 8);
        v19 = *(_DWORD *)((unsigned int)(v18 - 4) + v13);
        if ( v16 )
          v19 = _byteswap_ulong(v19);
        if ( v17 > 100 )
        {
          *(_DWORD *)(a1 + 8) = v17;
          v20 = 0LL;
          while ( *(_DWORD *)(a1 + 8) + 1 <= v14 )
          {
            v21 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v13);
            if ( v20 < 260 )
              Str[v20] = v21;
            ++v20;
            if ( !v21 )
            {
              if ( v20 >= 260 )
                Str[259] = 0;
              else
                Str[v20] = 0;
              *(_DWORD *)(a1 + 8) = v18;
              break;
            }
          }
        }
        if ( strstr(Str, "-skin") )
        {
          v22 = *(_DWORD *)(a1 + 8);
          sub_180008870(a1, v19);
          *(_DWORD *)(a1 + 8) = v22;
        }
        if ( ++v12 >= a2 )
          return 1LL;
      }
    }
    else
    {
      return 1LL;
    }
  }
}
// 1800086F7: variable 'v11' is possibly undefined

//----- (0000000180008870) ----------------------------------------------------
__int64 __fastcall sub_180008870(__int64 a1, unsigned int a2)
{
  __int64 v4; // r8
  unsigned __int32 v5; // edi
  __int64 v6; // r9
  unsigned int v7; // edx
  unsigned int v8; // r10d
  int v9; // r8d
  unsigned int v10; // esi
  int v11; // r10d
  unsigned int v12; // r11d
  int v13; // r10d
  unsigned int v14; // ebp
  int v15; // r10d
  unsigned int v16; // r14d
  int v17; // r10d
  unsigned int v18; // r15d
  int v19; // r10d
  unsigned int v20; // r12d
  int v21; // r10d
  unsigned int v22; // r13d
  int v23; // r10d
  int v24; // r10d
  int v25; // r10d
  int v26; // r10d
  int v27; // edi
  __int64 v28; // rdx
  unsigned __int32 v29; // edx
  int v30; // r9d
  unsigned int v31; // ebp
  int v32; // esi
  int v33; // ecx
  __int64 v34; // rdx
  unsigned int v35; // ecx
  __int64 v36; // rdx
  unsigned int v37; // eax
  unsigned int v38; // eax
  unsigned __int32 v39; // ecx
  __int64 v40; // rdx
  unsigned int v41; // eax
  unsigned int v42; // eax
  unsigned int v43; // r10d
  unsigned __int32 v44; // [rsp+20h] [rbp-1C8h]
  unsigned __int32 v45; // [rsp+24h] [rbp-1C4h]
  unsigned __int32 v46; // [rsp+28h] [rbp-1C0h]
  unsigned __int32 v47; // [rsp+2Ch] [rbp-1BCh]
  unsigned __int32 v48; // [rsp+30h] [rbp-1B8h]
  unsigned int v49; // [rsp+38h] [rbp-1B0h] BYREF
  __int64 v50; // [rsp+3Ch] [rbp-1ACh]
  unsigned int v51; // [rsp+48h] [rbp-1A0h] BYREF
  __int64 v52; // [rsp+4Ch] [rbp-19Ch]
  __int128 v53; // [rsp+60h] [rbp-188h] BYREF
  __int128 v54; // [rsp+70h] [rbp-178h]
  __int128 v55; // [rsp+80h] [rbp-168h]
  __int128 v56; // [rsp+90h] [rbp-158h]
  char v57[272]; // [rsp+A0h] [rbp-148h] BYREF

  if ( !a2 )
    return 1LL;
  v4 = *(_QWORD *)a1;
  v53 = xmmword_180028E60;
  v54 = xmmword_180028E70;
  v55 = xmmword_180028E80;
  v56 = xmmword_180028EA0;
  *(_DWORD *)(a1 + 8) = a2;
  if ( !v4 || a2 + 4 > *(_DWORD *)(a1 + 12) )
    return 0LL;
  *(_DWORD *)(a1 + 8) = a2 + 4;
  v5 = *(_DWORD *)(a2 + v4);
  if ( *(_DWORD *)(a1 + 16) )
    v5 = _byteswap_ulong(v5);
  if ( !sub_18001D8D0(a1, (unsigned int *)&v53) )
    return 0LL;
  sub_180005050((__int64 *)a1, v5, (__int64)v57);
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 8) + 4;
  if ( v8 > v7 )
    return 0LL;
  v9 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v8;
  v10 = *(_DWORD *)(v8 - 4 + v6);
  if ( v9 )
    v10 = _byteswap_ulong(v10);
  if ( v8 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v11 = *(_DWORD *)(a1 + 8);
  v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v6);
  if ( v9 )
    v12 = _byteswap_ulong(v12);
  if ( v11 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v13 = *(_DWORD *)(a1 + 8);
  v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v6);
  if ( v9 )
    v14 = _byteswap_ulong(v14);
  if ( v13 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v15 = *(_DWORD *)(a1 + 8);
  v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v6);
  if ( v9 )
    v16 = _byteswap_ulong(v16);
  if ( v15 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v17 = *(_DWORD *)(a1 + 8);
  v18 = *(_DWORD *)((unsigned int)(v17 - 4) + v6);
  if ( v9 )
    v18 = _byteswap_ulong(v18);
  if ( v17 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v6);
  if ( v9 )
    v20 = _byteswap_ulong(v20);
  if ( v19 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v21 = *(_DWORD *)(a1 + 8);
  v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v6);
  if ( v9 )
    v22 = _byteswap_ulong(v22);
  if ( v21 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v23 = *(_DWORD *)(a1 + 8);
  v44 = *(_DWORD *)((unsigned int)(v23 - 4) + v6);
  if ( v9 )
    v44 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v6));
  if ( v23 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v24 = *(_DWORD *)(a1 + 8);
  v46 = *(_DWORD *)((unsigned int)(v24 - 4) + v6);
  if ( v9 )
    v46 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v24 - 4) + v6));
  if ( v24 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v25 = *(_DWORD *)(a1 + 8);
  v45 = *(_DWORD *)((unsigned int)(v25 - 4) + v6);
  if ( v9 )
    v45 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v25 - 4) + v6));
  if ( v25 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v26 = *(_DWORD *)(a1 + 8);
  v48 = *(_DWORD *)((unsigned int)(v26 - 4) + v6);
  if ( v9 )
    v48 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v6));
  if ( v26 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v47 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
  if ( v9 )
    v47 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6));
  if ( v12 )
    *(_DWORD *)(a1 + 8) = v12;
  v27 = 0;
  if ( v10 )
  {
    do
    {
      v28 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v29 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v28);
      if ( *(_DWORD *)(a1 + 16) )
        v29 = _byteswap_ulong(v29);
      sub_180005050((__int64 *)a1, v29, (__int64)v57);
    }
    while ( v30 + 1 < v10 );
  }
  if ( v16 )
    *(_DWORD *)(a1 + 8) = v16;
  v31 = v14 >> 4;
  v32 = 0;
  if ( v31 )
  {
    do
    {
      v53 = xmmword_180028E60;
      v54 = xmmword_180028E70;
      v55 = xmmword_180028E80;
      v56 = xmmword_180028EA0;
      if ( !sub_18001D8D0(a1, (unsigned int *)&v53) )
        return 0LL;
    }
    while ( ++v32 < v31 );
  }
  if ( v20 )
    *(_DWORD *)(a1 + 8) = v20;
  v33 = 0;
  if ( v18 )
  {
    v34 = *(_QWORD *)a1;
    while ( v34 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v33 >= v18 )
        goto LABEL_65;
    }
    return 0LL;
  }
LABEL_65:
  if ( v44 )
    *(_DWORD *)(a1 + 8) = v44;
  v35 = 0;
  if ( v22 )
  {
    v36 = *(_QWORD *)a1;
    while ( v36 )
    {
      v37 = *(_DWORD *)(a1 + 8) + 1;
      if ( v37 > *(_DWORD *)(a1 + 12) )
        break;
      ++v35;
      *(_DWORD *)(a1 + 8) = v37;
      if ( v35 >= v22 )
        goto LABEL_72;
    }
    return 0LL;
  }
LABEL_72:
  v38 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
  if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
    v38 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
  if ( v45 )
    v38 = v45;
  v39 = 0;
  *(_DWORD *)(a1 + 8) = v38;
  if ( v46 )
  {
    v40 = *(_QWORD *)a1;
    while ( v40 )
    {
      v41 = *(_DWORD *)(a1 + 8) + 2;
      if ( v41 > *(_DWORD *)(a1 + 12) )
        break;
      ++v39;
      *(_DWORD *)(a1 + 8) = v41;
      if ( v39 >= v46 )
        goto LABEL_81;
    }
    return 0LL;
  }
LABEL_81:
  v42 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
  if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
    v42 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
  if ( v47 )
    v42 = v47;
  *(_DWORD *)(a1 + 8) = v42;
  if ( v48 )
  {
    while ( 1 )
    {
      v50 = 0LL;
      v49 = 0;
      v52 = 0LL;
      v51 = 0;
      if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v49) || !(unsigned int)sub_18001D5C0((__int64 *)a1, &v51) )
        break;
      if ( ++v27 >= v43 )
        return 1LL;
    }
    return 0LL;
  }
  return 1LL;
}
// 180008B8F: variable 'v30' is possibly undefined
// 180008D39: variable 'v43' is possibly undefined
// 180028E60: using guessed type __int128 xmmword_180028E60;
// 180028E70: using guessed type __int128 xmmword_180028E70;
// 180028E80: using guessed type __int128 xmmword_180028E80;
// 180028EA0: using guessed type __int128 xmmword_180028EA0;

//----- (0000000180008DC0) ----------------------------------------------------
__int64 __fastcall sub_180008DC0(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v6; // r10
  unsigned int v7; // r8d
  int v8; // r11d
  unsigned __int32 v9; // r9d
  int v10; // edx
  unsigned __int32 v11; // esi
  int v12; // edx
  unsigned int v13; // ebp
  unsigned int v14; // edi
  __int64 *v15; // rcx
  __int64 v16; // r10
  char *v17; // rdx
  char v18; // cl
  char *v19; // rdx
  char v20; // al
  char v21[272]; // [rsp+20h] [rbp-238h] BYREF
  char v22[272]; // [rsp+130h] [rbp-128h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  memset(v21, 0, 0x104uLL);
  memset(v22, 0, 0x104uLL);
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  if ( a3 + 4 > v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = a3 + 4;
  v9 = *(_DWORD *)(a3 + v6);
  if ( v8 )
    v9 = _byteswap_ulong(v9);
  if ( a3 + 8 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v6);
  if ( v8 )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v6);
  if ( v8 )
    v13 = _byteswap_ulong(v13);
  if ( v12 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
  if ( v8 )
    v14 = _byteswap_ulong(v14);
  sub_180005050((__int64 *)a1, v9, (__int64)v21);
  sub_180005050(v15, v11, (__int64)v22);
  v16 = sub_180001A00((__int64)&qword_1800306F0);
  if ( v16 )
  {
    v17 = v21;
    do
    {
      v18 = *v17;
      v17[v16 - (_QWORD)v21] = *v17;
      ++v17;
    }
    while ( v18 );
    v19 = v22;
    do
    {
      v20 = *v19;
      v19[v16 - (_QWORD)v22 + 260] = *v19;
      ++v19;
    }
    while ( v20 );
    *(_DWORD *)(v16 + 1300) = -1;
  }
  dword_180030748 = 0;
  sub_180008FC0(a1, 0, v14, v13);
  return 1LL;
}
// 180008EDC: variable 'v15' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030748: using guessed type int dword_180030748;

//----- (0000000180008FC0) ----------------------------------------------------
__int64 __fastcall sub_180008FC0(__int64 a1, int a2, unsigned int a3, unsigned int a4)
{
  __int64 v6; // r9
  unsigned int v7; // r8d
  int v8; // r11d
  int v9; // r10d
  unsigned __int32 v10; // edx
  int v11; // r11d
  unsigned __int32 v12; // ebx
  __int64 *v13; // rcx
  __int64 *v14; // rcx
  int v15; // r9d
  __int64 *v16; // rcx
  __int64 v17; // r8
  unsigned int v18; // edx
  int v19; // r9d
  int v20; // r10d
  int v21; // r9d
  unsigned int v22; // ebx
  int v23; // r9d
  unsigned int v24; // eax
  __int64 v25; // rsi
  char *v26; // rdx
  char v27; // cl
  char *v28; // rcx
  char v29; // al
  char *v30; // rcx
  char v31; // al
  __int128 v32; // xmm0
  int v33; // eax
  int v34; // eax
  unsigned int v35; // eax
  int v36; // ebx
  __int64 v37; // r8
  unsigned int v38; // [rsp+30h] [rbp-D0h]
  unsigned int v39; // [rsp+34h] [rbp-CCh]
  unsigned __int32 v40; // [rsp+38h] [rbp-C8h]
  int v41; // [rsp+3Ch] [rbp-C4h]
  int v42; // [rsp+40h] [rbp-C0h]
  int v43; // [rsp+44h] [rbp-BCh]
  int v44; // [rsp+48h] [rbp-B8h]
  __int64 v47[2]; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v48[2]; // [rsp+68h] [rbp-98h] BYREF
  __int128 v49; // [rsp+78h] [rbp-88h] BYREF
  char v50[272]; // [rsp+90h] [rbp-70h] BYREF
  char v51[272]; // [rsp+1A0h] [rbp+A0h] BYREF
  char v52[272]; // [rsp+2B0h] [rbp+1B0h] BYREF

  if ( a3 <= 0x63 || a3 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  v42 = dword_180030728 - 1;
  v41 = 0;
  if ( !a4 )
    return 1LL;
  while ( 1 )
  {
    memset(v50, 0, 0x104uLL);
    memset(v51, 0, 0x104uLL);
    memset(v52, 0, 0x104uLL);
    v6 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v7 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    v10 = *(_DWORD *)((unsigned int)(v8 - 4) + v6);
    if ( v9 )
      v10 = _byteswap_ulong(v10);
    if ( v8 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v6);
    if ( v9 )
      v12 = _byteswap_ulong(v12);
    if ( v11 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    sub_180005050((__int64 *)a1, v10, (__int64)v50);
    sub_180005050(v13, v12, (__int64)v51);
    sub_180005050(v14, v15, (__int64)v52);
    memset(v47, 0, 12);
    v49 = 0uLL;
    memset(v48, 0, 12);
    if ( !(unsigned int)sub_18001D5C0(v16, (unsigned int *)v47) )
      break;
    if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v49) )
      break;
    if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)v48) )
      break;
    if ( !*(_QWORD *)a1 )
      break;
    if ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    ++dword_180030748;
    v17 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v18 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_DWORD *)(a1 + 16);
    v43 = v19;
    v40 = *(_DWORD *)((unsigned int)(v19 - 4) + v17);
    if ( v20 )
      v40 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v17));
    if ( v19 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v17);
    v38 = v22;
    if ( v20 )
    {
      v22 = _byteswap_ulong(v22);
      v38 = v22;
    }
    if ( v21 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v44 = *(_DWORD *)(a1 + 8);
    if ( v44 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v23 = *(_DWORD *)(a1 + 8);
    v39 = *(_DWORD *)((unsigned int)(v23 - 4) + v17);
    if ( v20 )
      v39 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v17));
    v24 = v23 + 4;
    if ( (int)qword_1800306F0 > 257 )
    {
      if ( v24 > v18 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v24 = *(_DWORD *)(a1 + 8) + 4;
    }
    if ( v24 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v25 = sub_180001A00((__int64)&qword_1800306F0);
    if ( v25 )
    {
      v26 = v50;
      do
      {
        v27 = *v26;
        v26[v25 - (_QWORD)v50] = *v26;
        ++v26;
      }
      while ( v27 );
      v28 = v51;
      do
      {
        v29 = *v28;
        v28[v25 - (_QWORD)v51 + 260] = *v28;
        ++v28;
      }
      while ( v29 );
      v30 = v52;
      do
      {
        v31 = *v30;
        v30[v25 - (_QWORD)v52 + 520] = *v30;
        ++v30;
      }
      while ( v31 );
      *(_QWORD *)(v25 + 1312) = v47[0];
      v32 = v49;
      *(_DWORD *)(v25 + 1300) = v42;
      v33 = v47[1];
      *(_OWORD *)(v25 + 1336) = v32;
      *(_DWORD *)(v25 + 1320) = v33;
      v34 = v48[1];
      *(_QWORD *)(v25 + 1324) = v48[0];
      *(_DWORD *)(v25 + 1332) = v34;
    }
    if ( HIDWORD(qword_1800306F0) )
    {
      v35 = v22 + v43;
      if ( !v22 )
        v35 = 0;
      v38 = v35;
      if ( v39 )
      {
        v39 += v44;
        v38 = v35;
      }
    }
    v36 = *(_DWORD *)(a1 + 8);
    sub_180008FC0(a1, (unsigned int)(a2 + 1), v38, v40);
    sub_180009420(a1, v25, v37, v39);
    *(_DWORD *)(a1 + 8) = v36;
    if ( ++v41 >= a4 )
      return 1LL;
  }
  return 0LL;
}
// 18000910F: variable 'v13' is possibly undefined
// 18000911E: variable 'v14' is possibly undefined
// 18000911E: variable 'v15' is possibly undefined
// 18000915B: variable 'v16' is possibly undefined
// 1800093CC: variable 'v37' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030728: using guessed type int dword_180030728;
// 180030748: using guessed type int dword_180030748;
// 180008FC0: using guessed type __int128 var_368;

//----- (0000000180009420) ----------------------------------------------------
__int64 __fastcall sub_180009420(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v7; // r9
  unsigned int v8; // r10d
  __int64 v9; // r8
  int v10; // ebx
  unsigned __int32 v11; // edx
  unsigned int v12; // r9d
  int v13; // ebx

  if ( a4 <= 0x63 || a4 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  ++dword_180030748;
  v7 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = (unsigned int)(*(_DWORD *)(a1 + 8) + 4);
  if ( (unsigned int)v9 > v8 )
    return 0LL;
  v10 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v9;
  v11 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
  if ( v10 )
    v11 = _byteswap_ulong(v11);
  if ( (int)v9 + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v7);
  if ( v10 )
    v12 = _byteswap_ulong(v12);
  *(_DWORD *)(a2 + 1304) = v11;
  if ( HIDWORD(qword_1800306F0) )
  {
    if ( v12 )
      v12 += v9;
  }
  v13 = *(_DWORD *)(a1 + 8);
  sub_180009500(a1, a2, v9, v12, v11);
  *(_DWORD *)(a1 + 8) = v13;
  return 1LL;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030748: using guessed type int dword_180030748;

//----- (0000000180009500) ----------------------------------------------------
__int64 __fastcall sub_180009500(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5)
{
  unsigned int v9; // edi
  __int64 v10; // rdx
  unsigned int v11; // esi
  int v12; // r8d
  unsigned __int32 v13; // r10d
  int v14; // r9d
  unsigned __int32 v15; // esi
  __int64 *v16; // rcx
  __int64 *v17; // rcx
  int v18; // r9d
  __int64 v19; // r9
  unsigned int v20; // ecx
  int v21; // r10d
  unsigned int v22; // r9d
  __int64 v23; // r8
  char *v24; // rcx
  char v25; // al
  int v26; // edi
  __int64 v27; // r8
  int v28; // r10d
  unsigned __int32 v29; // edx
  int v30; // r9d
  unsigned __int32 v31; // esi
  __int64 *v32; // rcx
  __int64 *v33; // rcx
  int v34; // r9d
  __int64 v35; // rcx
  unsigned int v36; // ecx
  __int64 v37; // r8
  int v38; // r11d
  unsigned __int32 v39; // edx
  __int64 *v40; // rcx
  int v41; // r9d
  char v42[272]; // [rsp+30h] [rbp-248h] BYREF
  char v43[272]; // [rsp+140h] [rbp-138h] BYREF

  if ( !a4 )
    return 1LL;
  if ( a4 < 0x64 )
    return 1LL;
  v9 = *(_DWORD *)(a1 + 12);
  if ( a4 >= v9 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  switch ( a5 )
  {
    case 3:
      memset(v43, 0, 0x104uLL);
      v10 = *(_QWORD *)a1;
      if ( *(_QWORD *)a1 )
      {
        v11 = a4 + 4;
        if ( v11 <= v9 )
        {
          v12 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 8) = v11;
          v13 = *(_DWORD *)(v11 - 4 + v10);
          if ( v12 )
            v13 = _byteswap_ulong(v13);
          if ( v11 + 4 <= v9 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v14 = *(_DWORD *)(a1 + 8);
            v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v10);
            if ( v12 )
              v15 = _byteswap_ulong(v15);
            if ( v14 + 4 <= v9 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              sub_180005050((__int64 *)a1, v13, (__int64)v42);
              sub_180005050(v16, v15, (__int64)v43);
              sub_180005050(v17, v18, (__int64)v42);
              v19 = *(_QWORD *)a1;
              if ( *(_QWORD *)a1 )
              {
                v20 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 4 <= v20 )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  v21 = *(_DWORD *)(a1 + 8);
                  if ( v21 + 4 <= v20 )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    v22 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v19);
                    if ( *(_DWORD *)(a1 + 16) )
                      v22 = _byteswap_ulong(v22);
                    v23 = a2 - (_QWORD)v43;
                    v24 = v43;
                    do
                    {
                      v25 = *v24;
                      v24[v23 + 780] = *v24;
                      ++v24;
                    }
                    while ( v25 );
                    if ( HIDWORD(qword_1800306F0) )
                    {
                      if ( v22 )
                        v22 += v21;
                    }
                    v26 = *(_DWORD *)(a1 + 8);
                    sub_180009870(a1, a2, v23, v22);
                    *(_DWORD *)(a1 + 8) = v26;
                    return 1LL;
                  }
                }
              }
            }
          }
        }
      }
      return 0LL;
    case 2:
      v27 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 || a4 + 4 > v9 )
        return 0LL;
      v28 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = a4 + 4;
      v29 = *(_DWORD *)(a4 + v27);
      if ( v28 )
        v29 = _byteswap_ulong(v29);
      if ( a4 + 8 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v30 = *(_DWORD *)(a1 + 8);
      v31 = *(_DWORD *)((unsigned int)(v30 - 4) + v27);
      if ( v28 )
        v31 = _byteswap_ulong(v31);
      if ( v30 + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v29, (__int64)v42);
      sub_180005050(v32, v31, (__int64)v42);
      sub_180005050(v33, v34, (__int64)v42);
      if ( !*(_QWORD *)v35 )
        return 0LL;
      v36 = *(_DWORD *)(v35 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v36 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v36 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v36 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v36 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v36 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      break;
    case 1:
    case 4:
      v37 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 || a4 + 4 > v9 )
        return 0LL;
      v38 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = a4 + 4;
      v39 = *(_DWORD *)(a4 + v37);
      if ( v38 )
        v39 = _byteswap_ulong(v39);
      if ( a4 + 8 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v39, (__int64)v42);
      sub_180005050(v40, v41, (__int64)v42);
      break;
  }
  return 1LL;
}
// 180009602: variable 'v16' is possibly undefined
// 18000960F: variable 'v17' is possibly undefined
// 18000960F: variable 'v18' is possibly undefined
// 180009767: variable 'v32' is possibly undefined
// 180009774: variable 'v33' is possibly undefined
// 180009774: variable 'v34' is possibly undefined
// 180009779: variable 'v35' is possibly undefined
// 180009854: variable 'v40' is possibly undefined
// 180009854: variable 'v41' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (0000000180009870) ----------------------------------------------------
__int64 __fastcall sub_180009870(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v7; // r8
  unsigned int v8; // edi
  int v9; // r10d
  unsigned __int32 v10; // edx
  __int64 *v11; // rcx
  int v12; // r9d
  __int64 v13; // rbp
  char *v14; // rcx
  char v15; // al
  char v17[272]; // [rsp+20h] [rbp-238h] BYREF
  char v18[272]; // [rsp+130h] [rbp-128h] BYREF

  if ( a4 < 0x64 || a4 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  memset(v17, 0, 0x104uLL);
  v7 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    v8 = a4 + 4;
    if ( v8 <= *(_DWORD *)(a1 + 12) )
    {
      v9 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v8;
      v10 = *(_DWORD *)(v8 - 4 + v7);
      if ( v9 )
        v10 = _byteswap_ulong(v10);
      if ( v8 + 4 <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v10, (__int64)v18);
        sub_180005050(v11, v12, (__int64)v17);
        v13 = a2 - (_QWORD)v17;
        v14 = v17;
        do
        {
          v15 = *v14;
          v14[v13 + 1040] = *v14;
          ++v14;
        }
        while ( v15 );
        return 1LL;
      }
    }
  }
  return 0LL;
}
// 180009937: variable 'v11' is possibly undefined
// 180009937: variable 'v12' is possibly undefined
// 180009870: using guessed type char var_128[272];

//----- (0000000180009990) ----------------------------------------------------
_BOOL8 __fastcall sub_180009990(__int64 a1, _DWORD *a2)
{
  int v4; // r8d
  unsigned int v5; // ecx
  unsigned int v6; // r8d
  unsigned int v7; // r8d
  int v8; // edx
  int v9; // edx
  int v10; // edx
  int v11; // eax
  int v12; // r8d
  int v13; // edx
  unsigned int v14; // eax
  int v15; // r8d
  int i; // edx
  unsigned int v17; // edi
  int v18; // eax
  __int64 v19; // rdx
  unsigned __int32 v20; // edx
  int v21; // r9d
  __int64 v22; // r8
  int v23; // ecx
  unsigned int v24; // eax
  unsigned int v25; // edx
  int v26; // ecx
  int v27; // r9d
  int v28; // r10d
  unsigned __int32 v29; // r15d
  int v30; // r9d
  unsigned int v31; // r11d
  int v32; // ecx
  int v33; // ecx
  int v34; // r9d
  unsigned int v35; // eax
  int v36; // r9d
  unsigned int v37; // eax
  int v38; // r9d
  unsigned int v39; // edi
  int v40; // r9d
  unsigned __int32 v41; // r14d
  int v42; // r9d
  unsigned int v43; // ebp
  int v44; // r9d
  unsigned __int32 v45; // esi
  int v46; // ecx
  int v47; // ecx
  int v48; // ecx
  int v49; // ecx
  int v50; // ecx
  int v51; // ecx
  int v52; // ecx
  int v53; // r9d
  int v54; // r9d
  unsigned int v55; // r13d
  int v56; // ecx
  int v57; // ecx
  int v58; // ecx
  int v59; // ecx
  int v60; // ecx
  int v61; // ecx
  int v62; // r9d
  int v63; // r9d
  unsigned __int32 v64; // r12d
  int v65; // ecx
  int v66; // ecx
  int v67; // ecx
  unsigned int v68; // ecx
  int v69; // eax
  int v70; // r14d
  __int64 v71; // r8
  unsigned int v72; // edx
  int v73; // r9d
  int v74; // r10d
  unsigned __int32 v75; // r11d
  unsigned int v76; // r9d
  unsigned __int32 v77; // ebp
  int v78; // r9d
  unsigned __int32 v79; // esi
  unsigned int v80; // r9d
  unsigned __int32 v81; // edi
  __int64 *v82; // rcx
  __int64 *v83; // rcx
  __int64 *v84; // rcx
  __int64 *v85; // rcx
  int v86; // r9d
  __int64 v87; // rdx
  __int64 v88; // r8
  __int64 v90; // [rsp+0h] [rbp-5D8h] BYREF
  unsigned __int32 v91; // [rsp+30h] [rbp-5A8h]
  unsigned int v92; // [rsp+34h] [rbp-5A4h]
  unsigned __int32 v93; // [rsp+38h] [rbp-5A0h]
  unsigned int v94; // [rsp+3Ch] [rbp-59Ch]
  int v95; // [rsp+40h] [rbp-598h]
  unsigned int v96; // [rsp+44h] [rbp-594h]
  CHAR MultiByteStr[272]; // [rsp+50h] [rbp-588h] BYREF
  char v98[272]; // [rsp+160h] [rbp-478h] BYREF
  char v99[272]; // [rsp+270h] [rbp-368h] BYREF
  char v100[272]; // [rsp+380h] [rbp-258h] BYREF
  char v101[272]; // [rsp+490h] [rbp-148h] BYREF

  if ( !*(_QWORD *)a1 )
    return 0LL;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = v4 + 4;
  if ( v6 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v6;
  if ( v6 + 4 > v5 )
    return 0LL;
  v7 = v6 + 4;
  *(_DWORD *)(a1 + 8) = v7;
  if ( v7 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v8 = *(_DWORD *)(a1 + 8);
  if ( v8 + 4 > v5 )
    return 0LL;
  v9 = v8 + 4;
  *(_DWORD *)(a1 + 8) = v9;
  if ( v9 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  if ( v10 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 4;
  v11 = a2[2];
  if ( !v11 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = a2[4];
  if ( v11 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11 + 4;
  if ( v11 + 8 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11 + 8;
  if ( v11 + 12 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11 + 12;
  if ( v11 + 16 > v5 )
    return 0LL;
  v13 = v11 + 16;
  *(_DWORD *)(a1 + 8) = v11 + 16;
  if ( v11 + 20 > v5 )
    return 0LL;
  v14 = v11 + 20;
  v15 = v12 - 5;
  *(_DWORD *)(a1 + 8) = v13 + 4;
  for ( i = 0; i < v15; *(_DWORD *)(a1 + 8) = v14 )
  {
    v14 += 4;
    if ( v14 > v5 )
      return 0LL;
    ++i;
  }
  v17 = a2[7];
  if ( v14 < v17 )
  {
    while ( &v90 != (__int64 *)-80LL && (unsigned int)sub_180004F90((__int64 *)a1, (__int64)MultiByteStr) )
    {
      if ( *(_DWORD *)(a1 + 8) >= v17 )
        goto LABEL_21;
    }
    return 0LL;
  }
LABEL_21:
  v18 = a2[7];
  if ( v18 )
    *(_DWORD *)(a1 + 8) = v18;
  v19 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v20 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v19);
  if ( *(_DWORD *)(a1 + 16) )
    v20 = _byteswap_ulong(v20);
  sub_180005050((__int64 *)a1, v20, (__int64)MultiByteStr);
  v22 = *(_QWORD *)a1;
  v23 = v21;
  do
  {
    if ( !v22 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    ++v23;
    v24 = *(_DWORD *)(a1 + 8);
  }
  while ( v23 < 6 );
  v25 = *(_DWORD *)(a1 + 12);
  v26 = v21;
  do
  {
    v24 += 4;
    if ( v24 > v25 )
      return 0LL;
    ++v26;
    *(_DWORD *)(a1 + 8) = v24;
  }
  while ( v26 < 12 );
  if ( v24 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v27 = *(_DWORD *)(a1 + 8);
  v28 = *(_DWORD *)(a1 + 16);
  v29 = *(_DWORD *)((unsigned int)(v27 - 4) + v22);
  if ( v28 )
    v29 = _byteswap_ulong(v29);
  if ( v27 + 4 > v25 )
    return 0LL;
  v30 = v27 + 4;
  *(_DWORD *)(a1 + 8) = v30;
  v31 = *(_DWORD *)((unsigned int)(v30 - 4) + v22);
  if ( v28 )
    v31 = _byteswap_ulong(v31);
  if ( v30 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v32 = *(_DWORD *)(a1 + 8);
  if ( v32 + 4 > v25 )
    return 0LL;
  v33 = v32 + 4;
  *(_DWORD *)(a1 + 8) = v33;
  if ( v33 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v34 = *(_DWORD *)(a1 + 8);
  v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v22);
  v96 = v35;
  if ( v28 )
    v96 = _byteswap_ulong(v35);
  if ( v34 + 4 > v25 )
    return 0LL;
  v36 = v34 + 4;
  *(_DWORD *)(a1 + 8) = v36;
  v37 = *(_DWORD *)((unsigned int)(v36 - 4) + v22);
  v95 = v37;
  if ( v28 )
    v95 = _byteswap_ulong(v37);
  if ( v36 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v38 = *(_DWORD *)(a1 + 8);
  v39 = *(_DWORD *)((unsigned int)(v38 - 4) + v22);
  v92 = v39;
  if ( v28 )
  {
    v39 = _byteswap_ulong(v39);
    v92 = v39;
  }
  if ( v38 + 4 > v25 )
    return 0LL;
  v40 = v38 + 4;
  *(_DWORD *)(a1 + 8) = v40;
  v41 = *(_DWORD *)((unsigned int)(v40 - 4) + v22);
  v91 = v41;
  if ( v28 )
  {
    v41 = _byteswap_ulong(v41);
    v91 = v41;
  }
  if ( v40 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v42 = *(_DWORD *)(a1 + 8);
  v43 = *(_DWORD *)((unsigned int)(v42 - 4) + v22);
  v94 = v43;
  if ( v28 )
  {
    v43 = _byteswap_ulong(v43);
    v94 = v43;
  }
  if ( v42 + 4 > v25 )
    return 0LL;
  v44 = v42 + 4;
  *(_DWORD *)(a1 + 8) = v44;
  v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v22);
  v93 = v45;
  if ( v28 )
  {
    v45 = _byteswap_ulong(v45);
    v93 = v45;
  }
  if ( v44 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v46 = *(_DWORD *)(a1 + 8);
  if ( v46 + 4 > v25 )
    return 0LL;
  v47 = v46 + 4;
  *(_DWORD *)(a1 + 8) = v47;
  if ( v47 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v48 = *(_DWORD *)(a1 + 8);
  if ( v48 + 4 > v25 )
    return 0LL;
  v49 = v48 + 4;
  *(_DWORD *)(a1 + 8) = v49;
  if ( v49 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v50 = *(_DWORD *)(a1 + 8);
  if ( v50 + 4 > v25 )
    return 0LL;
  v51 = v50 + 4;
  *(_DWORD *)(a1 + 8) = v51;
  if ( (int)qword_1800306F0 > 764 )
  {
    if ( v51 + 4 > v25 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v52 = *(_DWORD *)(a1 + 8);
    if ( v52 + 4 > v25 )
      return 0LL;
    v51 = v52 + 4;
    *(_DWORD *)(a1 + 8) = v51;
  }
  if ( v51 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v53 = *(_DWORD *)(a1 + 8);
  if ( v53 + 4 > v25 )
    return 0LL;
  v54 = v53 + 4;
  *(_DWORD *)(a1 + 8) = v54;
  v55 = *(_DWORD *)((unsigned int)(v54 - 4) + v22);
  if ( v28 )
    v55 = _byteswap_ulong(v55);
  if ( v54 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v56 = *(_DWORD *)(a1 + 8);
  if ( v56 + 4 > v25 )
    return 0LL;
  v57 = v56 + 4;
  *(_DWORD *)(a1 + 8) = v57;
  if ( v57 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v58 = *(_DWORD *)(a1 + 8);
  if ( v58 + 4 > v25 )
    return 0LL;
  v59 = v58 + 4;
  *(_DWORD *)(a1 + 8) = v59;
  if ( v59 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v60 = *(_DWORD *)(a1 + 8);
  if ( v60 + 4 > v25 )
    return 0LL;
  v61 = v60 + 4;
  *(_DWORD *)(a1 + 8) = v61;
  if ( v61 + 4 > v25 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v62 = *(_DWORD *)(a1 + 8);
  if ( v62 + 4 > v25 )
    return 0LL;
  v63 = v62 + 4;
  *(_DWORD *)(a1 + 8) = v63;
  v64 = *(_DWORD *)((unsigned int)(v63 - 4) + v22);
  if ( v28 )
    v64 = _byteswap_ulong(v64);
  if ( v63 + 4 <= v25 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    v65 = *(_DWORD *)(a1 + 8);
    if ( v65 + 4 <= v25 )
    {
      v66 = v65 + 4;
      *(_DWORD *)(a1 + 8) = v66;
      if ( v66 + 4 <= v25 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v67 = *(_DWORD *)(a1 + 8);
        if ( v67 + 4 <= v25 )
        {
          v68 = v67 + 4;
          *(_DWORD *)(a1 + 8) = v68;
          v69 = 0;
          while ( 1 )
          {
            v68 += 4;
            if ( v68 > v25 )
              break;
            ++v69;
            *(_DWORD *)(a1 + 8) = v68;
            if ( v69 >= 7 )
            {
              if ( v31 )
              {
                *(_DWORD *)(a1 + 8) = v31;
                if ( v29 && !(unsigned int)sub_180001FD0((__int64)&qword_1800306F0, v29) )
                  return 0LL;
                v70 = 0;
                if ( v29 )
                {
                  while ( 1 )
                  {
                    memset(MultiByteStr, 0, 0x104uLL);
                    v71 = *(_QWORD *)a1;
                    if ( !*(_QWORD *)a1 )
                      return 0LL;
                    v72 = *(_DWORD *)(a1 + 12);
                    if ( *(_DWORD *)(a1 + 8) + 4 > v72 )
                      return 0LL;
                    *(_DWORD *)(a1 + 8) += 4;
                    v73 = *(_DWORD *)(a1 + 8);
                    v74 = *(_DWORD *)(a1 + 16);
                    v75 = *(_DWORD *)((unsigned int)(v73 - 4) + v71);
                    if ( v74 )
                      v75 = _byteswap_ulong(v75);
                    v76 = v73 + 4;
                    if ( v76 > v72 )
                      return 0LL;
                    *(_DWORD *)(a1 + 8) = v76;
                    v77 = *(_DWORD *)(v76 - 4 + v71);
                    if ( v74 )
                      v77 = _byteswap_ulong(v77);
                    if ( v76 + 4 > v72 )
                      return 0LL;
                    *(_DWORD *)(a1 + 8) += 4;
                    v78 = *(_DWORD *)(a1 + 8);
                    v79 = *(_DWORD *)((unsigned int)(v78 - 4) + v71);
                    if ( v74 )
                      v79 = _byteswap_ulong(v79);
                    v80 = v78 + 4;
                    if ( v80 > v72 )
                      return 0LL;
                    *(_DWORD *)(a1 + 8) = v80;
                    v81 = *(_DWORD *)(v80 - 4 + v71);
                    if ( v74 )
                      v81 = _byteswap_ulong(v81);
                    if ( v80 + 4 > v72 )
                      return 0LL;
                    *(_DWORD *)(a1 + 8) += 4;
                    sub_180005050((__int64 *)a1, v75, (__int64)MultiByteStr);
                    sub_180005050(v82, v77, (__int64)v98);
                    sub_180005050(v83, v79, (__int64)v99);
                    sub_180005050(v84, v81, (__int64)v100);
                    sub_180005050(v85, v86, (__int64)v101);
                    if ( qword_180030700 )
                      MultiByteToWideChar(0, 1u, MultiByteStr, -1, (LPWSTR)qword_180030700 + 260 * v70, 255);
                    if ( ++v70 >= v29 )
                    {
                      v39 = v92;
                      v45 = v93;
                      v43 = v94;
                      break;
                    }
                  }
                }
                v41 = v91;
              }
              if ( (unsigned int)sub_18000A190(a1, v96, v95)
                && (unsigned int)sub_18000A7F0(a1, v39, v41)
                && (unsigned int)sub_18000B870(a1, v43, v45)
                && (unsigned int)sub_18000B660(a1, v87, v55) )
              {
                return (unsigned int)sub_18000B0F0(a1, v39, v88, v64) != 0;
              }
              return 0LL;
            }
          }
        }
      }
    }
  }
  return 0LL;
}
// 180009B83: conditional instruction was optimized away because r8.8!=0
// 180009BA1: conditional instruction was optimized away because r8.8!=0
// 180009B45: variable 'v21' is possibly undefined
// 18000A03A: variable 'v82' is possibly undefined
// 18000A049: variable 'v83' is possibly undefined
// 18000A058: variable 'v84' is possibly undefined
// 18000A068: variable 'v85' is possibly undefined
// 18000A068: variable 'v86' is possibly undefined
// 18000A10A: variable 'v87' is possibly undefined
// 18000A11B: variable 'v88' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180009990: using guessed type char var_478[272];
// 180009990: using guessed type char var_368[272];
// 180009990: using guessed type char var_258[272];
// 180009990: using guessed type char var_148[272];

//----- (000000018000A190) ----------------------------------------------------
__int64 __fastcall sub_18000A190(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v7; // ebp
  __int64 v8; // rdx
  unsigned int v9; // r8d
  int v10; // r9d
  int v11; // r11d
  unsigned __int32 v12; // r10d
  int v13; // r9d
  unsigned __int32 v14; // esi
  int v15; // r9d
  unsigned __int32 v16; // edi
  __int64 *v17; // rcx
  __int64 *v18; // rcx
  __int64 *v19; // rcx
  int v20; // r9d
  char *v21; // rdx
  char *v22; // r8
  char v23; // al
  unsigned int v24; // r12d
  __int64 v25; // rdx
  char *v26; // r13
  unsigned int v27; // r8d
  int v28; // r11d
  int v29; // r9d
  unsigned __int32 v30; // r10d
  int v31; // r11d
  unsigned __int32 v32; // r15d
  int v33; // r11d
  unsigned __int32 v34; // r14d
  int v35; // r11d
  unsigned __int32 v36; // ebp
  int v37; // r11d
  unsigned int v38; // esi
  int v39; // r11d
  unsigned __int32 v40; // edi
  __int64 *v41; // rcx
  __int64 *v42; // rcx
  __int64 *v43; // rcx
  int v44; // ebp
  __int64 v45; // rcx
  int v46; // r15d
  __int64 v47; // rcx
  char v49[272]; // [rsp+30h] [rbp-488h] BYREF
  char v50[272]; // [rsp+140h] [rbp-378h] BYREF
  char v51[272]; // [rsp+250h] [rbp-268h] BYREF
  char v52[272]; // [rsp+360h] [rbp-158h] BYREF

  if ( !a3 || !a2 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  result = sub_1800020D0((__int64)&qword_1800306F0, a2);
  if ( (_DWORD)result )
  {
    v7 = 0;
    while ( 1 )
    {
      memset(v49, 0, 0x104uLL);
      v8 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        break;
      v9 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v10 = *(_DWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 16);
      v12 = *(_DWORD *)((unsigned int)(v10 - 4) + v8);
      if ( v11 )
        v12 = _byteswap_ulong(v12);
      if ( v10 + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v13 = *(_DWORD *)(a1 + 8);
      v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v8);
      if ( v11 )
        v14 = _byteswap_ulong(v14);
      if ( v13 + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v15 = *(_DWORD *)(a1 + 8);
      v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v8);
      if ( v11 )
        v16 = _byteswap_ulong(v16);
      if ( v15 + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v12, (__int64)v49);
      sub_180005050(v17, v14, (__int64)v50);
      sub_180005050(v18, v16, (__int64)v51);
      sub_180005050(v19, v20, (__int64)v52);
      if ( qword_180030710 )
      {
        v21 = v49;
        v22 = (char *)qword_180030710 + 312 * v7 + 52;
        do
        {
          v23 = *v21++;
          *v22++ = v23;
        }
        while ( v23 );
      }
      if ( ++v7 >= a2 )
      {
        *(_DWORD *)(a1 + 8) = a3;
        v24 = 0;
        while ( 1 )
        {
          v25 = *(_QWORD *)a1;
          v26 = (char *)qword_180030710 + 312 * (int)v24;
          if ( !*(_QWORD *)a1 )
            break;
          v27 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v28 = *(_DWORD *)(a1 + 8);
          v29 = *(_DWORD *)(a1 + 16);
          v30 = *(_DWORD *)((unsigned int)(v28 - 4) + v25);
          if ( v29 )
            v30 = _byteswap_ulong(v30);
          if ( v28 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v31 = *(_DWORD *)(a1 + 8);
          v32 = *(_DWORD *)((unsigned int)(v31 - 4) + v25);
          if ( v29 )
            v32 = _byteswap_ulong(v32);
          if ( v31 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v33 = *(_DWORD *)(a1 + 8);
          v34 = *(_DWORD *)((unsigned int)(v33 - 4) + v25);
          if ( v29 )
            v34 = _byteswap_ulong(v34);
          if ( v33 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v35 = *(_DWORD *)(a1 + 8);
          v36 = *(_DWORD *)((unsigned int)(v35 - 4) + v25);
          if ( v29 )
            v36 = _byteswap_ulong(v36);
          if ( v35 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v37 = *(_DWORD *)(a1 + 8);
          v38 = *(_DWORD *)((unsigned int)(v37 - 4) + v25);
          if ( v29 )
            v38 = _byteswap_ulong(v38);
          if ( v37 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v39 = *(_DWORD *)(a1 + 8);
          v40 = *(_DWORD *)((unsigned int)(v39 - 4) + v25);
          if ( v29 )
            v40 = _byteswap_ulong(v40);
          if ( v39 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v30, (__int64)v52);
          sub_180005050(v41, v32, (__int64)v51);
          sub_180005050(v42, v34, (__int64)v50);
          sub_180005050(v43, v36, (__int64)v49);
          v44 = *(_DWORD *)(a1 + 8);
          if ( !(unsigned int)sub_18000A5E0(v45, (__int64)v26, v38, v40) )
            break;
          ++v24;
          *(_DWORD *)(a1 + 8) = v44;
          if ( v24 >= a2 )
          {
            v46 = 0;
            v47 = *(_QWORD *)a1;
            while ( v47 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( ++v46 >= 77 )
                return 1LL;
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
    return 0LL;
  }
  return result;
}
// 18000A219: conditional instruction was optimized away because r13d.4!=0
// 18000A3C7: conditional instruction was optimized away because r13d.4!=0
// 18000A34F: variable 'v17' is possibly undefined
// 18000A35E: variable 'v18' is possibly undefined
// 18000A36E: variable 'v19' is possibly undefined
// 18000A36E: variable 'v20' is possibly undefined
// 18000A524: variable 'v41' is possibly undefined
// 18000A534: variable 'v42' is possibly undefined
// 18000A540: variable 'v43' is possibly undefined
// 18000A551: variable 'v45' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018000A5E0) ----------------------------------------------------
__int64 __fastcall sub_18000A5E0(__int64 a1, __int64 a2, unsigned int a3, int a4)
{
  unsigned int v8; // ebp
  __int64 v9; // r8
  unsigned int v10; // edx
  int v11; // r9d
  int v12; // esi
  unsigned __int32 v13; // r10d
  unsigned int v14; // edi
  __int64 *v15; // rcx
  int v16; // r9d
  int v17; // esi
  __int64 v18; // rdx
  unsigned int v19; // r8d
  int v20; // r9d
  unsigned int v21; // eax
  unsigned int v22; // eax
  unsigned int v23; // eax
  char String1[272]; // [rsp+20h] [rbp-258h] BYREF
  char v25[272]; // [rsp+130h] [rbp-148h] BYREF

  if ( !a2 )
    return 0LL;
  if ( !a4 || !a3 )
    return 1LL;
  v8 = 0;
  *(_DWORD *)(a1 + 8) = a4;
  while ( 1 )
  {
    memset(String1, 0, 0x104uLL);
    v9 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v10 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 16);
    v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
    if ( v12 )
      v13 = _byteswap_ulong(v13);
    if ( v11 + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v9);
    if ( v12 )
      v14 = _byteswap_ulong(v14);
    sub_180005050((__int64 *)a1, v13, (__int64)String1);
    sub_180005050(v15, v16, (__int64)v25);
    v17 = *(_DWORD *)(a1 + 8);
    if ( !stricmp(String1, "DiffuseMap") && v14 )
    {
      v18 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = v14;
      if ( !v18 )
        return 0LL;
      v19 = *(_DWORD *)(a1 + 12);
      if ( v14 + 4 > v19 )
        return 0LL;
      v20 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v14 + 4;
      v21 = *(_DWORD *)(v14 + v18);
      if ( v20 )
        v21 = _byteswap_ulong(v21);
      if ( v21 )
      {
        *(_DWORD *)(a1 + 8) = v21;
        v22 = v21 + 4;
        if ( v22 > v19 )
          return 0LL;
        *(_DWORD *)(a1 + 8) = v22;
        v23 = *(_DWORD *)(v22 - 4 + v18);
        if ( v20 )
          v23 = _byteswap_ulong(v23);
        *(_DWORD *)(a2 + 40) = v23;
      }
    }
    ++v8;
    *(_DWORD *)(a1 + 8) = v17;
    if ( v8 >= a3 )
      return 1LL;
  }
  return 0LL;
}
// 18000A72D: variable 'v15' is possibly undefined
// 18000A72D: variable 'v16' is possibly undefined
// 18000A5E0: using guessed type char var_148[272];

//----- (000000018000A7F0) ----------------------------------------------------
__int64 __fastcall sub_18000A7F0(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v6; // ebp
  unsigned int v7; // edi
  int v8; // esi
  __int64 v9; // r9
  unsigned int v10; // r8d
  int v11; // r10d
  unsigned __int32 v12; // edx
  __int64 *v13; // rcx
  int v14; // r9d
  __int64 v15; // r8
  char *v16; // rcx
  _BYTE *v17; // rdx
  char v18; // al
  char *v19; // rcx
  _BYTE *v20; // rdx
  char v21; // al
  __int64 v22; // r8
  unsigned int *v23; // rdx
  unsigned int v24; // ecx
  unsigned __int32 v25; // r9d
  char v26[272]; // [rsp+20h] [rbp-248h] BYREF
  char v27[272]; // [rsp+130h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !a2 || (result = sub_180001B50((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = 0;
    v8 = 0;
    if ( a2 )
    {
      do
      {
        memset(v26, 0, 0x104uLL);
        memset(v27, 0, 0x104uLL);
        v9 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v10 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)(a1 + 8);
        v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
        if ( *(_DWORD *)(a1 + 16) )
          v12 = _byteswap_ulong(v12);
        if ( v11 + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v12, (__int64)v26);
        sub_180005050(v13, v14, (__int64)v27);
        if ( qword_180030720 )
        {
          v15 = 760LL * v8;
          v16 = v26;
          v17 = (_BYTE *)(v15 + qword_180030720 + 232);
          do
          {
            v18 = *v16++;
            *v17++ = v18;
          }
          while ( v18 );
          v19 = v27;
          v20 = (_BYTE *)(v15 + qword_180030720 + 492);
          do
          {
            v21 = *v19++;
            *v20++ = v21;
          }
          while ( v21 );
        }
      }
      while ( ++v8 < a2 );
    }
    *(_DWORD *)(a1 + 8) = v6;
    if ( a2 )
    {
      while ( 1 )
      {
        v22 = *(_QWORD *)a1;
        v23 = (unsigned int *)(qword_180030720 + 760LL * (int)v7);
        if ( !*(_QWORD *)a1 )
          break;
        v24 = *(_DWORD *)(a1 + 12);
        if ( v6 + 4 > v24 )
          break;
        *(_DWORD *)(a1 + 8) = v6 + 4;
        if ( v6 + 8 > v24 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        v6 = *(_DWORD *)(a1 + 8);
        v25 = *(_DWORD *)((unsigned int)(v6 - 4) + v22);
        if ( *(_DWORD *)(a1 + 16) )
          v25 = _byteswap_ulong(v25);
        if ( !(unsigned int)sub_18000AA90(a1, v23, v22, v25) )
          break;
        ++v7;
        *(_DWORD *)(a1 + 8) = v6;
        if ( v7 >= a2 )
          return 1LL;
      }
      return 0LL;
    }
    return 1LL;
  }
  return result;
}
// 18000A932: variable 'v13' is possibly undefined
// 18000A932: variable 'v14' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030720: using guessed type __int64 qword_180030720;

//----- (000000018000AA90) ----------------------------------------------------
__int64 __fastcall sub_18000AA90(__int64 a1, unsigned int *a2, __int64 a3, int a4)
{
  __int64 v7; // r8
  unsigned int v8; // edx
  int v9; // r9d
  int v10; // edi
  unsigned int v11; // edi
  int v12; // r10d
  unsigned int v13; // r11d
  int v14; // r15d
  __int64 v15; // rdx
  unsigned int v16; // r8d
  unsigned int v17; // r10d
  int v18; // r9d
  int v19; // r10d
  unsigned int v20; // edi
  int v21; // r10d
  unsigned int v22; // r11d
  int v23; // r10d
  unsigned int v24; // ebp
  int v25; // r10d
  unsigned int v26; // esi
  int v27; // r10d
  unsigned int v28; // r12d
  int v29; // r10d
  unsigned int v30; // r15d
  int v31; // r10d
  unsigned int v32; // r13d
  unsigned int v33; // r10d
  unsigned int v34; // edx
  unsigned int *v35; // r9
  __int64 v36; // r8
  unsigned int v37; // eax
  unsigned int v38; // edx
  unsigned int *v39; // r9
  __int64 v40; // r8
  unsigned int v41; // eax
  unsigned int v42; // edx
  unsigned int *v43; // r9
  __int64 v44; // r8
  unsigned int v45; // eax
  int v46; // ecx
  __int64 v47; // rdx
  __int64 v48; // rdx
  unsigned int v49; // r8d
  int v50; // r9d
  int v51; // ebp
  unsigned __int32 v52; // r10d
  int v53; // r9d
  unsigned int v54; // esi
  int v55; // eax
  int v56; // r9d
  unsigned int v57; // edi
  unsigned int v58; // r9d
  unsigned __int32 v59; // [rsp+20h] [rbp-188h]
  unsigned int v60; // [rsp+24h] [rbp-184h]
  unsigned __int32 v61; // [rsp+28h] [rbp-180h]
  unsigned int v62; // [rsp+30h] [rbp-178h] BYREF
  __int64 v63; // [rsp+34h] [rbp-174h]
  unsigned int v64; // [rsp+40h] [rbp-168h] BYREF
  __int64 v65; // [rsp+44h] [rbp-164h]
  char v66[272]; // [rsp+50h] [rbp-158h] BYREF

  if ( !a2 )
    return 0LL;
  if ( !a4 )
    return 1LL;
  v7 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a4;
  v63 = 0LL;
  v62 = 0;
  v65 = 0LL;
  v64 = 0;
  if ( !v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 12);
  if ( a4 + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = a4 + 4;
  if ( a4 + 8 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v9 = *(_DWORD *)(a1 + 16);
  if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v61 = *(_DWORD *)((unsigned int)(v10 - 4) + v7);
  if ( v9 )
    v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v10 - 4) + v7));
  if ( v10 + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v11 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v7);
  v60 = v11;
  if ( v9 )
  {
    v11 = _byteswap_ulong(v11);
    v60 = v11;
  }
  if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v62) || !(unsigned int)sub_18001D5C0((__int64 *)a1, &v64) )
    return 0LL;
  v14 = 0;
  a2[9] = v13;
  if ( v12 )
  {
    v15 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = v12;
    if ( !v15 )
      return 0LL;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = v12 + 4;
    if ( v17 > v16 )
      return 0LL;
    v18 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v17;
    v59 = *(_DWORD *)(v17 - 4 + v15);
    if ( v18 )
      v59 = _byteswap_ulong(*(_DWORD *)(v17 - 4 + v15));
    if ( v17 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v15);
    if ( v18 )
      v20 = _byteswap_ulong(v20);
    if ( v19 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v15);
    if ( v18 )
      v22 = _byteswap_ulong(v22);
    if ( v21 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v23 = *(_DWORD *)(a1 + 8);
    v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v15);
    if ( v18 )
      v24 = _byteswap_ulong(v24);
    if ( v23 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v25 = *(_DWORD *)(a1 + 8);
    v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v15);
    if ( v18 )
      v26 = _byteswap_ulong(v26);
    if ( v25 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v27 = *(_DWORD *)(a1 + 8);
    v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v15);
    if ( v18 )
      v28 = _byteswap_ulong(v28);
    if ( v27 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v29 = *(_DWORD *)(a1 + 8);
    v30 = *(_DWORD *)((unsigned int)(v29 - 4) + v15);
    if ( v18 )
      v30 = _byteswap_ulong(v30);
    if ( v29 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v31 = *(_DWORD *)(a1 + 8);
    v32 = *(_DWORD *)((unsigned int)(v31 - 4) + v15);
    if ( v18 )
      v32 = _byteswap_ulong(v32);
    if ( v31 + 4 > v16 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v33 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v15);
    if ( v18 )
      v33 = _byteswap_ulong(v33);
    a2[15] = v20;
    if ( v22 )
    {
      v34 = 0;
      *(_DWORD *)(a1 + 8) = v22;
      if ( v20 )
      {
        v35 = a2 + 17;
        do
        {
          v36 = *(_QWORD *)a1;
          if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v37 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v36);
          if ( *(_DWORD *)(a1 + 16) )
            v37 = _byteswap_ulong(v37);
          if ( (int)v34 < (int)a2[14] )
            *v35 = v37;
          ++v34;
          v35 += 4;
        }
        while ( v34 < v20 );
      }
    }
    if ( v26 )
    {
      v38 = 0;
      *(_DWORD *)(a1 + 8) = v26;
      if ( v24 )
      {
        v39 = a2 + 18;
        do
        {
          v40 = *(_QWORD *)a1;
          if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v41 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v40);
          if ( *(_DWORD *)(a1 + 16) )
            v41 = _byteswap_ulong(v41);
          if ( (int)v38 < (int)a2[14] )
            *v39 = v41;
          ++v38;
          v39 += 4;
        }
        while ( v38 < v24 );
      }
    }
    if ( v30 )
    {
      *(_DWORD *)(a1 + 8) = v30;
      v14 = 0;
      v42 = 0;
      if ( v28 )
      {
        v43 = a2 + 19;
        do
        {
          v44 = *(_QWORD *)a1;
          if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v45 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v44);
          if ( *(_DWORD *)(a1 + 16) )
            v45 = _byteswap_ulong(v45);
          if ( (int)v42 < (int)a2[14] )
            *v43 = v45;
          ++v42;
          v43 += 4;
        }
        while ( v42 < v28 );
      }
    }
    else
    {
      v14 = 0;
    }
    if ( v33 )
    {
      *(_DWORD *)(a1 + 8) = v33;
      v46 = 0;
      if ( v32 )
      {
        v47 = *(_QWORD *)a1;
        while ( v47 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( ++v46 >= v32 )
            goto LABEL_84;
        }
        return 0LL;
      }
    }
LABEL_84:
    v11 = v60;
    a2[8] = v59;
  }
  a2[57] = v61;
  if ( v11 )
  {
    *(_DWORD *)(a1 + 8) = v11;
    if ( a2[57] )
    {
      while ( 1 )
      {
        v48 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          break;
        v49 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        v50 = *(_DWORD *)(a1 + 8);
        v51 = *(_DWORD *)(a1 + 16);
        v52 = *(_DWORD *)((unsigned int)(v50 - 4) + v48);
        if ( v51 )
          v52 = _byteswap_ulong(v52);
        if ( v50 + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        v53 = *(_DWORD *)(a1 + 8);
        v54 = *(_DWORD *)((unsigned int)(v53 - 4) + v48);
        if ( v51 )
          v54 = _byteswap_ulong(v54);
        if ( v53 + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        v55 = *(_DWORD *)(a1 + 8);
        if ( (int)qword_1800306F0 > 764 )
        {
          if ( v55 + 4 > v49 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v55 = *(_DWORD *)(a1 + 8);
        }
        if ( v55 + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        v56 = *(_DWORD *)(a1 + 8);
        v57 = *(_DWORD *)((unsigned int)(v56 - 4) + v48);
        if ( v51 )
          v57 = _byteswap_ulong(v57);
        if ( v56 + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v49 )
          break;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v52, (__int64)v66);
        if ( !v14 )
        {
          a2[10] = v54;
          a2[11] = v57;
          a2[13] = v58;
        }
        if ( ++v14 >= a2[57] )
          return 1LL;
      }
      return 0LL;
    }
  }
  return 1LL;
}
// 18000ABF7: variable 'v13' is possibly undefined
// 18000ABFE: variable 'v12' is possibly undefined
// 18000B079: variable 'v58' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 18000AA90: using guessed type char var_158[272];

//----- (000000018000B0F0) ----------------------------------------------------
__int64 __fastcall sub_18000B0F0(__int64 a1, unsigned int a2, __int64 a3, int a4)
{
  __int64 v7; // rdx
  unsigned int v8; // ecx
  unsigned __int32 v9; // edx
  unsigned int v10; // edi
  unsigned int v11; // r10d
  __int64 v12; // r11
  __int64 v13; // rdx
  __int64 v14; // r8
  unsigned int v15; // ecx
  unsigned int v16; // eax
  int v17; // ecx
  __int64 v18; // r9
  unsigned int v19; // edx
  unsigned int v20; // ecx
  int v21; // edx
  __int64 v22; // r8
  unsigned int v23; // ecx
  char v24[272]; // [rsp+20h] [rbp-128h] BYREF

  if ( a2 && !qword_180030720 )
    return 0LL;
  if ( !a4 )
    return 1LL;
  v7 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a4;
  if ( !v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 12);
  if ( a4 + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = a4 + 4;
  if ( a4 + 8 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v9 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v7);
  if ( *(_DWORD *)(a1 + 16) )
    v9 = _byteswap_ulong(v9);
  sub_180005050((__int64 *)a1, v9, (__int64)v24);
  v10 = 0;
  v11 = 0;
  if ( a2 )
  {
    v12 = 0LL;
    do
    {
      v13 = *(_QWORD *)a1;
      v14 = qword_180030720;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v15 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v16 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v13);
      if ( *(_DWORD *)(a1 + 16) )
        v16 = _byteswap_ulong(v16);
      v17 = 0;
      *(_DWORD *)(v14 + v12 + 48) = v16;
      if ( *(_DWORD *)(v14 + v12 + 228) )
      {
        v18 = *(_QWORD *)a1;
        while ( v18 )
        {
          v19 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v19 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( (unsigned int)++v17 >= *(_DWORD *)(v14 + v12 + 228) )
            goto LABEL_26;
        }
        return 0LL;
      }
LABEL_26:
      ++v11;
      v12 += 760LL;
    }
    while ( v11 < a2 );
  }
  if ( (_DWORD)qword_1800306F0 == 777 )
  {
    if ( *(_QWORD *)a1 )
    {
      v20 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 <= v20 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 <= v20 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v20 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            if ( *(_DWORD *)(a1 + 8) + 4 <= v20 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              goto LABEL_34;
            }
          }
        }
      }
    }
    return 0LL;
  }
  if ( (int)qword_1800306F0 < 780 )
  {
LABEL_34:
    if ( a2 )
    {
      do
        sub_18000B390(a1, qword_180030720 + 760LL * (int)v10++);
      while ( v10 < a2 );
    }
    return 1LL;
  }
  v21 = 0;
  if ( a2 )
  {
    v22 = *(_QWORD *)a1;
    while ( v22 )
    {
      v23 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v23 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v23 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v23 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v23 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v21 >= a2 )
        goto LABEL_34;
    }
    return 0LL;
  }
  return 1LL;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030720: using guessed type __int64 qword_180030720;
// 18000B0F0: using guessed type char var_128[272];

//----- (000000018000B390) ----------------------------------------------------
__int64 __fastcall sub_18000B390(__int64 a1, __int64 a2)
{
  unsigned int v5; // edi
  unsigned int v6; // ebp
  int v7; // eax
  unsigned int v8; // r12d
  unsigned int v9; // eax
  int v10; // r9d
  int v11; // eax
  unsigned int v12; // ecx
  unsigned int v13; // eax
  unsigned int v14; // edi
  __int64 v15; // r15
  __int64 v16; // rdi
  __int64 v17; // r11
  __int64 v18; // rdx
  unsigned int v19; // r10d
  int v20; // r9d
  unsigned __int16 v21; // r8
  int v22; // ebp
  int v23; // r14d
  unsigned __int16 v24; // r9
  unsigned __int16 v25; // dx
  __int64 v26; // rcx
  _OWORD v27[10]; // [rsp+40h] [rbp-E8h] BYREF
  __int64 v28; // [rsp+E0h] [rbp-48h]

  if ( !a2 )
    return 0LL;
  v5 = *(_DWORD *)(a2 + 36);
  v6 = *(_DWORD *)(a2 + 32);
  sub_1800010C0(v27);
  v27[0] = *(_OWORD *)(a2 + 56);
  v27[1] = *(_OWORD *)(a2 + 72);
  v27[2] = *(_OWORD *)(a2 + 88);
  v27[3] = *(_OWORD *)(a2 + 104);
  v27[4] = *(_OWORD *)(a2 + 120);
  v27[5] = *(_OWORD *)(a2 + 136);
  v27[6] = *(_OWORD *)(a2 + 152);
  v27[7] = *(_OWORD *)(a2 + 168);
  v27[8] = *(_OWORD *)(a2 + 184);
  v27[9] = *(_OWORD *)(a2 + 200);
  v28 = *(_QWORD *)(a2 + 216);
  v7 = *(_DWORD *)(a2 + 48);
  if ( v7 )
    *(_DWORD *)(a1 + 8) = v7;
  v8 = 0;
  if ( (int)qword_1800306F0 > 764 )
  {
    if ( !*(_QWORD *)a1 )
      goto LABEL_35;
    v9 = *(_DWORD *)(a1 + 8) + 4;
    if ( v9 > *(_DWORD *)(a1 + 12) )
      goto LABEL_35;
    *(_DWORD *)(a1 + 8) = v9;
  }
  v10 = *(_DWORD *)(a1 + 8);
  if ( !v10 || (unsigned int)sub_180005100(a1, a2, v5, v10, v6, (int *)v27) )
  {
    v11 = *(_DWORD *)(a2 + 52);
    if ( v11 )
      *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a2 + 44);
    if ( (int)qword_1800306F0 <= 764 )
    {
LABEL_17:
      v14 = v12 / 3;
      if ( (int)(v12 / 3) <= 0 || (unsigned int)sub_180001E80(a2, v14) )
      {
        v15 = v14;
        v16 = 0LL;
        if ( v15 )
        {
          v17 = 0LL;
          while ( 1 )
          {
            v18 = *(_QWORD *)a1;
            if ( !*(_QWORD *)a1 )
              break;
            v19 = *(_DWORD *)(a1 + 12);
            if ( *(_DWORD *)(a1 + 8) + 2 > v19 )
              break;
            *(_DWORD *)(a1 + 8) += 2;
            v20 = *(_DWORD *)(a1 + 8);
            v21 = *(_WORD *)((unsigned int)(v20 - 2) + v18);
            v22 = *(_DWORD *)(a1 + 16);
            if ( v22 )
              v21 = (v21 << 8) | HIBYTE(v21);
            if ( v20 + 2 > v19 )
              break;
            *(_DWORD *)(a1 + 8) += 2;
            v23 = *(_DWORD *)(a1 + 8);
            v24 = *(_WORD *)((unsigned int)(v23 - 2) + v18);
            if ( v22 )
              v24 = (v24 << 8) | HIBYTE(v24);
            if ( v23 + 2 > v19 )
              break;
            *(_DWORD *)(a1 + 8) += 2;
            v25 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2) + v18);
            if ( v22 )
              v25 = (v25 << 8) | HIBYTE(v25);
            v26 = *(_QWORD *)(a2 + 8);
            if ( v26 )
            {
              *(_DWORD *)(v17 + v26 + 4) = v21;
              *(_DWORD *)(*(_QWORD *)(a2 + 8) + v17 + 8) = v24;
              *(_DWORD *)(*(_QWORD *)(a2 + 8) + v17 + 12) = v25;
            }
            ++v16;
            v17 += 20LL;
            if ( v16 >= v15 )
              goto LABEL_34;
          }
        }
        else
        {
LABEL_34:
          v8 = 1;
        }
      }
      goto LABEL_35;
    }
    if ( *(_QWORD *)a1 )
    {
      v13 = *(_DWORD *)(a1 + 8) + 4;
      if ( v13 <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) = v13;
        goto LABEL_17;
      }
    }
  }
LABEL_35:
  `eh vector destructor iterator'((char *)v27 + 8, 0x10uLL, 0xAuLL, guard_check_icall_nop);
  return v8;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018000B660) ----------------------------------------------------
__int64 __fastcall sub_18000B660(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v6; // r10
  unsigned int v7; // r8d
  int v8; // r11d
  unsigned __int32 v9; // r9d
  int v10; // edx
  unsigned __int32 v11; // esi
  int v12; // edx
  unsigned int v13; // ebp
  int v14; // r14d
  unsigned int v15; // edi
  __int64 *v16; // rcx
  unsigned int v17; // edi
  __int64 v18; // r10
  char *v19; // rdx
  char v20; // cl
  char *v21; // rdx
  char v22; // al
  char v23[272]; // [rsp+20h] [rbp-248h] BYREF
  char v24[272]; // [rsp+130h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  memset(v23, 0, 0x104uLL);
  memset(v24, 0, 0x104uLL);
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  if ( a3 + 4 > v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = a3 + 4;
  v9 = *(_DWORD *)(a3 + v6);
  if ( v8 )
    v9 = _byteswap_ulong(v9);
  if ( a3 + 8 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v6);
  if ( v8 )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v6);
  if ( v8 )
    v13 = _byteswap_ulong(v13);
  v14 = 0;
  if ( HIDWORD(qword_1800306F0) )
    v14 = *(_DWORD *)(a1 + 8);
  if ( v12 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v15 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
  if ( v8 )
    v15 = _byteswap_ulong(v15);
  sub_180005050((__int64 *)a1, v9, (__int64)v23);
  sub_180005050(v16, v11, (__int64)v24);
  v17 = v14 + v15;
  v18 = sub_180001A00((__int64)&qword_1800306F0);
  if ( v18 )
  {
    v19 = v23;
    do
    {
      v20 = *v19;
      v19[v18 - (_QWORD)v23] = *v19;
      ++v19;
    }
    while ( v20 );
    v21 = v24;
    do
    {
      v22 = *v21;
      v21[v18 - (_QWORD)v24 + 260] = *v21;
      ++v21;
    }
    while ( v22 );
    *(_DWORD *)(v18 + 1300) = -1;
  }
  dword_180030748 = 0;
  sub_180008FC0(a1, 0, v17, v13);
  return 1LL;
}
// 18000B78F: variable 'v16' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030748: using guessed type int dword_180030748;

//----- (000000018000B870) ----------------------------------------------------
__int64 __fastcall sub_18000B870(__int64 a1, unsigned int a2, int a3)
{
  __int64 v7; // rdx
  unsigned int v8; // r8d
  int v9; // r10d
  unsigned __int32 v10; // edx
  int v11; // r9d
  int v12; // ebp
  __int64 v13; // r11
  unsigned int v14; // r8d
  int v15; // r9d
  int v16; // r10d
  signed int v17; // edx
  int v18; // r9d
  unsigned __int32 v19; // esi
  __int64 v20; // rdx
  char v21; // al
  int v22; // edi
  char Str[272]; // [rsp+20h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( a2 )
  {
    while ( 1 )
    {
      v7 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
      if ( *(_DWORD *)(a1 + 16) )
        v10 = _byteswap_ulong(v10);
      if ( v9 + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v10, (__int64)Str);
      if ( v11 + 1 >= a2 )
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v12 = 0;
    *(_DWORD *)(a1 + 8) = a3;
    if ( a2 )
    {
      while ( 1 )
      {
        memset(Str, 0, 0x104uLL);
        v13 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v14 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_DWORD *)(a1 + 16);
        v17 = *(_DWORD *)((unsigned int)(v15 - 4) + v13);
        if ( v16 )
          v17 = _byteswap_ulong(v17);
        if ( v15 + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v18 = *(_DWORD *)(a1 + 8);
        v19 = *(_DWORD *)((unsigned int)(v18 - 4) + v13);
        if ( v16 )
          v19 = _byteswap_ulong(v19);
        if ( v17 > 100 )
        {
          *(_DWORD *)(a1 + 8) = v17;
          v20 = 0LL;
          while ( *(_DWORD *)(a1 + 8) + 1 <= v14 )
          {
            v21 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v13);
            if ( v20 < 260 )
              Str[v20] = v21;
            ++v20;
            if ( !v21 )
            {
              if ( v20 >= 260 )
                Str[259] = 0;
              else
                Str[v20] = 0;
              *(_DWORD *)(a1 + 8) = v18;
              break;
            }
          }
        }
        if ( strstr(Str, "-skin") )
        {
          v22 = *(_DWORD *)(a1 + 8);
          sub_18000BA90(a1, v19);
          *(_DWORD *)(a1 + 8) = v22;
        }
        if ( ++v12 >= a2 )
          return 1LL;
      }
    }
    else
    {
      return 1LL;
    }
  }
}
// 18000B917: variable 'v11' is possibly undefined

//----- (000000018000BA90) ----------------------------------------------------
__int64 __fastcall sub_18000BA90(__int64 a1, int a2)
{
  __int64 v5; // rdx
  unsigned int v6; // r9d
  unsigned int v7; // r8d
  int v8; // r10d
  unsigned int v9; // r14d
  int v10; // r8d
  unsigned int v11; // edi
  int v12; // r8d
  unsigned int v13; // r15d
  unsigned int v14; // r13d
  __int64 v15; // rdx
  unsigned __int32 v16; // edx
  __int64 v17; // r9
  unsigned int v18; // edx
  int v19; // r10d
  int v20; // r8d
  unsigned int v21; // eax
  int v22; // r10d
  unsigned int v23; // r11d
  int v24; // r10d
  unsigned int v25; // eax
  int v26; // r10d
  unsigned int v27; // eax
  int v28; // r10d
  unsigned int v29; // eax
  int v30; // r10d
  unsigned int v31; // eax
  int v32; // r10d
  unsigned int v33; // r12d
  int v34; // r10d
  unsigned int v35; // eax
  int v36; // edi
  unsigned int v37; // r14d
  int v38; // esi
  unsigned int v39; // r15d
  int v40; // r10d
  unsigned int v41; // esi
  __int64 v42; // rdx
  unsigned __int32 v43; // edx
  int v44; // r9d
  __int128 v45; // [rsp+20h] [rbp-E0h] BYREF
  __int128 v46; // [rsp+30h] [rbp-D0h] BYREF
  unsigned int v47; // [rsp+40h] [rbp-C0h]
  unsigned __int32 v48; // [rsp+44h] [rbp-BCh]
  int v49; // [rsp+48h] [rbp-B8h]
  unsigned int v50; // [rsp+4Ch] [rbp-B4h]
  int v51; // [rsp+50h] [rbp-B0h]
  unsigned int v52; // [rsp+54h] [rbp-ACh]
  unsigned __int32 v53; // [rsp+58h] [rbp-A8h]
  __int128 v54; // [rsp+60h] [rbp-A0h] BYREF
  __int128 v55; // [rsp+70h] [rbp-90h]
  __int128 v56; // [rsp+80h] [rbp-80h]
  __int128 v57; // [rsp+90h] [rbp-70h]
  char v58[272]; // [rsp+A0h] [rbp-60h] BYREF

  if ( !a2 )
    return 1LL;
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( !v5 )
    return 0LL;
  v6 = *(_DWORD *)(a1 + 12);
  v7 = a2 + 4;
  if ( v7 > v6 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v7;
  v9 = *(_DWORD *)(v7 - 4 + v5);
  if ( v8 )
    v9 = _byteswap_ulong(v9);
  if ( v7 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v5);
  if ( v8 )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v5);
  if ( v8 )
    v13 = _byteswap_ulong(v13);
  if ( v12 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v5);
  if ( v8 )
    v14 = _byteswap_ulong(v14);
  v54 = xmmword_180028E60;
  v55 = xmmword_180028E70;
  v56 = xmmword_180028E80;
  v57 = xmmword_180028EA0;
  if ( !sub_18001D8D0(a1, (unsigned int *)&v54) )
    return 0LL;
  v46 = 0uLL;
  v45 = 0uLL;
  if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v46) )
    return 0LL;
  if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v45) )
    return 0LL;
  v15 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v16 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v15);
  if ( *(_DWORD *)(a1 + 16) )
    v16 = _byteswap_ulong(v16);
  sub_180005050((__int64 *)a1, v16, (__int64)v58);
  v17 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v18 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(_DWORD *)(a1 + 16);
  v21 = *(_DWORD *)((unsigned int)(v19 - 4) + v17);
  v48 = v21;
  if ( v20 )
    v48 = _byteswap_ulong(v21);
  if ( v19 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v22 = *(_DWORD *)(a1 + 8);
  v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v17);
  v47 = v23;
  if ( v20 )
  {
    v23 = _byteswap_ulong(v23);
    v47 = v23;
  }
  if ( v22 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v24 = *(_DWORD *)(a1 + 8);
  v25 = *(_DWORD *)((unsigned int)(v24 - 4) + v17);
  v50 = v25;
  if ( v20 )
    v50 = _byteswap_ulong(v25);
  if ( v24 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v26 = *(_DWORD *)(a1 + 8);
  v27 = *(_DWORD *)((unsigned int)(v26 - 4) + v17);
  v49 = v27;
  if ( v20 )
    v49 = _byteswap_ulong(v27);
  if ( v26 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v28 = *(_DWORD *)(a1 + 8);
  v29 = *(_DWORD *)((unsigned int)(v28 - 4) + v17);
  v52 = v29;
  if ( v20 )
    v52 = _byteswap_ulong(v29);
  if ( v28 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v30 = *(_DWORD *)(a1 + 8);
  v31 = *(_DWORD *)((unsigned int)(v30 - 4) + v17);
  v51 = v31;
  if ( v20 )
    v51 = _byteswap_ulong(v31);
  if ( v30 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v32 = *(_DWORD *)(a1 + 8);
  v33 = *(_DWORD *)((unsigned int)(v32 - 4) + v17);
  if ( v20 )
    v33 = _byteswap_ulong(v33);
  if ( v32 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v34 = *(_DWORD *)(a1 + 8);
  v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v17);
  v53 = v35;
  if ( v20 )
    v53 = _byteswap_ulong(v35);
  if ( v34 + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( v11 )
    *(_DWORD *)(a1 + 8) = v11;
  v36 = 0;
  v37 = v9 >> 4;
  v38 = 0;
  if ( v37 )
  {
    while ( 1 )
    {
      v54 = xmmword_180028E60;
      v55 = xmmword_180028E70;
      v56 = xmmword_180028E80;
      v57 = xmmword_180028EA0;
      if ( !sub_18001D8D0(a1, (unsigned int *)&v54) )
        return 0LL;
      if ( ++v38 >= v37 )
      {
        v23 = v47;
        break;
      }
    }
  }
  if ( v14 )
    *(_DWORD *)(a1 + 8) = v14;
  v39 = v13 >> 3;
  if ( v39 )
  {
    do
    {
      v46 = 0uLL;
      v45 = 0uLL;
      if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v46)
        || !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v45) )
      {
        return 0LL;
      }
    }
    while ( v40 + 1 < v39 );
  }
  if ( v23 )
    *(_DWORD *)(a1 + 8) = v23;
  v41 = v48;
  if ( v48 )
  {
    do
    {
      v42 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v43 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v42);
      if ( *(_DWORD *)(a1 + 16) )
        v43 = _byteswap_ulong(v43);
      sub_180005050((__int64 *)a1, v43, (__int64)v58);
    }
    while ( v44 + 1 < v41 );
  }
  if ( !(unsigned int)sub_18000C020(a1, v50, v49) || !(unsigned int)sub_18000C0C0((__int64 *)a1, v52, v51) )
    return 0LL;
  if ( v53 )
  {
    *(_DWORD *)(a1 + 8) = v53;
    if ( v33 )
    {
      while ( 1 )
      {
        *(_QWORD *)((char *)&v45 + 4) = 0LL;
        LODWORD(v45) = 0;
        *(_QWORD *)((char *)&v46 + 4) = 0LL;
        LODWORD(v46) = 0;
        if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v45)
          || !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v46) )
        {
          break;
        }
        if ( ++v36 >= v33 )
          return 1LL;
      }
      return 0LL;
    }
  }
  return 1LL;
}
// 18000BEAE: variable 'v40' is possibly undefined
// 18000BEB9: variable 'v23' is possibly undefined
// 18000BF0B: variable 'v44' is possibly undefined
// 180028E60: using guessed type __int128 xmmword_180028E60;
// 180028E70: using guessed type __int128 xmmword_180028E70;
// 180028E80: using guessed type __int128 xmmword_180028E80;
// 180028EA0: using guessed type __int128 xmmword_180028EA0;

//----- (000000018000C020) ----------------------------------------------------
__int64 __fastcall sub_18000C020(__int64 a1, unsigned int a2, int a3)
{
  __int64 v4; // r10
  bool v5; // zf
  unsigned int v6; // r8d
  unsigned int v7; // ecx
  unsigned int v8; // eax
  int v9; // r11d
  __int64 v11[3]; // [rsp+20h] [rbp-18h] BYREF

  v4 = a1;
  if ( !a3 )
    return 1LL;
  v5 = *(_QWORD *)a1 == 0LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !v5 )
  {
    v6 = a3 + 4;
    if ( v6 <= *(_DWORD *)(a1 + 12) )
    {
      *(_DWORD *)(a1 + 8) = v6;
      if ( a2 )
      {
        while ( *(_QWORD *)v4 )
        {
          v7 = *(_DWORD *)(v4 + 12);
          v8 = *(_DWORD *)(v4 + 8) + 2;
          if ( v8 > v7 )
            break;
          *(_DWORD *)(v4 + 8) = v8;
          if ( v8 + 2 > v7 )
            break;
          *(_DWORD *)(v4 + 8) += 2;
          v11[1] = 0LL;
          v11[0] = 0LL;
          if ( !(unsigned int)sub_18001D710((__int64 *)v4, (unsigned int *)v11) )
            break;
          if ( v9 + 1 >= a2 )
            return 1LL;
        }
        return 0LL;
      }
      return 1LL;
    }
  }
  return 0LL;
}
// 18000C050: variable 'v4' is possibly undefined
// 18000C098: variable 'v9' is possibly undefined

//----- (000000018000C0C0) ----------------------------------------------------
__int64 __fastcall sub_18000C0C0(__int64 *a1, unsigned int a2, int a3)
{
  __int64 v5; // rbp
  unsigned int v6; // eax
  unsigned int v7; // r8d
  int v8; // edx
  int v9; // r11d
  int v10; // ebx
  int v11; // edi
  unsigned int v12; // r10d

  if ( !a3 )
    return 1LL;
  v5 = *a1;
  *((_DWORD *)a1 + 2) = a3;
  if ( !v5 )
    return 0LL;
  v6 = a3 + 4;
  v7 = *((_DWORD *)a1 + 3);
  if ( v6 > v7 )
    return 0LL;
  v8 = 0;
  v9 = 0;
  *((_DWORD *)a1 + 2) = v6;
  v10 = 0;
  if ( a2 )
  {
    while ( *((_DWORD *)a1 + 2) + 4 <= v7 )
    {
      *((_DWORD *)a1 + 2) += 4;
      v11 = *((_DWORD *)a1 + 2);
      v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v5);
      if ( *((_DWORD *)a1 + 4) )
        v12 = _byteswap_ulong(v12);
      if ( v11 + 4 > v7 )
        break;
      *((_DWORD *)a1 + 2) += 4;
      v9 += v12;
      if ( ++v10 >= a2 )
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    if ( v9 <= 0 )
      return 1LL;
    while ( *((_DWORD *)a1 + 2) + 4 <= v7 )
    {
      *((_DWORD *)a1 + 2) += 4;
      if ( *((_DWORD *)a1 + 2) + 4 > v7 )
        break;
      *((_DWORD *)a1 + 2) += 4;
      if ( ++v8 >= v9 )
        return 1LL;
    }
  }
  return 0LL;
}

//----- (000000018000C1B0) ----------------------------------------------------
__int64 __fastcall sub_18000C1B0(__int64 a1, _DWORD *a2)
{
  int v4; // r8d
  unsigned int v5; // ecx
  unsigned int v6; // r8d
  unsigned int v7; // r8d
  int v8; // edx
  int v9; // edx
  int v10; // edx
  int v11; // eax
  int v12; // r8d
  int v13; // edx
  unsigned int v14; // eax
  int v15; // r8d
  int v16; // edx
  unsigned int v17; // edi
  unsigned int v18; // edx
  unsigned int v20; // r15d
  unsigned int v21; // r14d
  int v22; // edi
  __int64 v23; // r8
  unsigned int v24; // r9d
  int v25; // edx
  int v26; // r11d
  unsigned __int32 v27; // r10d
  unsigned int v28; // edx
  unsigned __int32 v29; // esi
  __int64 *v30; // rcx
  __int64 *v31; // rcx
  int v32; // r9d
  __int64 v33; // rdx
  int v34; // ecx
  __int64 v35; // rdx
  __int64 v36[3]; // [rsp+30h] [rbp-D0h] BYREF
  __int64 v37; // [rsp+48h] [rbp-B8h]
  __int64 v38; // [rsp+50h] [rbp-B0h]
  __int64 v39; // [rsp+58h] [rbp-A8h]
  __int64 v40; // [rsp+60h] [rbp-A0h]
  __int64 v41; // [rsp+68h] [rbp-98h]
  __int64 v42; // [rsp+70h] [rbp-90h]
  __int64 v43; // [rsp+78h] [rbp-88h]
  CHAR MultiByteStr[272]; // [rsp+80h] [rbp-80h] BYREF
  char v45[272]; // [rsp+190h] [rbp+90h] BYREF
  char v46[272]; // [rsp+2A0h] [rbp+1A0h] BYREF

  if ( !*(_QWORD *)a1 )
    return 0LL;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = v4 + 4;
  if ( v6 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v6;
  if ( v6 + 4 > v5 )
    return 0LL;
  v7 = v6 + 4;
  *(_DWORD *)(a1 + 8) = v7;
  if ( v7 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v8 = *(_DWORD *)(a1 + 8);
  if ( v8 + 4 > v5 )
    return 0LL;
  v9 = v8 + 4;
  *(_DWORD *)(a1 + 8) = v9;
  if ( v9 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  if ( v10 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 4;
  v11 = a2[2];
  if ( !v11 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = a2[4];
  if ( v11 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11 + 4;
  if ( v11 + 8 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11 + 8;
  if ( v11 + 12 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v11 + 12;
  if ( v11 + 16 > v5 )
    return 0LL;
  v13 = v11 + 16;
  *(_DWORD *)(a1 + 8) = v11 + 16;
  if ( v11 + 20 > v5 )
    return 0LL;
  v14 = v11 + 20;
  *(_DWORD *)(a1 + 8) = v13 + 4;
  v15 = v12 - 5;
  v16 = 0;
  if ( v15 <= 0 )
  {
LABEL_17:
    v17 = a2[7];
    if ( v14 < v17 )
    {
      while ( MultiByteStr && (unsigned int)sub_180004F90((__int64 *)a1, (__int64)MultiByteStr) )
      {
        if ( *(_DWORD *)(a1 + 8) >= v17 )
          goto LABEL_21;
      }
      return 0LL;
    }
LABEL_21:
    v18 = a2[7];
    memset(v36, 0, sizeof(v36));
    v37 = 0LL;
    v38 = 0LL;
    v39 = 0LL;
    v40 = 0LL;
    v41 = 0LL;
    v42 = 0LL;
    v43 = 0LL;
    if ( (_DWORD)qword_1800306F0 == 811 )
    {
      if ( !v18 || !(unsigned int)sub_18000D030(a1, v18, v36) )
        return 0;
    }
    else if ( (_DWORD)qword_1800306F0 == 844 )
    {
      if ( !v18 || !(unsigned int)sub_18000CB20(a1, v18, v36) )
        return 0;
    }
    else if ( !v18 || !(unsigned int)sub_18000C5F0(a1, v18, v36) )
    {
      return 0;
    }
    v20 = 1;
    if ( HIDWORD(v37) )
    {
      v21 = v37;
      *(_DWORD *)(a1 + 8) = HIDWORD(v37);
      if ( v21 && !(unsigned int)sub_180001FD0((__int64)&qword_1800306F0, v21) )
        return 0;
      v22 = 0;
      if ( v21 )
      {
        do
        {
          memset(MultiByteStr, 0, 0x104uLL);
          v23 = *(_QWORD *)a1;
          if ( !*(_QWORD *)a1 )
            return 0;
          v24 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          v25 = *(_DWORD *)(a1 + 8);
          v26 = *(_DWORD *)(a1 + 16);
          v27 = *(_DWORD *)((unsigned int)(v25 - 4) + v23);
          if ( v26 )
            v27 = _byteswap_ulong(v27);
          v28 = v25 + 4;
          if ( v28 > v24 )
            return 0;
          *(_DWORD *)(a1 + 8) = v28;
          v29 = *(_DWORD *)(v28 - 4 + v23);
          if ( v26 )
            v29 = _byteswap_ulong(v29);
          if ( v28 + 4 > v24 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v27, (__int64)MultiByteStr);
          sub_180005050(v30, v29, (__int64)v45);
          sub_180005050(v31, v32, (__int64)v46);
          if ( qword_180030700 )
            MultiByteToWideChar(0, 1u, MultiByteStr, -1, (LPWSTR)qword_180030700 + 260 * v22, 255);
        }
        while ( ++v22 < v21 );
      }
    }
    if ( HIDWORD(v38) )
    {
      v33 = *(_QWORD *)a1;
      v34 = 0;
      *(_DWORD *)(a1 + 8) = HIDWORD(v38);
      while ( v33 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( ++v34 >= 32 )
          goto LABEL_53;
      }
    }
    else
    {
LABEL_53:
      if ( (unsigned int)sub_18000D570(a1, v39, SHIDWORD(v39))
        && (unsigned int)sub_18000E400(a1, v40, SHIDWORD(v40))
        && (unsigned int)sub_18000D9F0(a1, v41, SHIDWORD(v41))
        && (unsigned int)sub_18000B660(a1, v35, HIDWORD(v42)) )
      {
        return v20;
      }
    }
    return 0;
  }
  while ( 1 )
  {
    v14 += 4;
    if ( v14 > v5 )
      return 0LL;
    ++v16;
    *(_DWORD *)(a1 + 8) = v14;
    if ( v16 >= v15 )
      goto LABEL_17;
  }
}
// 18000C4F1: variable 'v30' is possibly undefined
// 18000C500: variable 'v31' is possibly undefined
// 18000C500: variable 'v32' is possibly undefined
// 18000C5C2: variable 'v35' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 18000C1B0: using guessed type char var_250[272];
// 18000C1B0: using guessed type char var_140[272];

//----- (000000018000C5F0) ----------------------------------------------------
__int64 __fastcall sub_18000C5F0(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r10
  unsigned __int32 v5; // edx
  __int64 *v6; // r9
  __int64 v7; // r8
  int v8; // ecx
  int v9; // edx
  unsigned int v10; // eax
  unsigned int v11; // edx
  int v12; // r10d
  int v13; // r11d
  unsigned int v14; // r13d
  int v15; // r10d
  int v16; // r10d
  int v17; // r10d
  int v18; // r10d
  int v19; // r10d
  int v20; // r10d
  int v21; // r10d
  int v22; // r10d
  unsigned int v23; // r12d
  int v24; // r10d
  int v25; // r10d
  unsigned int v26; // r15d
  int v27; // r10d
  unsigned int v28; // r14d
  int v29; // ecx
  int v30; // ecx
  int v31; // ecx
  int v32; // ecx
  int v33; // ecx
  int v34; // ecx
  int v35; // r10d
  unsigned int v36; // esi
  int v37; // r10d
  unsigned int v38; // edi
  int v39; // ecx
  int v40; // ecx
  int v41; // ecx
  int v42; // ecx
  int v43; // r10d
  unsigned int v44; // ebx
  int v45; // r10d
  unsigned int v46; // r8d
  int v47; // ecx
  int v48; // ecx
  int v49; // ecx
  int v50; // ecx
  int v51; // ecx
  __int64 result; // rax
  unsigned __int32 v53; // [rsp+20h] [rbp-178h]
  unsigned __int32 v54; // [rsp+24h] [rbp-174h]
  unsigned __int32 v55; // [rsp+28h] [rbp-170h]
  unsigned __int32 v56; // [rsp+2Ch] [rbp-16Ch]
  unsigned __int32 v57; // [rsp+30h] [rbp-168h]
  unsigned __int32 v58; // [rsp+34h] [rbp-164h]
  char v59[272]; // [rsp+40h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v59);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v11 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= 19 )
          {
            if ( v10 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v12 = *((_DWORD *)v6 + 2);
            v13 = *((_DWORD *)v6 + 4);
            v14 = *(_DWORD *)((unsigned int)(v12 - 4) + v7);
            if ( v13 )
              v14 = _byteswap_ulong(v14);
            if ( v12 + 4 > v11 )
              return 0LL;
            v15 = v12 + 4;
            *((_DWORD *)v6 + 2) = v15;
            v53 = *(_DWORD *)((unsigned int)(v15 - 4) + v7);
            if ( v13 )
              v53 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v15 - 4) + v7));
            if ( v15 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v16 = *((_DWORD *)v6 + 2);
            v54 = *(_DWORD *)((unsigned int)(v16 - 4) + v7);
            if ( v13 )
              v54 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v16 - 4) + v7));
            if ( v16 + 4 > v11 )
              return 0LL;
            v17 = v16 + 4;
            *((_DWORD *)v6 + 2) = v17;
            v55 = *(_DWORD *)((unsigned int)(v17 - 4) + v7);
            if ( v13 )
              v55 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v7));
            if ( v17 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v18 = *((_DWORD *)v6 + 2);
            v56 = *(_DWORD *)((unsigned int)(v18 - 4) + v7);
            if ( v13 )
              v56 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v7));
            if ( v18 + 4 > v11 )
              return 0LL;
            v19 = v18 + 4;
            *((_DWORD *)v6 + 2) = v19;
            v57 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
            if ( v13 )
              v57 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v7));
            if ( v19 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v20 = *((_DWORD *)v6 + 2);
            if ( v20 + 4 > v11 )
              return 0LL;
            v21 = v20 + 4;
            *((_DWORD *)v6 + 2) = v21;
            v58 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
            if ( v13 )
              v58 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v7));
            if ( v21 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v22 = *((_DWORD *)v6 + 2);
            v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v7);
            if ( v13 )
              v23 = _byteswap_ulong(v23);
            if ( v22 + 4 > v11 )
              return 0LL;
            v24 = v22 + 4;
            *((_DWORD *)v6 + 2) = v24;
            if ( v24 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v25 = *((_DWORD *)v6 + 2);
            v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v7);
            if ( v13 )
              v26 = _byteswap_ulong(v26);
            if ( v25 + 4 > v11 )
              return 0LL;
            v27 = v25 + 4;
            *((_DWORD *)v6 + 2) = v27;
            v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v7);
            if ( v13 )
              v28 = _byteswap_ulong(v28);
            if ( v27 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v29 = *((_DWORD *)v6 + 2);
            if ( v29 + 4 > v11 )
              return 0LL;
            v30 = v29 + 4;
            *((_DWORD *)v6 + 2) = v30;
            if ( v30 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v31 = *((_DWORD *)v6 + 2);
            if ( v31 + 4 > v11 )
              return 0LL;
            v32 = v31 + 4;
            *((_DWORD *)v6 + 2) = v32;
            if ( v32 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v33 = *((_DWORD *)v6 + 2);
            if ( v33 + 4 > v11 )
              return 0LL;
            v34 = v33 + 4;
            *((_DWORD *)v6 + 2) = v34;
            if ( v34 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v35 = *((_DWORD *)v6 + 2);
            v36 = *(_DWORD *)((unsigned int)(v35 - 4) + v7);
            if ( v13 )
              v36 = _byteswap_ulong(v36);
            if ( v35 + 4 > v11 )
              return 0LL;
            v37 = v35 + 4;
            *((_DWORD *)v6 + 2) = v37;
            v38 = *(_DWORD *)((unsigned int)(v37 - 4) + v7);
            if ( v13 )
              v38 = _byteswap_ulong(v38);
            if ( v37 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v39 = *((_DWORD *)v6 + 2);
            if ( v39 + 4 > v11 )
              return 0LL;
            v40 = v39 + 4;
            *((_DWORD *)v6 + 2) = v40;
            if ( v40 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v41 = *((_DWORD *)v6 + 2);
            if ( v41 + 4 > v11 )
              return 0LL;
            v42 = v41 + 4;
            *((_DWORD *)v6 + 2) = v42;
            if ( v42 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v43 = *((_DWORD *)v6 + 2);
            v44 = *(_DWORD *)((unsigned int)(v43 - 4) + v7);
            if ( v13 )
              v44 = _byteswap_ulong(v44);
            if ( v43 + 4 > v11 )
              return 0LL;
            v45 = v43 + 4;
            *((_DWORD *)v6 + 2) = v45;
            v46 = *(_DWORD *)((unsigned int)(v45 - 4) + v7);
            if ( v13 )
              v46 = _byteswap_ulong(v46);
            if ( v45 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v47 = *((_DWORD *)v6 + 2);
            if ( v47 + 4 > v11 )
              return 0LL;
            v48 = v47 + 4;
            *((_DWORD *)v6 + 2) = v48;
            if ( v48 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v49 = *((_DWORD *)v6 + 2);
            if ( v49 + 4 > v11 )
              return 0LL;
            v50 = v49 + 4;
            *((_DWORD *)v6 + 2) = v50;
            if ( v50 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v51 = *((_DWORD *)v6 + 2);
            if ( v51 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) = v51 + 4;
            a3[7] = v53;
            a3[8] = v54;
            a3[9] = v55;
            a3[10] = v56;
            a3[11] = v57;
            a3[12] = v58;
            result = 1LL;
            a3[6] = v14;
            a3[13] = v23;
            a3[14] = v26;
            a3[15] = v28;
            a3[16] = v36;
            a3[17] = v38;
            a3[18] = v44;
            a3[19] = v46;
            return result;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 18000C683: conditional instruction was optimized away because r8.8!=0
// 18000C6A2: conditional instruction was optimized away because r8.8!=0
// 18000C648: variable 'v6' is possibly undefined
// 18000C5F0: using guessed type char var_158[272];

//----- (000000018000CB20) ----------------------------------------------------
__int64 __fastcall sub_18000CB20(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r9
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r9
  int v8; // edx
  int v9; // r8d
  unsigned int v10; // eax
  unsigned int v11; // r8d
  int v12; // r10d
  int v13; // r11d
  unsigned int v14; // r13d
  int v15; // r10d
  int v16; // r10d
  int v17; // r10d
  int v18; // r10d
  int v19; // r10d
  int v20; // r10d
  int v21; // r10d
  int v22; // r10d
  unsigned int v23; // r12d
  int v24; // r10d
  int v25; // r10d
  unsigned int v26; // r15d
  int v27; // r10d
  unsigned int v28; // r14d
  int v29; // edx
  int v30; // edx
  int v31; // edx
  int v32; // edx
  int v33; // edx
  int v34; // edx
  int v35; // edx
  int v36; // edx
  int v37; // r10d
  unsigned int v38; // esi
  int v39; // r10d
  unsigned int v40; // edi
  int v41; // edx
  int v42; // edx
  int v43; // edx
  int v44; // edx
  int v45; // r10d
  unsigned int v46; // ebx
  int v47; // r10d
  unsigned int v48; // edx
  int v49; // r9d
  __int64 result; // rax
  unsigned __int32 v51; // [rsp+20h] [rbp-178h]
  unsigned __int32 v52; // [rsp+24h] [rbp-174h]
  unsigned __int32 v53; // [rsp+28h] [rbp-170h]
  unsigned __int32 v54; // [rsp+2Ch] [rbp-16Ch]
  unsigned __int32 v55; // [rsp+30h] [rbp-168h]
  unsigned __int32 v56; // [rsp+34h] [rbp-164h]
  char v57[272]; // [rsp+40h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v57);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v11 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= 19 )
          {
            if ( v10 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v12 = *((_DWORD *)v6 + 2);
            v13 = *((_DWORD *)v6 + 4);
            v14 = *(_DWORD *)((unsigned int)(v12 - 4) + v7);
            if ( v13 )
              v14 = _byteswap_ulong(v14);
            if ( v12 + 4 > v11 )
              return 0LL;
            v15 = v12 + 4;
            *((_DWORD *)v6 + 2) = v15;
            v51 = *(_DWORD *)((unsigned int)(v15 - 4) + v7);
            if ( v13 )
              v51 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v15 - 4) + v7));
            if ( v15 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v16 = *((_DWORD *)v6 + 2);
            v52 = *(_DWORD *)((unsigned int)(v16 - 4) + v7);
            if ( v13 )
              v52 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v16 - 4) + v7));
            if ( v16 + 4 > v11 )
              return 0LL;
            v17 = v16 + 4;
            *((_DWORD *)v6 + 2) = v17;
            v53 = *(_DWORD *)((unsigned int)(v17 - 4) + v7);
            if ( v13 )
              v53 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v7));
            if ( v17 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v18 = *((_DWORD *)v6 + 2);
            v54 = *(_DWORD *)((unsigned int)(v18 - 4) + v7);
            if ( v13 )
              v54 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v7));
            if ( v18 + 4 > v11 )
              return 0LL;
            v19 = v18 + 4;
            *((_DWORD *)v6 + 2) = v19;
            v55 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
            if ( v13 )
              v55 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v7));
            if ( v19 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v20 = *((_DWORD *)v6 + 2);
            if ( v20 + 4 > v11 )
              return 0LL;
            v21 = v20 + 4;
            *((_DWORD *)v6 + 2) = v21;
            v56 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
            if ( v13 )
              v56 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v7));
            if ( v21 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v22 = *((_DWORD *)v6 + 2);
            v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v7);
            if ( v13 )
              v23 = _byteswap_ulong(v23);
            if ( v22 + 4 > v11 )
              return 0LL;
            v24 = v22 + 4;
            *((_DWORD *)v6 + 2) = v24;
            if ( v24 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v25 = *((_DWORD *)v6 + 2);
            v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v7);
            if ( v13 )
              v26 = _byteswap_ulong(v26);
            if ( v25 + 4 > v11 )
              return 0LL;
            v27 = v25 + 4;
            *((_DWORD *)v6 + 2) = v27;
            v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v7);
            if ( v13 )
              v28 = _byteswap_ulong(v28);
            if ( v27 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v29 = *((_DWORD *)v6 + 2);
            if ( v29 + 4 > v11 )
              return 0LL;
            v30 = v29 + 4;
            *((_DWORD *)v6 + 2) = v30;
            if ( v30 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v31 = *((_DWORD *)v6 + 2);
            if ( v31 + 4 > v11 )
              return 0LL;
            v32 = v31 + 4;
            *((_DWORD *)v6 + 2) = v32;
            if ( v32 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v33 = *((_DWORD *)v6 + 2);
            if ( v33 + 4 > v11 )
              return 0LL;
            v34 = v33 + 4;
            *((_DWORD *)v6 + 2) = v34;
            if ( v34 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v35 = *((_DWORD *)v6 + 2);
            if ( v35 + 4 > v11 )
              return 0LL;
            v36 = v35 + 4;
            *((_DWORD *)v6 + 2) = v36;
            if ( v36 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v37 = *((_DWORD *)v6 + 2);
            v38 = *(_DWORD *)((unsigned int)(v37 - 4) + v7);
            if ( v13 )
              v38 = _byteswap_ulong(v38);
            if ( v37 + 4 > v11 )
              return 0LL;
            v39 = v37 + 4;
            *((_DWORD *)v6 + 2) = v39;
            v40 = *(_DWORD *)((unsigned int)(v39 - 4) + v7);
            if ( v13 )
              v40 = _byteswap_ulong(v40);
            if ( v39 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v41 = *((_DWORD *)v6 + 2);
            if ( v41 + 4 > v11 )
              return 0LL;
            v42 = v41 + 4;
            *((_DWORD *)v6 + 2) = v42;
            if ( v42 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v43 = *((_DWORD *)v6 + 2);
            if ( v43 + 4 > v11 )
              return 0LL;
            v44 = v43 + 4;
            *((_DWORD *)v6 + 2) = v44;
            if ( v44 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v45 = *((_DWORD *)v6 + 2);
            v46 = *(_DWORD *)((unsigned int)(v45 - 4) + v7);
            if ( v13 )
              v46 = _byteswap_ulong(v46);
            if ( v45 + 4 > v11 )
              return 0LL;
            v47 = v45 + 4;
            *((_DWORD *)v6 + 2) = v47;
            v48 = *(_DWORD *)((unsigned int)(v47 - 4) + v7);
            if ( v13 )
              v48 = _byteswap_ulong(v48);
            if ( v47 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v49 = *((_DWORD *)v6 + 2);
            if ( v49 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) = v49 + 4;
            a3[7] = v51;
            a3[8] = v52;
            a3[9] = v53;
            a3[10] = v54;
            a3[11] = v55;
            a3[12] = v56;
            result = 1LL;
            a3[6] = v14;
            a3[13] = v23;
            a3[14] = v26;
            a3[15] = v28;
            a3[16] = v38;
            a3[17] = v40;
            a3[18] = v46;
            a3[19] = v48;
            return result;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 18000CBB3: conditional instruction was optimized away because r9.8!=0
// 18000CBD2: conditional instruction was optimized away because r9.8!=0
// 18000CB75: variable 'v6' is possibly undefined
// 18000CB20: using guessed type char var_158[272];

//----- (000000018000D030) ----------------------------------------------------
__int64 __fastcall sub_18000D030(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r9
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r9
  int v8; // edx
  int v9; // r8d
  unsigned int v10; // eax
  unsigned int v11; // r8d
  int v12; // edx
  int v13; // edx
  int v14; // r10d
  int v15; // r11d
  unsigned int v16; // r13d
  int v17; // r10d
  int v18; // r10d
  int v19; // r10d
  int v20; // r10d
  int v21; // r10d
  int v22; // r10d
  int v23; // r10d
  int v24; // r10d
  unsigned int v25; // r12d
  int v26; // r10d
  int v27; // r10d
  unsigned int v28; // r15d
  int v29; // r10d
  unsigned int v30; // r14d
  int v31; // edx
  int v32; // edx
  int v33; // edx
  int v34; // edx
  int v35; // edx
  int v36; // edx
  int v37; // edx
  int v38; // edx
  int v39; // r10d
  unsigned int v40; // esi
  int v41; // r10d
  unsigned int v42; // edi
  int v43; // edx
  int v44; // edx
  int v45; // edx
  int v46; // edx
  int v47; // r10d
  unsigned int v48; // ebx
  int v49; // r10d
  unsigned int v50; // edx
  int v51; // r9d
  __int64 result; // rax
  unsigned __int32 v53; // [rsp+20h] [rbp-178h]
  unsigned __int32 v54; // [rsp+24h] [rbp-174h]
  unsigned __int32 v55; // [rsp+28h] [rbp-170h]
  unsigned __int32 v56; // [rsp+2Ch] [rbp-16Ch]
  unsigned __int32 v57; // [rsp+30h] [rbp-168h]
  unsigned __int32 v58; // [rsp+34h] [rbp-164h]
  char v59[272]; // [rsp+40h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v59);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v11 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= 10 )
          {
            if ( v10 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v12 = *((_DWORD *)v6 + 2);
            if ( v12 + 4 > v11 )
              return 0LL;
            v13 = v12 + 4;
            *((_DWORD *)v6 + 2) = v13;
            if ( v13 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v14 = *((_DWORD *)v6 + 2);
            v15 = *((_DWORD *)v6 + 4);
            v16 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
            if ( v15 )
              v16 = _byteswap_ulong(v16);
            if ( v14 + 4 > v11 )
              return 0LL;
            v17 = v14 + 4;
            *((_DWORD *)v6 + 2) = v17;
            v53 = *(_DWORD *)((unsigned int)(v17 - 4) + v7);
            if ( v15 )
              v53 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v7));
            if ( v17 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v18 = *((_DWORD *)v6 + 2);
            v54 = *(_DWORD *)((unsigned int)(v18 - 4) + v7);
            if ( v15 )
              v54 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v7));
            if ( v18 + 4 > v11 )
              return 0LL;
            v19 = v18 + 4;
            *((_DWORD *)v6 + 2) = v19;
            v55 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
            if ( v15 )
              v55 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v7));
            if ( v19 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v20 = *((_DWORD *)v6 + 2);
            v56 = *(_DWORD *)((unsigned int)(v20 - 4) + v7);
            if ( v15 )
              v56 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v7));
            if ( v20 + 4 > v11 )
              return 0LL;
            v21 = v20 + 4;
            *((_DWORD *)v6 + 2) = v21;
            v57 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
            if ( v15 )
              v57 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v7));
            if ( v21 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v22 = *((_DWORD *)v6 + 2);
            if ( v22 + 4 > v11 )
              return 0LL;
            v23 = v22 + 4;
            *((_DWORD *)v6 + 2) = v23;
            v58 = *(_DWORD *)((unsigned int)(v23 - 4) + v7);
            if ( v15 )
              v58 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v7));
            if ( v23 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v24 = *((_DWORD *)v6 + 2);
            v25 = *(_DWORD *)((unsigned int)(v24 - 4) + v7);
            if ( v15 )
              v25 = _byteswap_ulong(v25);
            if ( v24 + 4 > v11 )
              return 0LL;
            v26 = v24 + 4;
            *((_DWORD *)v6 + 2) = v26;
            if ( v26 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v27 = *((_DWORD *)v6 + 2);
            v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v7);
            if ( v15 )
              v28 = _byteswap_ulong(v28);
            if ( v27 + 4 > v11 )
              return 0LL;
            v29 = v27 + 4;
            *((_DWORD *)v6 + 2) = v29;
            v30 = *(_DWORD *)((unsigned int)(v29 - 4) + v7);
            if ( v15 )
              v30 = _byteswap_ulong(v30);
            if ( v29 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v31 = *((_DWORD *)v6 + 2);
            if ( v31 + 4 > v11 )
              return 0LL;
            v32 = v31 + 4;
            *((_DWORD *)v6 + 2) = v32;
            if ( v32 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v33 = *((_DWORD *)v6 + 2);
            if ( v33 + 4 > v11 )
              return 0LL;
            v34 = v33 + 4;
            *((_DWORD *)v6 + 2) = v34;
            if ( v34 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v35 = *((_DWORD *)v6 + 2);
            if ( v35 + 4 > v11 )
              return 0LL;
            v36 = v35 + 4;
            *((_DWORD *)v6 + 2) = v36;
            if ( v36 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v37 = *((_DWORD *)v6 + 2);
            if ( v37 + 4 > v11 )
              return 0LL;
            v38 = v37 + 4;
            *((_DWORD *)v6 + 2) = v38;
            if ( v38 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v39 = *((_DWORD *)v6 + 2);
            v40 = *(_DWORD *)((unsigned int)(v39 - 4) + v7);
            if ( v15 )
              v40 = _byteswap_ulong(v40);
            if ( v39 + 4 > v11 )
              return 0LL;
            v41 = v39 + 4;
            *((_DWORD *)v6 + 2) = v41;
            v42 = *(_DWORD *)((unsigned int)(v41 - 4) + v7);
            if ( v15 )
              v42 = _byteswap_ulong(v42);
            if ( v41 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v43 = *((_DWORD *)v6 + 2);
            if ( v43 + 4 > v11 )
              return 0LL;
            v44 = v43 + 4;
            *((_DWORD *)v6 + 2) = v44;
            if ( v44 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v45 = *((_DWORD *)v6 + 2);
            if ( v45 + 4 > v11 )
              return 0LL;
            v46 = v45 + 4;
            *((_DWORD *)v6 + 2) = v46;
            if ( v46 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v47 = *((_DWORD *)v6 + 2);
            v48 = *(_DWORD *)((unsigned int)(v47 - 4) + v7);
            if ( v15 )
              v48 = _byteswap_ulong(v48);
            if ( v47 + 4 > v11 )
              return 0LL;
            v49 = v47 + 4;
            *((_DWORD *)v6 + 2) = v49;
            v50 = *(_DWORD *)((unsigned int)(v49 - 4) + v7);
            if ( v15 )
              v50 = _byteswap_ulong(v50);
            if ( v49 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v51 = *((_DWORD *)v6 + 2);
            if ( v51 + 4 > v11 )
              return 0LL;
            *((_DWORD *)v6 + 2) = v51 + 4;
            a3[7] = v53;
            a3[8] = v54;
            a3[9] = v55;
            a3[10] = v56;
            a3[11] = v57;
            a3[12] = v58;
            result = 1LL;
            a3[6] = v16;
            a3[13] = v25;
            a3[14] = v28;
            a3[15] = v30;
            a3[16] = v40;
            a3[17] = v42;
            a3[18] = v48;
            a3[19] = v50;
            return result;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 18000D0C3: conditional instruction was optimized away because r9.8!=0
// 18000D0E2: conditional instruction was optimized away because r9.8!=0
// 18000D085: variable 'v6' is possibly undefined
// 18000D030: using guessed type char var_158[272];

//----- (000000018000D570) ----------------------------------------------------
__int64 __fastcall sub_18000D570(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v7; // r12d
  int v8; // ebp
  __int64 v9; // rdx
  unsigned int v10; // r8d
  int v11; // r9d
  int v12; // r10d
  unsigned __int32 v13; // r11d
  int v14; // r9d
  unsigned __int32 v15; // esi
  int v16; // r9d
  unsigned __int32 v17; // edi
  __int64 *v18; // rcx
  __int64 *v19; // rcx
  __int64 *v20; // rcx
  int v21; // r9d
  char *v22; // rdx
  char *v23; // r8
  char v24; // al
  unsigned int v25; // r14d
  __int64 v26; // rdx
  unsigned int v27; // r8d
  int v28; // r9d
  int v29; // r10d
  unsigned __int32 v30; // r11d
  int v31; // r9d
  unsigned __int32 v32; // r15d
  int v33; // r9d
  unsigned __int32 v34; // ebp
  int v35; // r9d
  unsigned __int32 v36; // esi
  unsigned int v37; // edi
  __int64 *v38; // rcx
  __int64 *v39; // rcx
  __int64 *v40; // rcx
  __int64 v41; // rcx
  int v42; // r9d
  int v43; // esi
  __int64 v44; // rcx
  char *v46; // [rsp+28h] [rbp-490h]
  char v47[272]; // [rsp+30h] [rbp-488h] BYREF
  char v48[272]; // [rsp+140h] [rbp-378h] BYREF
  char v49[272]; // [rsp+250h] [rbp-268h] BYREF
  char v50[272]; // [rsp+360h] [rbp-158h] BYREF

  if ( !a3 || !a2 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  result = sub_1800020D0((__int64)&qword_1800306F0, a2);
  if ( (_DWORD)result )
  {
    v7 = 0;
    v8 = 0;
    while ( 1 )
    {
      memset(v47, 0, 0x104uLL);
      v9 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        break;
      v10 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v11 = *(_DWORD *)(a1 + 8);
      v12 = *(_DWORD *)(a1 + 16);
      v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
      if ( v12 )
        v13 = _byteswap_ulong(v13);
      if ( v11 + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v14 = *(_DWORD *)(a1 + 8);
      v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v9);
      if ( v12 )
        v15 = _byteswap_ulong(v15);
      if ( v14 + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v16 = *(_DWORD *)(a1 + 8);
      v17 = *(_DWORD *)((unsigned int)(v16 - 4) + v9);
      if ( v12 )
        v17 = _byteswap_ulong(v17);
      if ( v16 + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v13, (__int64)v47);
      sub_180005050(v18, v15, (__int64)v48);
      sub_180005050(v19, v17, (__int64)v49);
      sub_180005050(v20, v21, (__int64)v50);
      if ( qword_180030710 )
      {
        v22 = v47;
        v23 = (char *)qword_180030710 + 312 * v8 + 52;
        do
        {
          v24 = *v22++;
          *v23++ = v24;
        }
        while ( v24 );
      }
      if ( ++v8 >= a2 )
      {
        *(_DWORD *)(a1 + 8) = a3;
        v25 = 0;
        while ( 1 )
        {
          v26 = *(_QWORD *)a1;
          v46 = (char *)qword_180030710 + 312 * (int)v25;
          if ( !*(_QWORD *)a1 )
            break;
          v27 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v28 = *(_DWORD *)(a1 + 8);
          v29 = *(_DWORD *)(a1 + 16);
          v30 = *(_DWORD *)((unsigned int)(v28 - 4) + v26);
          if ( v29 )
            v30 = _byteswap_ulong(v30);
          if ( v28 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v31 = *(_DWORD *)(a1 + 8);
          v32 = *(_DWORD *)((unsigned int)(v31 - 4) + v26);
          if ( v29 )
            v32 = _byteswap_ulong(v32);
          if ( v31 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v33 = *(_DWORD *)(a1 + 8);
          v34 = *(_DWORD *)((unsigned int)(v33 - 4) + v26);
          if ( v29 )
            v34 = _byteswap_ulong(v34);
          if ( v33 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v35 = *(_DWORD *)(a1 + 8);
          v36 = *(_DWORD *)((unsigned int)(v35 - 4) + v26);
          if ( v29 )
            v36 = _byteswap_ulong(v36);
          if ( v35 + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v37 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v26);
          if ( v29 )
            v37 = _byteswap_ulong(v37);
          if ( HIDWORD(qword_1800306F0) )
            v7 = *(_DWORD *)(a1 + 8);
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v27 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v30, (__int64)v50);
          sub_180005050(v38, v32, (__int64)v49);
          sub_180005050(v39, v34, (__int64)v48);
          sub_180005050(v40, v36, (__int64)v47);
          if ( HIDWORD(qword_1800306F0) && v42 && v37 )
            v42 += v7;
          v43 = *(_DWORD *)(a1 + 8);
          if ( !(unsigned int)sub_18000A5E0(v41, (__int64)v46, v37, v42) )
            break;
          ++v25;
          *(_DWORD *)(a1 + 8) = v43;
          v7 = 0;
          if ( v25 >= a2 )
          {
            v44 = *(_QWORD *)a1;
            while ( v44 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( ++v7 >= 32 )
                return 1LL;
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
    return 0LL;
  }
  return result;
}
// 18000D5F9: conditional instruction was optimized away because r15d.4!=0
// 18000D7A7: conditional instruction was optimized away because r15d.4!=0
// 18000D72F: variable 'v18' is possibly undefined
// 18000D73E: variable 'v19' is possibly undefined
// 18000D74E: variable 'v20' is possibly undefined
// 18000D74E: variable 'v21' is possibly undefined
// 18000D916: variable 'v38' is possibly undefined
// 18000D925: variable 'v39' is possibly undefined
// 18000D931: variable 'v40' is possibly undefined
// 18000D942: variable 'v42' is possibly undefined
// 18000D956: variable 'v41' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018000D9F0) ----------------------------------------------------
__int64 __fastcall sub_18000D9F0(__int64 a1, unsigned int a2, int a3)
{
  __int64 v7; // rdx
  unsigned int v8; // r8d
  int v9; // r10d
  unsigned __int32 v10; // edx
  int v11; // r9d
  int v12; // ebp
  __int64 v13; // r11
  unsigned int v14; // r8d
  int v15; // r9d
  int v16; // r10d
  signed int v17; // edx
  int v18; // r9d
  unsigned __int32 v19; // esi
  __int64 v20; // rdx
  char v21; // al
  __int64 v22; // rdx
  int v23; // edi
  char Str[272]; // [rsp+20h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( a2 )
  {
    while ( 1 )
    {
      v7 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
      if ( *(_DWORD *)(a1 + 16) )
        v10 = _byteswap_ulong(v10);
      if ( v9 + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v10, (__int64)Str);
      if ( v11 + 1 >= a2 )
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v12 = 0;
    *(_DWORD *)(a1 + 8) = a3;
    if ( a2 )
    {
      while ( 1 )
      {
        memset(Str, 0, 0x104uLL);
        v13 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v14 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_DWORD *)(a1 + 16);
        v17 = *(_DWORD *)((unsigned int)(v15 - 4) + v13);
        if ( v16 )
          v17 = _byteswap_ulong(v17);
        if ( v15 + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v18 = *(_DWORD *)(a1 + 8);
        v19 = *(_DWORD *)((unsigned int)(v18 - 4) + v13);
        if ( v16 )
          v19 = _byteswap_ulong(v19);
        if ( v17 > 100 )
        {
          *(_DWORD *)(a1 + 8) = v17;
          v20 = 0LL;
          while ( *(_DWORD *)(a1 + 8) + 1 <= v14 )
          {
            v21 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v13);
            if ( v20 < 260 )
              Str[v20] = v21;
            ++v20;
            if ( !v21 )
            {
              if ( v20 >= 260 )
                Str[259] = 0;
              else
                Str[v20] = 0;
              *(_DWORD *)(a1 + 8) = v18;
              break;
            }
          }
        }
        if ( strstr(Str, "-skin") )
        {
          v23 = *(_DWORD *)(a1 + 8);
          if ( !(unsigned int)sub_18000DC10(a1, v22, v19) )
            return 0LL;
          *(_DWORD *)(a1 + 8) = v23;
        }
        if ( ++v12 >= a2 )
          return 1LL;
      }
    }
    else
    {
      return 1LL;
    }
  }
}
// 18000DA97: variable 'v11' is possibly undefined
// 18000DBBA: variable 'v22' is possibly undefined

//----- (000000018000DC10) ----------------------------------------------------
__int64 __fastcall sub_18000DC10(__int64 a1, __int64 a2, int a3)
{
  __int64 v5; // r9
  __int64 v6; // rdx
  int v7; // r10d
  int v8; // r11d
  unsigned __int16 v9; // r8
  int v10; // r10d
  __int16 v11; // ax
  int v12; // r10d
  unsigned __int32 v13; // r9d
  int v14; // edi

  if ( !a3 )
    return 1LL;
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !v5 )
    return 0LL;
  v6 = *(unsigned int *)(a1 + 12);
  if ( a3 + 4 > (unsigned int)v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = a3 + 4;
  if ( a3 + 6 > (unsigned int)v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_WORD *)((unsigned int)(v7 - 2) + v5);
  if ( v8 )
    v9 = __ROL2__(v9, 8);
  if ( v7 + 2 > (unsigned int)v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_WORD *)((unsigned int)(v10 - 2) + v5);
  if ( v8 )
    v11 = __ROL2__(v11, 8);
  if ( v11 || (int)qword_1800306F0 <= 844 )
  {
    if ( (unsigned int)sub_18000DD30(a1) )
      return 1LL;
  }
  else if ( v10 + 4 <= (unsigned int)v6 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v5);
    if ( v8 )
      v13 = _byteswap_ulong(v13);
    if ( v12 + 4 <= (unsigned int)v6 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 <= (unsigned int)v6 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v14 = *(_DWORD *)(a1 + 8);
        if ( (unsigned int)sub_18000DE40(a1, v6, v9, v13) )
        {
          *(_DWORD *)(a1 + 8) = v14;
          return 1LL;
        }
      }
    }
  }
  return 0LL;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018000DD30) ----------------------------------------------------
__int64 __fastcall sub_18000DD30(__int64 a1)
{
  unsigned int v2; // ecx
  unsigned int v3; // eax
  __int128 v5[4]; // [rsp+20h] [rbp-48h] BYREF

  v5[0] = xmmword_180028E60;
  v5[1] = xmmword_180028E70;
  v5[2] = xmmword_180028E80;
  v5[3] = xmmword_180028EA0;
  if ( !sub_18001D8D0(a1, (unsigned int *)v5) )
    return 0LL;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 4;
  if ( v3 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v3;
  if ( v3 + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v2 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  return 1LL;
}
// 180028E60: using guessed type __int128 xmmword_180028E60;
// 180028E70: using guessed type __int128 xmmword_180028E70;
// 180028E80: using guessed type __int128 xmmword_180028E80;
// 180028EA0: using guessed type __int128 xmmword_180028EA0;

//----- (000000018000DE40) ----------------------------------------------------
__int64 __fastcall sub_18000DE40(__int64 a1, __int64 a2, unsigned int a3, int a4)
{
  int v6; // edi
  int v7; // ecx
  __int64 v8; // rdx
  __int64 v9; // rdx
  unsigned int v10; // r8d
  int v11; // r10d
  int v12; // r9d
  unsigned int v13; // r14d
  unsigned int v14; // esi
  __int64 v15; // r8
  unsigned int v16; // edx
  int v17; // r10d
  int v18; // r9d
  unsigned int v19; // r12d
  int v20; // r10d
  unsigned int v21; // r11d
  int v22; // r10d
  unsigned int v23; // r15d
  int v24; // r10d
  int v25; // r10d
  int v26; // r10d
  unsigned int v27; // r13d
  unsigned int v28; // r10d
  int v29; // edx
  int v30; // ecx
  int v31; // r8d
  unsigned int v32; // esi
  int v33; // eax
  unsigned int v34; // r14d
  int v35; // esi
  __int64 v36; // rdx
  int v37; // r8d
  unsigned int v38; // eax
  int v39; // r9d
  signed int v40; // r15d
  int v41; // r10d
  __int64 v42; // r14
  unsigned int v43; // r8d
  unsigned int v44; // edx
  int v45; // r15d
  unsigned int v46; // esi
  int v47; // r9d
  int v48; // r10d
  int v49; // r11d
  unsigned int v50; // edx
  int v51; // ecx
  unsigned __int32 v52; // [rsp+20h] [rbp-E0h]
  unsigned int v53; // [rsp+20h] [rbp-E0h]
  int v54; // [rsp+24h] [rbp-DCh]
  int v55; // [rsp+24h] [rbp-DCh]
  int v56; // [rsp+28h] [rbp-D8h]
  int v57; // [rsp+28h] [rbp-D8h]
  int v58; // [rsp+2Ch] [rbp-D4h]
  int v59; // [rsp+2Ch] [rbp-D4h]
  unsigned __int32 v60; // [rsp+30h] [rbp-D0h]
  __int128 v61; // [rsp+38h] [rbp-C8h] BYREF
  int v62; // [rsp+48h] [rbp-B8h]
  int v63; // [rsp+4Ch] [rbp-B4h]
  unsigned int v64; // [rsp+50h] [rbp-B0h] BYREF
  __int64 v65; // [rsp+54h] [rbp-ACh]
  __int128 v66; // [rsp+60h] [rbp-A0h] BYREF
  __int128 v67; // [rsp+70h] [rbp-90h]
  __int128 v68; // [rsp+80h] [rbp-80h]
  __int128 v69; // [rsp+90h] [rbp-70h]
  char v70[272]; // [rsp+A0h] [rbp-60h] BYREF

  if ( !a4 )
    return 1LL;
  v6 = 0;
  *(_DWORD *)(a1 + 8) = a4;
  v7 = 0;
  if ( a3 )
  {
    v8 = *(_QWORD *)a1;
    while ( v8 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v7 >= a3 )
        goto LABEL_8;
    }
    return 0LL;
  }
LABEL_8:
  v9 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v10 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v11 = *(_DWORD *)(a1 + 8);
  v12 = *(_DWORD *)(a1 + 16);
  v62 = v11;
  v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
  if ( v12 )
    v13 = _byteswap_ulong(v13);
  if ( v11 + 4 > v10 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v9);
  if ( v12 )
    v14 = _byteswap_ulong(v14);
  v66 = xmmword_180028E60;
  v67 = xmmword_180028E70;
  v68 = xmmword_180028E80;
  v69 = xmmword_180028EA0;
  if ( !sub_18001D8D0(a1, (unsigned int *)&v66) )
    return 0LL;
  v15 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v16 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v17 = *(_DWORD *)(a1 + 8);
  v18 = *(_DWORD *)(a1 + 16);
  v54 = v17;
  v19 = *(_DWORD *)((unsigned int)(v17 - 4) + v15);
  if ( v18 )
    v19 = _byteswap_ulong(v19);
  if ( v17 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v15);
  if ( v18 )
    v21 = _byteswap_ulong(v21);
  if ( v20 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v22 = *(_DWORD *)(a1 + 8);
  v56 = v22;
  v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v15);
  if ( v18 )
    v23 = _byteswap_ulong(v23);
  if ( v22 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v24 = *(_DWORD *)(a1 + 8);
  v60 = *(_DWORD *)((unsigned int)(v24 - 4) + v15);
  if ( v18 )
    v60 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v24 - 4) + v15));
  if ( v24 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v63 = *(_DWORD *)(a1 + 8);
  if ( v63 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v25 = *(_DWORD *)(a1 + 8);
  v52 = *(_DWORD *)((unsigned int)(v25 - 4) + v15);
  if ( v18 )
    v52 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v25 - 4) + v15));
  if ( v25 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v26 = *(_DWORD *)(a1 + 8);
  v58 = v26;
  v27 = *(_DWORD *)((unsigned int)(v26 - 4) + v15);
  if ( v18 )
    v27 = _byteswap_ulong(v27);
  if ( v26 + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v28 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v15);
  if ( v18 )
    v28 = _byteswap_ulong(v28);
  if ( *(_DWORD *)(a1 + 8) + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v16 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v29 = v14 + v62;
  if ( !v14 )
    v29 = 0;
  v30 = v21 + v54;
  if ( !v21 )
    v30 = 0;
  v31 = v60 + v56;
  v55 = v30;
  if ( !v60 )
    v31 = 0;
  v32 = v52 + v63;
  v57 = v31;
  if ( !v52 )
    v32 = 0;
  v33 = v28 + v58;
  v53 = v32;
  if ( !v28 )
    v33 = 0;
  v59 = v33;
  if ( v29 )
  {
    v34 = v13 >> 4;
    v35 = 0;
    *(_DWORD *)(a1 + 8) = v29;
    if ( v34 )
    {
      while ( 1 )
      {
        v66 = xmmword_180028E60;
        v67 = xmmword_180028E70;
        v68 = xmmword_180028E80;
        v69 = xmmword_180028EA0;
        if ( !sub_18001D8D0(a1, (unsigned int *)&v66) )
          return 0LL;
        if ( ++v35 >= v34 )
        {
          v30 = v55;
          break;
        }
      }
    }
    v32 = v53;
  }
  if ( v30 )
  {
    *(_DWORD *)(a1 + 8) = v30;
    if ( v19 )
    {
      do
      {
        v36 = *(_QWORD *)a1;
        v37 = *(_DWORD *)(a1 + 8);
        if ( !*(_QWORD *)a1 || (unsigned int)(v37 + 4) > *(_DWORD *)(a1 + 12) )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v38 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v36);
        if ( *(_DWORD *)(a1 + 16) )
          v38 = _byteswap_ulong(v38);
        sub_180005050((__int64 *)a1, v38 + v37, (__int64)v70);
      }
      while ( v39 + 1 < v19 );
    }
  }
  if ( v57 )
  {
    v40 = v23 >> 2;
    *(_DWORD *)(a1 + 8) = v57;
    if ( v40 )
    {
      do
      {
        v61 = 0uLL;
        if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v61) )
          return 0LL;
      }
      while ( v41 + 1 < v40 );
    }
  }
  if ( !v32 )
    goto LABEL_85;
  v42 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = v32;
  if ( !v42 )
    return 0LL;
  v43 = *(_DWORD *)(a1 + 12);
  v44 = v32 + 4;
  if ( v32 + 4 > v43 )
    return 0LL;
  v45 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v44;
  v46 = *(_DWORD *)(v32 + v42);
  if ( v45 )
    v46 = _byteswap_ulong(v46);
  if ( v44 + 4 > v43 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v47 = 0;
  v48 = 0;
  if ( v46 )
  {
    while ( *(_DWORD *)(a1 + 8) + 4 <= v43 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      v49 = *(_DWORD *)(a1 + 8);
      v50 = *(_DWORD *)((unsigned int)(v49 - 4) + v42);
      if ( v45 )
        v50 = _byteswap_ulong(v50);
      if ( v49 + 4 > v43 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v47 += v50;
      if ( ++v48 >= v46 )
        goto LABEL_81;
    }
    return 0LL;
  }
LABEL_81:
  v51 = 0;
  if ( v47 > 0 )
  {
    while ( *(_DWORD *)(a1 + 8) + 4 <= v43 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v43 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v51 >= v47 )
        goto LABEL_85;
    }
    return 0LL;
  }
LABEL_85:
  if ( v59 )
  {
    *(_DWORD *)(a1 + 8) = v59;
    if ( v27 )
    {
      while ( 1 )
      {
        v65 = 0LL;
        v64 = 0;
        *(_QWORD *)((char *)&v61 + 4) = 0LL;
        LODWORD(v61) = 0;
        if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v64)
          || !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v61) )
        {
          break;
        }
        if ( ++v6 >= v27 )
          return 1LL;
      }
      return 0LL;
    }
  }
  return 1LL;
}
// 18000E211: variable 'v39' is possibly undefined
// 18000E24F: variable 'v41' is possibly undefined
// 180028E60: using guessed type __int128 xmmword_180028E60;
// 180028E70: using guessed type __int128 xmmword_180028E70;
// 180028E80: using guessed type __int128 xmmword_180028E80;
// 180028EA0: using guessed type __int128 xmmword_180028EA0;
// 18000DE40: using guessed type char var_140[272];

//----- (000000018000E400) ----------------------------------------------------
__int64 __fastcall sub_18000E400(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  unsigned int v6; // ebp
  int v7; // edi
  __int64 v8; // r9
  unsigned int v9; // r8d
  int v10; // r10d
  unsigned __int32 v11; // edx
  __int64 *v12; // rcx
  int v13; // r9d
  __int64 v14; // r8
  char *v15; // rcx
  _BYTE *v16; // rdx
  char v17; // al
  char *v18; // rcx
  _BYTE *v19; // rdx
  char v20; // al
  unsigned int v21; // esi
  __int64 v22; // r9
  __int64 v23; // r14
  unsigned int v24; // r8d
  int v25; // r11d
  unsigned __int32 v26; // r10d
  int v27; // edx
  unsigned __int32 v28; // edi
  int v29; // ebp
  __int64 *v30; // rcx
  __int64 v31; // rcx
  __int64 v32; // r8
  unsigned int v33; // r9d
  char v34[272]; // [rsp+20h] [rbp-258h] BYREF
  char v35[272]; // [rsp+130h] [rbp-148h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !a2 || (result = sub_180001B50((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = 0;
    if ( a2 )
    {
      while ( 1 )
      {
        memset(v34, 0, 0x104uLL);
        memset(v35, 0, 0x104uLL);
        v8 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v9 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v10 = *(_DWORD *)(a1 + 8);
        v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v8);
        if ( *(_DWORD *)(a1 + 16) )
          v11 = _byteswap_ulong(v11);
        if ( v10 + 4 > v9 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v11, (__int64)v34);
        sub_180005050(v12, v13, (__int64)v35);
        if ( qword_180030720 )
        {
          v14 = 760LL * v7;
          v15 = v34;
          v16 = (_BYTE *)(v14 + qword_180030720 + 232);
          do
          {
            v17 = *v15++;
            *v16++ = v17;
          }
          while ( v17 );
          v18 = v35;
          v19 = (_BYTE *)(v14 + qword_180030720 + 492);
          do
          {
            v20 = *v18++;
            *v19++ = v20;
          }
          while ( v20 );
        }
        if ( ++v7 >= a2 )
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      v21 = 0;
      *(_DWORD *)(a1 + 8) = v6;
      if ( a2 )
      {
        while ( 1 )
        {
          v22 = *(_QWORD *)a1;
          v23 = qword_180030720 + 760LL * (int)v21;
          if ( !*(_QWORD *)a1 )
            break;
          v24 = *(_DWORD *)(a1 + 12);
          if ( v6 + 4 > v24 )
            break;
          v25 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 8) = v6 + 4;
          v26 = *(_DWORD *)(v6 + v22);
          if ( v25 )
            v26 = _byteswap_ulong(v26);
          if ( v6 + 8 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v27 = *(_DWORD *)(a1 + 8);
          v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v22);
          if ( v25 )
            v28 = _byteswap_ulong(v28);
          if ( v27 + 4 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v29 = 0;
          if ( HIDWORD(qword_1800306F0) )
            v29 = *(_DWORD *)(a1 + 8);
          if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v26, (__int64)v35);
          sub_180005050(v30, v28, (__int64)v34);
          if ( HIDWORD(qword_1800306F0) )
          {
            if ( v33 )
              v33 += v29;
          }
          v6 = *(_DWORD *)(a1 + 8);
          sub_18000E710(v31, v23, v32, v33);
          ++v21;
          *(_DWORD *)(a1 + 8) = v6;
          if ( v21 >= a2 )
            return 1LL;
        }
        return 0LL;
      }
      else
      {
        return 1LL;
      }
    }
  }
  return result;
}
// 18000E532: variable 'v12' is possibly undefined
// 18000E532: variable 'v13' is possibly undefined
// 18000E68F: variable 'v30' is possibly undefined
// 18000E6A0: variable 'v33' is possibly undefined
// 18000E6AB: variable 'v31' is possibly undefined
// 18000E6AB: variable 'v32' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030720: using guessed type __int64 qword_180030720;

//----- (000000018000E710) ----------------------------------------------------
__int64 __fastcall sub_18000E710(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v7; // r11
  unsigned int v8; // r10d
  unsigned int v9; // edi
  unsigned int v10; // edx
  unsigned __int32 v11; // r9d
  unsigned __int32 v12; // ecx
  int v13; // esi
  int v14; // edi
  int v15; // edi

  if ( !a2 )
    return 0LL;
  if ( !a4 )
    return 1LL;
  v7 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a4;
  if ( !v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = a4 + 4;
  if ( a4 + 4 > v8 )
    return 0LL;
  v10 = *(_DWORD *)(a4 + v7);
  if ( *(_DWORD *)(a1 + 16) )
    v10 = _byteswap_ulong(v10);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if ( v10 )
  {
LABEL_21:
    if ( HIDWORD(qword_1800306F0) )
    {
      if ( v12 )
        v12 += v13;
      if ( v10 )
        v12 = *(_DWORD *)(a1 + 8);
    }
    else if ( v10 )
    {
      sub_18000F210(a1, a2);
      return 1LL;
    }
    sub_18000E860(a1, a2, a1, v11, v12);
    return 1LL;
  }
  *(_DWORD *)(a1 + 8) = v9;
  if ( v9 + 4 <= v8 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    v14 = *(_DWORD *)(a1 + 8);
    v11 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
    if ( *(_DWORD *)(a1 + 16) )
      v11 = _byteswap_ulong(v11);
    if ( HIDWORD(qword_1800306F0) )
      v13 = *(_DWORD *)(a1 + 8);
    if ( v14 + 4 <= v8 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      v15 = *(_DWORD *)(a1 + 8);
      v12 = *(_DWORD *)((unsigned int)(v15 - 4) + v7);
      if ( *(_DWORD *)(a1 + 16) )
        v12 = _byteswap_ulong(v12);
      if ( v15 + 4 <= v8 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 <= v8 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          goto LABEL_21;
        }
      }
    }
  }
  return 0LL;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018000E860) ----------------------------------------------------
__int64 __fastcall sub_18000E860(__int64 a1, __int64 a2, __int64 a3, int a4, int a5)
{
  unsigned int v7; // r12d
  unsigned int v8; // edx
  int v9; // ecx
  __int64 v10; // rdx
  unsigned int v11; // ecx
  unsigned int v12; // r13d
  int v13; // r14d
  __int64 v14; // rdi
  __int64 v15; // r10
  unsigned int v16; // r8d
  int v17; // r11d
  int v18; // r9d
  int v19; // esi
  int v20; // r15d
  int v21; // r8d
  unsigned int v22; // r8d
  int v23; // r10d
  int v24; // r9d
  int v25; // r11d
  int v26; // r10d
  unsigned int v27; // r8d
  int v28; // eax
  int v29; // eax
  unsigned int v30; // r15d
  int v31; // r9d
  __int64 v32; // r10
  unsigned int v33; // r8d
  int v34; // r9d
  __int64 v35; // rdi
  __int64 v36; // r11
  char *v37; // r10
  unsigned int v38; // r8d
  int v39; // r9d
  __int64 v40; // rdi
  __int64 v41; // r11
  char *v42; // r10
  unsigned int v43; // r8d
  int v44; // r9d
  __int64 v45; // rdi
  __int64 v46; // r11
  char *v47; // r10
  unsigned int v48; // r8d
  int v49; // r11d
  int v50; // r9d
  __int64 v51; // r10
  unsigned int v52; // r8d
  int v53; // eax
  int v54; // r10d
  int v55; // r11d
  int v56; // r9d
  unsigned int v57; // r8d
  __int64 v58; // r13
  __int64 v59; // r10
  unsigned int v60; // r8d
  int v61; // r11d
  unsigned int v62; // r9d
  int v63; // edi
  int v64; // r11d
  int v65; // r8d
  unsigned int v66; // r15d
  unsigned int v67; // esi
  __int64 v68; // r10
  __int64 v69; // rdx
  unsigned int v70; // r11d
  int v71; // r9d
  unsigned __int16 v72; // r8
  int v73; // edi
  int v74; // r14d
  unsigned __int16 v75; // r9
  unsigned __int16 v76; // dx
  __int64 v77; // rcx
  unsigned int v78; // eax
  unsigned int v79; // [rsp+30h] [rbp-D0h] BYREF
  __int64 v80; // [rsp+34h] [rbp-CCh]
  unsigned int v81; // [rsp+40h] [rbp-C0h] BYREF
  __int64 v82; // [rsp+44h] [rbp-BCh]
  int v83; // [rsp+50h] [rbp-B0h]
  int v84; // [rsp+54h] [rbp-ACh]
  __int64 v85; // [rsp+58h] [rbp-A8h]
  __int64 v86; // [rsp+60h] [rbp-A0h]
  __int64 v87; // [rsp+70h] [rbp-90h] BYREF
  char v88[4]; // [rsp+78h] [rbp-88h] BYREF
  char v89; // [rsp+7Ch] [rbp-84h] BYREF
  char v90; // [rsp+80h] [rbp-80h] BYREF
  char v91; // [rsp+84h] [rbp-7Ch] BYREF
  __int64 v92; // [rsp+120h] [rbp+20h]
  __int64 v93; // [rsp+128h] [rbp+28h]
  int v94; // [rsp+130h] [rbp+30h]

  v86 = -2LL;
  v85 = a2;
  if ( !a2 )
    return 0LL;
  if ( !a5 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a5;
  v7 = 0;
  if ( !HIDWORD(qword_1800306F0) )
  {
    if ( !*(_QWORD *)a1 )
      return 0LL;
    v8 = *(_DWORD *)(a1 + 12);
    if ( a5 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) = a5 + 4;
    if ( a5 + 8 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v9 = 0;
    if ( a4 != 2 )
    {
      while ( *(_DWORD *)(a1 + 8) + 4 <= v8 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( ++v9 >= (unsigned int)(a4 - 2) )
          goto LABEL_11;
      }
      return 0LL;
    }
  }
LABEL_11:
  v10 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v11 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v11 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v11 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v10);
  if ( *(_DWORD *)(a1 + 16) )
    v12 = (v12 << 24) | ((v12 & 0xFF00) << 8) | (v12 >> 8) & 0xFF00 | HIBYTE(v12);
  sub_1800010C0(&v87);
  v92 = 0LL;
  v93 = 0LL;
  v94 = 0;
  v13 = 0;
  v14 = *(_QWORD *)a1;
  v15 = 0LL;
  while ( v14 )
  {
    v16 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v16 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v17 = *(_DWORD *)(a1 + 8);
    v18 = *(_DWORD *)((unsigned int)(v17 - 4) + v14);
    v19 = *(_DWORD *)(a1 + 16);
    if ( v19 )
      v18 = (*(_DWORD *)((unsigned int)(v17 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v17 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v17 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v17 - 4) + v14));
    if ( v17 + 4 > v16 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v20 = *(_DWORD *)(a1 + 8);
    v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v14);
    if ( v19 )
      v21 = (*(_DWORD *)((unsigned int)(v20 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v20 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v20 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v20 - 4) + v14));
    if ( !v15 )
      v13 = v18;
    if ( v21 )
      *((_DWORD *)&v92 + v15) = v21 + v17;
    if ( ++v15 >= 5 )
    {
      HIDWORD(v87) = v13;
      v22 = *(_DWORD *)(a1 + 12);
      if ( v20 + 4 <= v22 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v23 = *(_DWORD *)(a1 + 8);
        v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v14);
        v25 = *(_DWORD *)(a1 + 16);
        if ( v25 )
          v24 = (*(_DWORD *)((unsigned int)(v23 - 4) + v14) << 24) | ((*(_DWORD *)((unsigned int)(v23 - 4) + v14) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v23 - 4) + v14) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v23 - 4) + v14));
        if ( v23 + 4 <= v22 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v22 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v26 = *(_DWORD *)(a1 + 8);
            if ( v26 + 4 <= v22 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v27 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v14);
              if ( v25 )
                v27 = (v27 << 24) | ((v27 & 0xFF00) << 8) | (v27 >> 8) & 0xFF00 | HIBYTE(v27);
              v28 = v20 + v24;
              if ( !v24 )
                v28 = 0;
              v83 = v28;
              v29 = v26 + v27;
              if ( !v27 )
                v29 = 0;
              v84 = v29;
              v80 = 0LL;
              v79 = 0;
              v82 = 0LL;
              v81 = 0;
              if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v79) )
              {
                if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v81) )
                {
                  if ( (_DWORD)v92 )
                    *(_DWORD *)(a1 + 8) = v92;
                  v30 = 0;
                  v31 = 0;
                  if ( v13 <= 0 )
                  {
LABEL_55:
                    if ( HIDWORD(v92) )
                      *(_DWORD *)(a1 + 8) = HIDWORD(v92);
                    v34 = 0;
                    if ( v13 <= 0 )
                    {
LABEL_66:
                      if ( (_DWORD)v93 )
                        *(_DWORD *)(a1 + 8) = v93;
                      v39 = 0;
                      if ( v13 <= 0 )
                      {
LABEL_77:
                        if ( HIDWORD(v93) )
                          *(_DWORD *)(a1 + 8) = HIDWORD(v93);
                        v44 = 0;
                        if ( v13 <= 0 )
                        {
LABEL_88:
                          if ( v94 )
                            *(_DWORD *)(a1 + 8) = v94;
                          v49 = 0;
                          v50 = 0;
                          if ( v13 <= 0 )
                          {
LABEL_103:
                            if ( v83 )
                              *(_DWORD *)(a1 + 8) = v83;
                            v56 = *(_DWORD *)(a1 + 8);
                            if ( v56 )
                            {
                              v57 = v12;
                              v58 = v85;
                              if ( !(unsigned int)sub_180005100(a1, v85, v57, v56, v30, (int *)&v87) )
                                break;
                            }
                            else
                            {
                              v58 = v85;
                            }
                            if ( v84 )
                              *(_DWORD *)(a1 + 8) = v84;
                            v59 = *(_QWORD *)a1;
                            if ( *(_QWORD *)a1 )
                            {
                              v60 = *(_DWORD *)(a1 + 12);
                              if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                              {
                                *(_DWORD *)(a1 + 8) += 4;
                                if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                {
                                  *(_DWORD *)(a1 + 8) += 4;
                                  if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                  {
                                    *(_DWORD *)(a1 + 8) += 4;
                                    if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                    {
                                      *(_DWORD *)(a1 + 8) += 4;
                                      if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                      {
                                        *(_DWORD *)(a1 + 8) += 4;
                                        if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                        {
                                          *(_DWORD *)(a1 + 8) += 4;
                                          if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                          {
                                            *(_DWORD *)(a1 + 8) += 4;
                                            if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                            {
                                              *(_DWORD *)(a1 + 8) += 4;
                                              if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                              {
                                                *(_DWORD *)(a1 + 8) += 4;
                                                if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                                {
                                                  *(_DWORD *)(a1 + 8) += 4;
                                                  if ( *(_DWORD *)(a1 + 8) + 4 <= v60 )
                                                  {
                                                    *(_DWORD *)(a1 + 8) += 4;
                                                    v61 = *(_DWORD *)(a1 + 8);
                                                    v62 = *(_DWORD *)((unsigned int)(v61 - 4) + v59);
                                                    v63 = *(_DWORD *)(a1 + 16);
                                                    if ( v63 )
                                                      v62 = (*(_DWORD *)((unsigned int)(v61 - 4) + v59) << 24) | ((*(_DWORD *)((unsigned int)(v61 - 4) + v59) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v61 - 4) + v59) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v61 - 4) + v59));
                                                    if ( v61 + 4 <= v60 )
                                                    {
                                                      *(_DWORD *)(a1 + 8) += 4;
                                                      v64 = *(_DWORD *)(a1 + 8);
                                                      v65 = *(_DWORD *)((unsigned int)(v64 - 4) + v59);
                                                      if ( v63 )
                                                        v65 = (*(_DWORD *)((unsigned int)(v64 - 4) + v59) << 24) | ((*(_DWORD *)((unsigned int)(v64 - 4) + v59) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v64 - 4) + v59) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v64 - 4) + v59));
                                                      if ( v65 )
                                                        *(_DWORD *)(a1 + 8) = v65 + v64 - 4;
                                                      v66 = v62 / 3;
                                                      if ( !(v62 / 3) || (unsigned int)sub_180001E80(v58, v66) )
                                                      {
                                                        v67 = 0;
                                                        if ( v66 )
                                                        {
                                                          v68 = 0LL;
                                                          while ( 1 )
                                                          {
                                                            v69 = *(_QWORD *)a1;
                                                            if ( !*(_QWORD *)a1 )
                                                              break;
                                                            v70 = *(_DWORD *)(a1 + 12);
                                                            if ( *(_DWORD *)(a1 + 8) + 2 > v70 )
                                                              break;
                                                            *(_DWORD *)(a1 + 8) += 2;
                                                            v71 = *(_DWORD *)(a1 + 8);
                                                            v72 = *(_WORD *)((unsigned int)(v71 - 2) + v69);
                                                            v73 = *(_DWORD *)(a1 + 16);
                                                            if ( v73 )
                                                              v72 = (v72 << 8) | HIBYTE(v72);
                                                            if ( v71 + 2 > v70 )
                                                              break;
                                                            *(_DWORD *)(a1 + 8) += 2;
                                                            v74 = *(_DWORD *)(a1 + 8);
                                                            v75 = *(_WORD *)((unsigned int)(v74 - 2) + v69);
                                                            if ( v73 )
                                                              v75 = (v75 << 8) | HIBYTE(v75);
                                                            if ( v74 + 2 > v70 )
                                                              break;
                                                            *(_DWORD *)(a1 + 8) += 2;
                                                            v76 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2)
                                                                           + v69);
                                                            if ( v73 )
                                                              v76 = (v76 << 8) | HIBYTE(v76);
                                                            v77 = *(_QWORD *)(v58 + 8);
                                                            if ( v77 )
                                                            {
                                                              *(_DWORD *)(v68 + v77 + 4) = v72;
                                                              *(_DWORD *)(v68 + *(_QWORD *)(v58 + 8) + 8) = v75;
                                                              *(_DWORD *)(v68 + *(_QWORD *)(v58 + 8) + 12) = v76;
                                                            }
                                                            ++v67;
                                                            v68 += 20LL;
                                                            if ( v67 >= v66 )
                                                              goto LABEL_147;
                                                          }
                                                        }
                                                        else
                                                        {
LABEL_147:
                                                          v78 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
                                                          if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
                                                            v78 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
                                                          *(_DWORD *)(a1 + 8) = v78;
                                                          v7 = 1;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                            v51 = *(_QWORD *)a1;
                            while ( v51 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                            {
                              *(_DWORD *)(a1 + 8) += 4;
                              v52 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v51);
                              if ( *(_DWORD *)(a1 + 16) )
                                v52 = (v52 << 24) | ((v52 & 0xFF00) << 8) | (v52 >> 8) & 0xFF00 | HIBYTE(v52);
                              v53 = v49 + 1;
                              if ( !v52 )
                                v53 = v49;
                              v49 = v53;
                              if ( ++v50 >= v13 )
                              {
                                if ( v53 <= 0 )
                                  goto LABEL_103;
                                while ( 1 )
                                {
                                  v82 = 0LL;
                                  v81 = 0;
                                  v80 = 0LL;
                                  v79 = 0;
                                  if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v81)
                                    || !(unsigned int)sub_18001D5C0((__int64 *)a1, &v79) )
                                  {
                                    goto LABEL_150;
                                  }
                                  if ( v54 + 1 >= v55 )
                                    goto LABEL_103;
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          v45 = *(_QWORD *)a1;
                          v46 = 0LL;
                          v47 = &v91;
                          while ( v45 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            v48 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v45);
                            if ( *(_DWORD *)(a1 + 16) )
                              v48 = (v48 << 24) | ((v48 & 0xFF00) << 8) | (v48 >> 8) & 0xFF00 | HIBYTE(v48);
                            if ( v44 < (int)v87 )
                              *(_DWORD *)v47 = v48;
                            ++v44;
                            ++v46;
                            v47 += 16;
                            if ( v46 >= v13 )
                              goto LABEL_88;
                          }
                        }
                      }
                      else
                      {
                        v40 = *(_QWORD *)a1;
                        v41 = 0LL;
                        v42 = &v90;
                        while ( v40 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v43 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v40);
                          if ( *(_DWORD *)(a1 + 16) )
                            v43 = (v43 << 24) | ((v43 & 0xFF00) << 8) | (v43 >> 8) & 0xFF00 | HIBYTE(v43);
                          if ( v39 < (int)v87 )
                            *(_DWORD *)v42 = v43;
                          ++v39;
                          ++v41;
                          v42 += 16;
                          if ( v41 >= v13 )
                            goto LABEL_77;
                        }
                      }
                    }
                    else
                    {
                      v35 = *(_QWORD *)a1;
                      v36 = 0LL;
                      v37 = &v89;
                      while ( v35 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        v38 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v35);
                        if ( *(_DWORD *)(a1 + 16) )
                          v38 = (v38 << 24) | ((v38 & 0xFF00) << 8) | (v38 >> 8) & 0xFF00 | HIBYTE(v38);
                        if ( v34 < (int)v87 )
                          *(_DWORD *)v37 = v38;
                        ++v34;
                        ++v36;
                        v37 += 16;
                        if ( v36 >= v13 )
                          goto LABEL_66;
                      }
                    }
                  }
                  else
                  {
                    v32 = *(_QWORD *)a1;
                    while ( v32 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      v33 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v32);
                      if ( *(_DWORD *)(a1 + 16) )
                        v33 = (v33 << 24) | ((v33 & 0xFF00) << 8) | (v33 >> 8) & 0xFF00 | HIBYTE(v33);
                      if ( !v31 )
                        v30 = v33;
                      if ( ++v31 >= v13 )
                        goto LABEL_55;
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    }
  }
LABEL_150:
  `eh vector destructor iterator'(v88, 0x10uLL, 0xAuLL, guard_check_icall_nop);
  return v7;
}
// 18000EA78: conditional instruction was optimized away because rdi.8!=0
// 18000EEBF: variable 'v54' is possibly undefined
// 18000EEC5: variable 'v55' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 18000E860: using guessed type char var_F8[4];

//----- (000000018000F210) ----------------------------------------------------
__int64 __fastcall sub_18000F210(__int64 a1, __int64 a2)
{
  __int64 v3; // rdx
  unsigned int v4; // eax
  unsigned int v5; // ecx
  unsigned int v6; // r8d
  unsigned int v7; // r12d
  int v8; // r14d
  __int64 v9; // r11
  __int64 v10; // r10
  unsigned int v11; // r8d
  int v12; // edi
  int v13; // r9d
  int v14; // esi
  int v15; // edi
  int v16; // r8d
  unsigned int v17; // r8d
  int v18; // r9d
  int v19; // r10d
  unsigned int v20; // r13d
  unsigned int v21; // r15d
  int v22; // r9d
  __int64 v23; // r10
  unsigned int v24; // r8d
  int v25; // r9d
  __int64 v26; // rdi
  __int64 v27; // r11
  char *v28; // r10
  unsigned int v29; // r8d
  int v30; // r9d
  __int64 v31; // rdi
  __int64 v32; // r11
  char *v33; // r10
  unsigned int v34; // r8d
  int v35; // r9d
  __int64 v36; // rdi
  __int64 v37; // r11
  char *v38; // r10
  unsigned int v39; // r8d
  int v40; // r11d
  int v41; // r9d
  __int64 v42; // r10
  unsigned int v43; // r8d
  int v44; // eax
  int v45; // r10d
  int v46; // r11d
  unsigned int v47; // r9d
  __int64 v48; // r10
  int v49; // r8d
  int v50; // r9d
  __int64 v51; // r9
  unsigned int v52; // r8d
  int v53; // r11d
  int v54; // r10d
  unsigned int v55; // r9d
  __int64 v56; // rdx
  unsigned int v57; // r10d
  unsigned int v58; // r8d
  unsigned int v59; // r15d
  __int64 v60; // r13
  unsigned int v61; // esi
  __int64 v62; // r10
  __int64 v63; // rdx
  unsigned int v64; // r11d
  int v65; // r9d
  unsigned __int16 v66; // r8
  int v67; // edi
  int v68; // r14d
  unsigned __int16 v69; // r9
  unsigned __int16 v70; // dx
  __int64 v71; // rcx
  unsigned int v72; // eax
  int v74; // [rsp+30h] [rbp-D0h]
  int v75; // [rsp+34h] [rbp-CCh]
  unsigned int v76; // [rsp+38h] [rbp-C8h] BYREF
  __int64 v77; // [rsp+3Ch] [rbp-C4h]
  unsigned int v78; // [rsp+48h] [rbp-B8h] BYREF
  __int64 v79; // [rsp+4Ch] [rbp-B4h]
  __int64 v80; // [rsp+58h] [rbp-A8h]
  __int64 v81; // [rsp+60h] [rbp-A0h]
  __int64 v82; // [rsp+70h] [rbp-90h] BYREF
  char v83[4]; // [rsp+78h] [rbp-88h] BYREF
  char v84; // [rsp+7Ch] [rbp-84h] BYREF
  char v85; // [rsp+80h] [rbp-80h] BYREF
  char v86; // [rsp+84h] [rbp-7Ch] BYREF
  __int64 v87; // [rsp+120h] [rbp+20h]
  __int64 v88; // [rsp+128h] [rbp+28h]
  int v89; // [rsp+130h] [rbp+30h]
  char v90[272]; // [rsp+140h] [rbp+40h] BYREF

  v81 = -2LL;
  v80 = a2;
  if ( !a2 )
    return 0LL;
  v3 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v4 = *(_DWORD *)(a1 + 8) + 4;
  v5 = *(_DWORD *)(a1 + 12);
  if ( v4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v4;
  if ( v4 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v75 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v3);
  if ( *(_DWORD *)(a1 + 16) )
  {
    v6 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v3);
    v75 = (v6 << 24) | ((v6 & 0xFF00) << 8) | (v6 >> 8) & 0xFF00 | HIBYTE(v6);
  }
  sub_1800010C0(&v82);
  v7 = 0;
  v87 = 0LL;
  v88 = 0LL;
  v89 = 0;
  v8 = 0;
  v9 = *(_QWORD *)a1;
  v10 = 0LL;
  while ( v9 )
  {
    v11 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v11 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v9);
    v14 = *(_DWORD *)(a1 + 16);
    if ( v14 )
      v13 = (*(_DWORD *)((unsigned int)(v12 - 4) + v9) << 24) | ((*(_DWORD *)((unsigned int)(v12 - 4) + v9) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v12 - 4) + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v12 - 4) + v9));
    if ( v12 + 4 > v11 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v15 = *(_DWORD *)(a1 + 8);
    v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v9);
    if ( v14 )
      v16 = (*(_DWORD *)((unsigned int)(v15 - 4) + v9) << 24) | ((*(_DWORD *)((unsigned int)(v15 - 4) + v9) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v15 - 4) + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v15 - 4) + v9));
    if ( !v10 )
      v8 = v13;
    if ( v16 )
      *((_DWORD *)&v87 + v10) = v16;
    if ( ++v10 >= 5 )
    {
      HIDWORD(v82) = v8;
      v17 = *(_DWORD *)(a1 + 12);
      if ( v15 + 4 <= v17 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v18 = *(_DWORD *)(a1 + 8);
        v74 = *(_DWORD *)((unsigned int)(v18 - 4) + v9);
        v19 = *(_DWORD *)(a1 + 16);
        if ( v19 )
          v74 = (*(_DWORD *)((unsigned int)(v18 - 4) + v9) << 24) | ((*(_DWORD *)((unsigned int)(v18 - 4) + v9) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v18 - 4) + v9) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v18 - 4) + v9));
        if ( v18 + 4 <= v17 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v17 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            if ( *(_DWORD *)(a1 + 8) + 4 <= v17 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v20 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v9);
              if ( v19 )
                v20 = (v20 << 24) | ((v20 & 0xFF00) << 8) | (v20 >> 8) & 0xFF00 | HIBYTE(v20);
              v77 = 0LL;
              v76 = 0;
              v79 = 0LL;
              v78 = 0;
              if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v76) )
              {
                if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v78) )
                {
                  if ( (_DWORD)v87 )
                    *(_DWORD *)(a1 + 8) = v87;
                  v21 = 0;
                  v22 = 0;
                  if ( v8 <= 0 )
                  {
LABEL_42:
                    if ( HIDWORD(v87) )
                      *(_DWORD *)(a1 + 8) = HIDWORD(v87);
                    v25 = 0;
                    if ( v8 <= 0 )
                    {
LABEL_53:
                      if ( (_DWORD)v88 )
                        *(_DWORD *)(a1 + 8) = v88;
                      v30 = 0;
                      if ( v8 <= 0 )
                      {
LABEL_64:
                        if ( HIDWORD(v88) )
                          *(_DWORD *)(a1 + 8) = HIDWORD(v88);
                        v35 = 0;
                        if ( v8 <= 0 )
                        {
LABEL_75:
                          if ( v89 )
                            *(_DWORD *)(a1 + 8) = v89;
                          v40 = 0;
                          v41 = 0;
                          if ( v8 <= 0 )
                          {
LABEL_90:
                            if ( v74 )
                              *(_DWORD *)(a1 + 8) = v74;
                            if ( *(_QWORD *)a1 )
                            {
                              v47 = *(_DWORD *)(a1 + 12);
                              if ( *(_DWORD *)(a1 + 8) + 4 <= v47 )
                              {
                                v48 = *(unsigned int *)(a1 + 8);
                                v49 = *(_DWORD *)(v48 + *(_QWORD *)a1);
                                if ( *(_DWORD *)(a1 + 16) )
                                  v49 = (*(_DWORD *)(v48 + *(_QWORD *)a1) << 24) | ((*(_DWORD *)(v48 + *(_QWORD *)a1) & 0xFF00) << 8) | (*(_DWORD *)(v48 + *(_QWORD *)a1) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v48 + *(_QWORD *)a1));
                                if ( v49 == 1 )
                                {
                                  if ( (int)v48 + 4 > v47 )
                                    break;
                                  *(_DWORD *)(a1 + 8) += 4;
                                }
                                v50 = *(_DWORD *)(a1 + 8);
                                if ( !v50 || (unsigned int)sub_180005100(a1, v80, v75, v50, v21, (int *)&v82) )
                                {
                                  if ( v20 )
                                    *(_DWORD *)(a1 + 8) = v20;
                                  v51 = *(_QWORD *)a1;
                                  if ( *(_QWORD *)a1 )
                                  {
                                    v52 = *(_DWORD *)(a1 + 12);
                                    if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                    {
                                      *(_DWORD *)(a1 + 8) += 4;
                                      if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                      {
                                        *(_DWORD *)(a1 + 8) += 4;
                                        v53 = *(_DWORD *)(a1 + 8);
                                        v54 = *(_DWORD *)((unsigned int)(v53 - 4) + v51);
                                        if ( *(_DWORD *)(a1 + 16) )
                                          v54 = (*(_DWORD *)((unsigned int)(v53 - 4) + v51) << 24) | ((*(_DWORD *)((unsigned int)(v53 - 4) + v51) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v53 - 4) + v51) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v53 - 4) + v51));
                                        if ( v53 + 4 <= v52 )
                                        {
                                          *(_DWORD *)(a1 + 8) += 4;
                                          if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                          {
                                            *(_DWORD *)(a1 + 8) += 4;
                                            if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                            {
                                              *(_DWORD *)(a1 + 8) += 4;
                                              if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                              {
                                                *(_DWORD *)(a1 + 8) += 4;
                                                if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                                {
                                                  *(_DWORD *)(a1 + 8) += 4;
                                                  if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                                  {
                                                    *(_DWORD *)(a1 + 8) += 4;
                                                    if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                                    {
                                                      *(_DWORD *)(a1 + 8) += 4;
                                                      if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                                      {
                                                        *(_DWORD *)(a1 + 8) += 4;
                                                        if ( *(_DWORD *)(a1 + 8) + 4 <= v52 )
                                                        {
                                                          *(_DWORD *)(a1 + 8) += 4;
                                                          sub_180005050((__int64 *)a1, v54, (__int64)v90);
                                                          v56 = *(_QWORD *)a1;
                                                          if ( *(_QWORD *)a1 )
                                                          {
                                                            v57 = *(_DWORD *)(a1 + 12);
                                                            if ( *(_DWORD *)(a1 + 8) + 4 <= v57 )
                                                            {
                                                              *(_DWORD *)(a1 + 8) += 4;
                                                              v58 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4)
                                                                              + v56);
                                                              if ( *(_DWORD *)(a1 + 16) )
                                                                v58 = (v58 << 24) | ((v58 & 0xFF00) << 8) | (v58 >> 8) & 0xFF00 | HIBYTE(v58);
                                                              if ( v58 )
                                                                *(_DWORD *)(a1 + 8) = v58;
                                                              if ( *(_DWORD *)(a1 + 8) + 4 <= v57 )
                                                              {
                                                                *(_DWORD *)(a1 + 8) += 4;
                                                                v59 = v55 / 3;
                                                                v60 = v80;
                                                                if ( !(v55 / 3) || (unsigned int)sub_180001E80(v80, v59) )
                                                                {
                                                                  v61 = 0;
                                                                  if ( v59 )
                                                                  {
                                                                    v62 = 0LL;
                                                                    while ( 1 )
                                                                    {
                                                                      v63 = *(_QWORD *)a1;
                                                                      if ( !*(_QWORD *)a1 )
                                                                        break;
                                                                      v64 = *(_DWORD *)(a1 + 12);
                                                                      if ( *(_DWORD *)(a1 + 8) + 2 > v64 )
                                                                        break;
                                                                      *(_DWORD *)(a1 + 8) += 2;
                                                                      v65 = *(_DWORD *)(a1 + 8);
                                                                      v66 = *(_WORD *)((unsigned int)(v65 - 2) + v63);
                                                                      v67 = *(_DWORD *)(a1 + 16);
                                                                      if ( v67 )
                                                                        v66 = (v66 << 8) | HIBYTE(v66);
                                                                      if ( v65 + 2 > v64 )
                                                                        break;
                                                                      *(_DWORD *)(a1 + 8) += 2;
                                                                      v68 = *(_DWORD *)(a1 + 8);
                                                                      v69 = *(_WORD *)((unsigned int)(v68 - 2) + v63);
                                                                      if ( v67 )
                                                                        v69 = (v69 << 8) | HIBYTE(v69);
                                                                      if ( v68 + 2 > v64 )
                                                                        break;
                                                                      *(_DWORD *)(a1 + 8) += 2;
                                                                      v70 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2)
                                                                                     + v63);
                                                                      if ( v67 )
                                                                        v70 = (v70 << 8) | HIBYTE(v70);
                                                                      v71 = *(_QWORD *)(v60 + 8);
                                                                      if ( v71 )
                                                                      {
                                                                        *(_DWORD *)(v62 + v71 + 4) = v66;
                                                                        *(_DWORD *)(v62 + *(_QWORD *)(v60 + 8) + 8) = v69;
                                                                        *(_DWORD *)(v62 + *(_QWORD *)(v60 + 8) + 12) = v70;
                                                                      }
                                                                      ++v61;
                                                                      v62 += 20LL;
                                                                      if ( v61 >= v59 )
                                                                        goto LABEL_141;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
LABEL_141:
                                                                    v72 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
                                                                    if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
                                                                      v72 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
                                                                    *(_DWORD *)(a1 + 8) = v72;
                                                                    v7 = 1;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                            v42 = *(_QWORD *)a1;
                            while ( v42 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                            {
                              *(_DWORD *)(a1 + 8) += 4;
                              v43 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v42);
                              if ( *(_DWORD *)(a1 + 16) )
                                v43 = (v43 << 24) | ((v43 & 0xFF00) << 8) | (v43 >> 8) & 0xFF00 | HIBYTE(v43);
                              v44 = v40 + 1;
                              if ( !v43 )
                                v44 = v40;
                              v40 = v44;
                              if ( ++v41 >= v8 )
                              {
                                if ( v44 <= 0 )
                                  goto LABEL_90;
                                while ( 1 )
                                {
                                  v79 = 0LL;
                                  v78 = 0;
                                  v77 = 0LL;
                                  v76 = 0;
                                  if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v78)
                                    || !(unsigned int)sub_18001D5C0((__int64 *)a1, &v76) )
                                  {
                                    goto LABEL_144;
                                  }
                                  if ( v45 + 1 >= v46 )
                                    goto LABEL_90;
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          v36 = *(_QWORD *)a1;
                          v37 = 0LL;
                          v38 = &v86;
                          while ( v36 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            v39 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v36);
                            if ( *(_DWORD *)(a1 + 16) )
                              v39 = (v39 << 24) | ((v39 & 0xFF00) << 8) | (v39 >> 8) & 0xFF00 | HIBYTE(v39);
                            if ( v35 < (int)v82 )
                              *(_DWORD *)v38 = v39;
                            ++v35;
                            ++v37;
                            v38 += 16;
                            if ( v37 >= v8 )
                              goto LABEL_75;
                          }
                        }
                      }
                      else
                      {
                        v31 = *(_QWORD *)a1;
                        v32 = 0LL;
                        v33 = &v85;
                        while ( v31 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v34 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v31);
                          if ( *(_DWORD *)(a1 + 16) )
                            v34 = (v34 << 24) | ((v34 & 0xFF00) << 8) | (v34 >> 8) & 0xFF00 | HIBYTE(v34);
                          if ( v30 < (int)v82 )
                            *(_DWORD *)v33 = v34;
                          ++v30;
                          ++v32;
                          v33 += 16;
                          if ( v32 >= v8 )
                            goto LABEL_64;
                        }
                      }
                    }
                    else
                    {
                      v26 = *(_QWORD *)a1;
                      v27 = 0LL;
                      v28 = &v84;
                      while ( v26 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        v29 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v26);
                        if ( *(_DWORD *)(a1 + 16) )
                          v29 = (v29 << 24) | ((v29 & 0xFF00) << 8) | (v29 >> 8) & 0xFF00 | HIBYTE(v29);
                        if ( v25 < (int)v82 )
                          *(_DWORD *)v28 = v29;
                        ++v25;
                        ++v27;
                        v28 += 16;
                        if ( v27 >= v8 )
                          goto LABEL_53;
                      }
                    }
                  }
                  else
                  {
                    v23 = *(_QWORD *)a1;
                    while ( v23 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      v24 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v23);
                      if ( *(_DWORD *)(a1 + 16) )
                        v24 = (v24 << 24) | ((v24 & 0xFF00) << 8) | (v24 >> 8) & 0xFF00 | HIBYTE(v24);
                      if ( !v22 )
                        v21 = v24;
                      if ( ++v22 >= v8 )
                        goto LABEL_42;
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    }
  }
LABEL_144:
  `eh vector destructor iterator'(v83, 0x10uLL, 0xAuLL, guard_check_icall_nop);
  return v7;
}
// 18000F3BD: conditional instruction was optimized away because r11.8!=0
// 18000F7CE: variable 'v45' is possibly undefined
// 18000F7D4: variable 'v46' is possibly undefined
// 18000FA72: variable 'v55' is possibly undefined
// 18000F210: using guessed type char var_150[272];
// 18000F210: using guessed type char var_218[4];

//----- (000000018000FBF0) ----------------------------------------------------
__int64 __fastcall sub_18000FBF0(__int64 a1, _DWORD *a2, __int64 a3)
{
  int v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // eax
  int v9; // eax
  unsigned int v10; // eax
  int v11; // r8d
  int v12; // r8d
  unsigned int v13; // eax
  int v14; // edx
  unsigned int v15; // edi
  unsigned int v16; // edx
  unsigned int v17; // r15d
  unsigned int v18; // r14d
  int v19; // esi
  __int64 v20; // r8
  unsigned int v21; // r9d
  int v22; // r11d
  int v23; // r10d
  unsigned __int32 v24; // edx
  int v25; // r11d
  unsigned __int32 v26; // edi
  __int64 *v27; // rcx
  __int64 *v28; // rcx
  int v29; // r9d
  __int64 v30; // rdx
  int v31; // ecx
  __int64 v32; // rdx
  __int64 v33[3]; // [rsp+30h] [rbp-D0h] BYREF
  __int64 v34; // [rsp+48h] [rbp-B8h]
  __int64 v35; // [rsp+50h] [rbp-B0h]
  __int64 v36; // [rsp+58h] [rbp-A8h]
  __int64 v37; // [rsp+60h] [rbp-A0h]
  __int64 v38; // [rsp+68h] [rbp-98h]
  __int64 v39; // [rsp+70h] [rbp-90h]
  __int64 v40; // [rsp+78h] [rbp-88h]
  CHAR MultiByteStr[272]; // [rsp+80h] [rbp-80h] BYREF
  char v42[272]; // [rsp+190h] [rbp+90h] BYREF
  char v43[272]; // [rsp+2A0h] [rbp+1A0h] BYREF

  if ( !a3 )
    return 0LL;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  v8 = v6 + 4;
  if ( v8 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v8;
  if ( v8 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v9 = a2[2];
  if ( !v9 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v9;
  v10 = v9 + 4;
  v11 = a2[4];
  if ( v10 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10;
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = v11 - 5;
  v13 = *(_DWORD *)(a1 + 8);
  v14 = 0;
  if ( v12 <= 0 )
  {
LABEL_19:
    v15 = a2[7];
    if ( v13 < v15 )
    {
      while ( (unsigned int)sub_180004F90((__int64 *)a1, (__int64)MultiByteStr) )
      {
        if ( *(_DWORD *)(a1 + 8) >= v15 )
          goto LABEL_22;
      }
      return 0LL;
    }
LABEL_22:
    v16 = a2[7];
    memset(v33, 0, sizeof(v33));
    v34 = 0LL;
    v35 = 0LL;
    v36 = 0LL;
    v37 = 0LL;
    v38 = 0LL;
    v39 = 0LL;
    v40 = 0LL;
    if ( !v16 || !(unsigned int)sub_18000FFA0(a1, v16, v33) )
      return 0;
    v17 = 1;
    HIDWORD(qword_1800306F0) = 1;
    if ( HIDWORD(v34) )
    {
      v18 = v34;
      *(_DWORD *)(a1 + 8) = HIDWORD(v34);
      if ( v18 && !(unsigned int)sub_180001FD0((__int64)&qword_1800306F0, v18) )
        return 0;
      v19 = 0;
      if ( v18 )
      {
        do
        {
          memset(MultiByteStr, 0, 0x104uLL);
          v20 = *(_QWORD *)a1;
          if ( !*(_QWORD *)a1 )
            return 0;
          v21 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v21 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          v22 = *(_DWORD *)(a1 + 8);
          v23 = *(_DWORD *)(a1 + 16);
          v24 = *(_DWORD *)((unsigned int)(v22 - 4) + v20);
          if ( v23 )
            v24 = _byteswap_ulong(v24);
          if ( v22 + 4 > v21 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          v25 = *(_DWORD *)(a1 + 8);
          v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v20);
          if ( v23 )
            v26 = _byteswap_ulong(v26);
          if ( v25 + 4 > v21 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v24, (__int64)MultiByteStr);
          sub_180005050(v27, v26, (__int64)v42);
          sub_180005050(v28, v29, (__int64)v43);
          if ( qword_180030700 )
            MultiByteToWideChar(0, 1u, MultiByteStr, -1, (LPWSTR)qword_180030700 + 260 * v19, 255);
        }
        while ( ++v19 < v18 );
      }
    }
    if ( HIDWORD(v35) )
    {
      v30 = *(_QWORD *)a1;
      v31 = 0;
      *(_DWORD *)(a1 + 8) = HIDWORD(v35);
      while ( v30 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( ++v31 >= 32 )
          goto LABEL_44;
      }
    }
    else
    {
LABEL_44:
      if ( (unsigned int)sub_18000D570(a1, v36, SHIDWORD(v36))
        && (unsigned int)sub_18000E400(a1, v37, SHIDWORD(v37))
        && (unsigned int)sub_18000B660(a1, v32, HIDWORD(v39)) )
      {
        return v17;
      }
    }
    return 0;
  }
  while ( *(_DWORD *)(a1 + 8) + 4 <= v7 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    ++v14;
    v13 = *(_DWORD *)(a1 + 8);
    if ( v14 >= v12 )
      goto LABEL_19;
  }
  return 0LL;
}
// 18000FE8B: variable 'v27' is possibly undefined
// 18000FE9A: variable 'v28' is possibly undefined
// 18000FE9A: variable 'v29' is possibly undefined
// 18000FF41: variable 'v32' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 18000FBF0: using guessed type char var_250[272];
// 18000FBF0: using guessed type char var_140[272];

//----- (000000018000FFA0) ----------------------------------------------------
__int64 __fastcall sub_18000FFA0(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r9
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r9
  int v8; // edx
  int v9; // r8d
  unsigned int v10; // eax
  unsigned int v11; // r8d
  int v12; // r10d
  int v13; // r11d
  int v14; // r10d
  unsigned int v15; // r13d
  int v16; // r10d
  int v17; // r10d
  unsigned int v18; // r15d
  int v19; // r10d
  int v20; // r10d
  int v21; // r10d
  int v22; // r10d
  int v23; // r10d
  unsigned int v24; // r14d
  int v25; // r10d
  int v26; // r10d
  int v27; // r10d
  unsigned int v28; // ebp
  int v29; // edx
  int v30; // edx
  int v31; // edx
  int v32; // edx
  int v33; // edx
  int v34; // edx
  int v35; // r10d
  int v36; // r10d
  unsigned int v37; // esi
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // edx
  int v42; // edx
  int v43; // edx
  int v44; // edi
  unsigned int v45; // r12d
  int v46; // edi
  unsigned int v47; // r10d
  int v48; // edx
  int v49; // edx
  int v50; // edx
  int v51; // edx
  int v52; // edx
  unsigned __int32 v53; // eax
  __int64 result; // rax
  unsigned __int32 v55; // [rsp+20h] [rbp-198h]
  unsigned __int32 v56; // [rsp+24h] [rbp-194h]
  unsigned __int32 v57; // [rsp+28h] [rbp-190h]
  unsigned __int32 v58; // [rsp+2Ch] [rbp-18Ch]
  unsigned __int32 v59; // [rsp+30h] [rbp-188h]
  unsigned __int32 v60; // [rsp+34h] [rbp-184h]
  unsigned __int32 v61; // [rsp+38h] [rbp-180h]
  int v62; // [rsp+3Ch] [rbp-17Ch]
  int v63; // [rsp+40h] [rbp-178h]
  int v64; // [rsp+44h] [rbp-174h]
  int v65; // [rsp+48h] [rbp-170h]
  int v66; // [rsp+4Ch] [rbp-16Ch]
  int v67; // [rsp+50h] [rbp-168h]
  int v68; // [rsp+54h] [rbp-164h]
  char v69[272]; // [rsp+60h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v69);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v11 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= 19 )
          {
            if ( v10 + 4 <= v11 )
            {
              *((_DWORD *)v6 + 2) += 4;
              v12 = *((_DWORD *)v6 + 2);
              v13 = *((_DWORD *)v6 + 4);
              v56 = *(_DWORD *)((unsigned int)(v12 - 4) + v7);
              if ( v13 )
                v56 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v7));
              v62 = *((_DWORD *)v6 + 2);
              if ( v12 + 4 <= v11 )
              {
                v14 = v12 + 4;
                *((_DWORD *)v6 + 2) = v14;
                v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
                if ( v13 )
                  v15 = _byteswap_ulong(v15);
                if ( v14 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v16 = *((_DWORD *)v6 + 2);
                v57 = *(_DWORD *)((unsigned int)(v16 - 4) + v7);
                if ( v13 )
                  v57 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v16 - 4) + v7));
                v64 = *((_DWORD *)v6 + 2);
                if ( v16 + 4 > v11 )
                  return 0LL;
                v17 = v16 + 4;
                *((_DWORD *)v6 + 2) = v17;
                v18 = *(_DWORD *)((unsigned int)(v17 - 4) + v7);
                if ( v13 )
                  v18 = _byteswap_ulong(v18);
                if ( v17 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v19 = *((_DWORD *)v6 + 2);
                v58 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
                if ( v13 )
                  v58 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v7));
                v63 = *((_DWORD *)v6 + 2);
                if ( v19 + 4 > v11 )
                  return 0LL;
                v20 = v19 + 4;
                *((_DWORD *)v6 + 2) = v20;
                v55 = *(_DWORD *)((unsigned int)(v20 - 4) + v7);
                if ( v13 )
                  v55 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v7));
                if ( v20 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v21 = *((_DWORD *)v6 + 2);
                if ( v21 + 4 > v11 )
                  return 0LL;
                v22 = v21 + 4;
                *((_DWORD *)v6 + 2) = v22;
                v65 = v22;
                v59 = *(_DWORD *)((unsigned int)(v22 - 4) + v7);
                if ( v13 )
                  v59 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v7));
                if ( v22 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v23 = *((_DWORD *)v6 + 2);
                v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v7);
                if ( v13 )
                  v24 = _byteswap_ulong(v24);
                if ( v23 + 4 > v11 )
                  return 0LL;
                v25 = v23 + 4;
                *((_DWORD *)v6 + 2) = v25;
                if ( v25 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v26 = *((_DWORD *)v6 + 2);
                v60 = *(_DWORD *)((unsigned int)(v26 - 4) + v7);
                if ( v13 )
                  v60 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v7));
                v66 = *((_DWORD *)v6 + 2);
                if ( v26 + 4 > v11 )
                  return 0LL;
                v27 = v26 + 4;
                *((_DWORD *)v6 + 2) = v27;
                v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v7);
                if ( v13 )
                  v28 = _byteswap_ulong(v28);
                if ( v27 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v29 = *((_DWORD *)v6 + 2);
                if ( v29 + 4 > v11 )
                  return 0LL;
                v30 = v29 + 4;
                *((_DWORD *)v6 + 2) = v30;
                if ( v30 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v31 = *((_DWORD *)v6 + 2);
                if ( v31 + 4 > v11 )
                  return 0LL;
                v32 = v31 + 4;
                *((_DWORD *)v6 + 2) = v32;
                if ( v32 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v33 = *((_DWORD *)v6 + 2);
                if ( v33 + 4 > v11 )
                  return 0LL;
                v34 = v33 + 4;
                *((_DWORD *)v6 + 2) = v34;
                if ( v34 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v35 = *((_DWORD *)v6 + 2);
                v61 = *(_DWORD *)((unsigned int)(v35 - 4) + v7);
                if ( v13 )
                  v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v35 - 4) + v7));
                v67 = *((_DWORD *)v6 + 2);
                if ( v35 + 4 > v11 )
                  return 0LL;
                v36 = v35 + 4;
                *((_DWORD *)v6 + 2) = v36;
                v37 = *(_DWORD *)((unsigned int)(v36 - 4) + v7);
                if ( v13 )
                  v37 = _byteswap_ulong(v37);
                if ( v36 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v38 = *((_DWORD *)v6 + 2);
                if ( v38 + 4 > v11 )
                  return 0LL;
                v39 = v38 + 4;
                *((_DWORD *)v6 + 2) = v39;
                if ( v39 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v40 = *((_DWORD *)v6 + 2);
                if ( v40 + 4 > v11 )
                  return 0LL;
                v41 = v40 + 4;
                *((_DWORD *)v6 + 2) = v41;
                if ( v41 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v42 = *((_DWORD *)v6 + 2);
                if ( v42 + 4 > v11 )
                  return 0LL;
                v43 = v42 + 4;
                *((_DWORD *)v6 + 2) = v43;
                if ( v43 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v44 = *((_DWORD *)v6 + 2);
                v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v7);
                if ( v13 )
                  v45 = _byteswap_ulong(v45);
                v68 = *((_DWORD *)v6 + 2);
                if ( v44 + 4 > v11 )
                  return 0LL;
                v46 = v44 + 4;
                *((_DWORD *)v6 + 2) = v46;
                v47 = *(_DWORD *)((unsigned int)(v46 - 4) + v7);
                if ( v13 )
                  v47 = _byteswap_ulong(v47);
                if ( v46 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v48 = *((_DWORD *)v6 + 2);
                if ( v48 + 4 > v11 )
                  return 0LL;
                v49 = v48 + 4;
                *((_DWORD *)v6 + 2) = v49;
                if ( v49 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v50 = *((_DWORD *)v6 + 2);
                if ( v50 + 4 > v11 )
                  return 0LL;
                v51 = v50 + 4;
                *((_DWORD *)v6 + 2) = v51;
                if ( v51 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v52 = *((_DWORD *)v6 + 2);
                if ( v52 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) = v52 + 4;
                if ( v15 )
                  v15 += v62;
                v53 = v55;
                if ( v55 )
                  v53 = v63 + v55;
                if ( v18 )
                  v18 += v64;
                if ( v24 )
                  v24 += v65;
                if ( v28 )
                  v28 += v66;
                if ( v37 )
                  v37 += v67;
                if ( v47 )
                  v47 += v68;
                a3[11] = v53;
                a3[12] = v59;
                a3[6] = v56;
                a3[14] = v60;
                a3[8] = v57;
                a3[16] = v61;
                result = 1LL;
                a3[7] = v15;
                a3[9] = v18;
                a3[10] = v58;
                a3[13] = v24;
                a3[15] = v28;
                a3[17] = v37;
                a3[18] = v45;
                a3[19] = v47;
                return result;
              }
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 180010033: conditional instruction was optimized away because r9.8!=0
// 180010052: conditional instruction was optimized away because r9.8!=0
// 18000FFF5: variable 'v6' is possibly undefined
// 18000FFA0: using guessed type char var_158[272];

//----- (0000000180010560) ----------------------------------------------------
void __fastcall sub_180010560(char *a1)
{
  *a1 = 0;
  *(_QWORD *)(a1 + 260) = 0LL;
  *(_QWORD *)(a1 + 268) = 0LL;
  *(_QWORD *)(a1 + 276) = 0LL;
}

//----- (0000000180010580) ----------------------------------------------------
__int64 __fastcall sub_180010580(__int64 a1, _DWORD *a2)
{
  __int64 v2; // r11
  unsigned int v5; // r10d
  unsigned int v6; // ecx
  int v7; // eax
  int v8; // edx
  int v9; // ecx
  unsigned int v10; // eax
  int v11; // edx
  int v12; // ecx
  unsigned int v13; // esi
  unsigned int v14; // r9d
  unsigned int v15; // r8d
  __int64 v16; // rdx
  CHAR v17; // al
  unsigned int v18; // ecx
  unsigned int v19; // edx
  unsigned int v21; // r14d
  int v22; // esi
  __int64 v23; // r8
  unsigned int v24; // r9d
  int v25; // edx
  int v26; // r11d
  unsigned __int32 v27; // r10d
  unsigned int v28; // edx
  unsigned __int32 v29; // edi
  __int64 *v30; // rcx
  __int64 *v31; // rcx
  int v32; // r9d
  int v33; // ecx
  unsigned int v34; // r15d
  unsigned int v35; // r14d
  int v36; // edi
  __int64 v37; // r8
  unsigned int v38; // r9d
  int v39; // edx
  int v40; // r11d
  unsigned __int32 v41; // r10d
  unsigned int v42; // edx
  unsigned __int32 v43; // esi
  __int64 *v44; // rcx
  __int64 *v45; // rcx
  int v46; // r9d
  __int64 v47; // rdx
  int v48; // ecx
  __int64 v49; // rdx
  __int64 v50[2]; // [rsp+30h] [rbp-D0h] BYREF
  __int64 v51; // [rsp+40h] [rbp-C0h]
  __int64 v52; // [rsp+48h] [rbp-B8h]
  __int64 v53; // [rsp+50h] [rbp-B0h]
  __int64 v54; // [rsp+58h] [rbp-A8h]
  __int64 v55; // [rsp+60h] [rbp-A0h]
  __int64 v56; // [rsp+68h] [rbp-98h]
  __int64 v57; // [rsp+70h] [rbp-90h]
  __int64 v58; // [rsp+78h] [rbp-88h]
  CHAR MultiByteStr[272]; // [rsp+80h] [rbp-80h] BYREF
  char v60[272]; // [rsp+190h] [rbp+90h] BYREF
  char v61[272]; // [rsp+2A0h] [rbp+1A0h] BYREF

  v2 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) + 4;
  if ( v6 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v6;
  if ( v6 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v6 + 4;
  v7 = a2[2];
  if ( !v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = a2[4];
  if ( v7 + 4 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v7 + 4;
  if ( v7 + 8 > v5 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v7 + 8;
  if ( v7 + 12 > v5 )
    return 0LL;
  v9 = v7 + 12;
  *(_DWORD *)(a1 + 8) = v7 + 12;
  if ( v7 + 16 > v5 )
    return 0LL;
  v10 = v7 + 16;
  *(_DWORD *)(a1 + 8) = v9 + 4;
  v11 = v8 - 4;
  v12 = 0;
  if ( v11 <= 0 )
  {
LABEL_12:
    v13 = a2[7];
    if ( v10 < v13 )
    {
      while ( MultiByteStr && *(_DWORD *)(a1 + 8) + 4 <= v5 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v2);
        if ( *(_DWORD *)(a1 + 16) )
          v14 = _byteswap_ulong(v14);
        v15 = 0;
        v16 = 0LL;
        if ( v14 )
        {
          while ( *(_DWORD *)(a1 + 8) + 1 <= v5 )
          {
            v17 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v2);
            if ( v16 < 260 )
              MultiByteStr[v16] = v17;
            if ( v17 )
            {
              ++v15;
              ++v16;
              if ( v15 < v14 )
                continue;
            }
            if ( v16 >= 260 )
              goto LABEL_25;
            goto LABEL_24;
          }
          return 0LL;
        }
LABEL_24:
        MultiByteStr[v16] = 0;
LABEL_25:
        v18 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
        if ( (*(_DWORD *)(a1 + 8) & 3) != 0 )
          v18 += 4;
        *(_DWORD *)(a1 + 8) = v18;
        if ( v18 >= v13 )
          goto LABEL_28;
      }
      return 0LL;
    }
LABEL_28:
    v19 = a2[7];
    v50[0] = 0LL;
    v50[1] = 0LL;
    v51 = 0LL;
    v52 = 0LL;
    v53 = 0LL;
    v54 = 0LL;
    v55 = 0LL;
    v56 = 0LL;
    v57 = 0LL;
    v58 = 0LL;
    switch ( (_DWORD)qword_1800306F0 )
    {
      case 0x364:
        if ( !v19 || !(unsigned int)sub_180010B10(a1, v19, v50) )
          return 0;
        break;
      case 0x374:
        if ( !v19 || !(unsigned int)sub_180011770(a1, v19, v50) )
          return 0;
        break;
      case 0x37D:
        if ( !v19 || !(unsigned int)sub_180011D40(a1, v19, v50) )
          return 0;
        break;
      default:
        if ( !v19 || !(unsigned int)sub_180011140(a1, v19, v50) )
          return 0;
        break;
    }
    if ( HIDWORD(v51) )
    {
      v21 = v51;
      v22 = 0;
      *(_DWORD *)(a1 + 8) = HIDWORD(v51);
      if ( v21 )
      {
        v23 = *(_QWORD *)a1;
LABEL_47:
        if ( v23 )
        {
          v24 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 <= v24 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v25 = *(_DWORD *)(a1 + 8);
            v26 = *(_DWORD *)(a1 + 16);
            v27 = *(_DWORD *)((unsigned int)(v25 - 4) + v23);
            if ( v26 )
              v27 = _byteswap_ulong(v27);
            v28 = v25 + 4;
            if ( v28 <= v24 )
            {
              *(_DWORD *)(a1 + 8) = v28;
              v29 = *(_DWORD *)(v28 - 4 + v23);
              if ( v26 )
                v29 = _byteswap_ulong(v29);
              if ( v28 + 4 <= v24 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                sub_180005050((__int64 *)a1, v27, (__int64)MultiByteStr);
                sub_180005050(v30, v29, (__int64)v60);
                sub_180005050(v31, v32, (__int64)v61);
                v23 = *(_QWORD *)a1;
                v33 = 0;
                while ( v23 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  if ( ++v33 >= 9 )
                  {
                    if ( ++v22 < v21 )
                      goto LABEL_47;
                    goto LABEL_60;
                  }
                }
              }
            }
          }
        }
        return 0;
      }
    }
LABEL_60:
    v34 = 1;
    if ( HIDWORD(v52) )
    {
      v35 = v52;
      *(_DWORD *)(a1 + 8) = HIDWORD(v52);
      if ( v35 && !(unsigned int)sub_180001FD0((__int64)&qword_1800306F0, v35) )
        return 0;
      v36 = 0;
      if ( v35 )
      {
        do
        {
          memset(MultiByteStr, 0, 0x104uLL);
          v37 = *(_QWORD *)a1;
          if ( !*(_QWORD *)a1 )
            return 0;
          v38 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v38 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          v39 = *(_DWORD *)(a1 + 8);
          v40 = *(_DWORD *)(a1 + 16);
          v41 = *(_DWORD *)((unsigned int)(v39 - 4) + v37);
          if ( v40 )
            v41 = _byteswap_ulong(v41);
          v42 = v39 + 4;
          if ( v42 > v38 )
            return 0;
          *(_DWORD *)(a1 + 8) = v42;
          v43 = *(_DWORD *)(v42 - 4 + v37);
          if ( v40 )
            v43 = _byteswap_ulong(v43);
          if ( v42 + 4 > v38 )
            return 0;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v41, (__int64)MultiByteStr);
          sub_180005050(v44, v43, (__int64)v61);
          sub_180005050(v45, v46, (__int64)v60);
          if ( qword_180030700 )
            MultiByteToWideChar(0, 1u, MultiByteStr, -1, (LPWSTR)qword_180030700 + 260 * v36, 255);
        }
        while ( ++v36 < v35 );
      }
    }
    if ( HIDWORD(v53) )
    {
      v47 = *(_QWORD *)a1;
      v48 = 0;
      *(_DWORD *)(a1 + 8) = HIDWORD(v53);
      while ( v47 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( ++v48 >= 64 )
          goto LABEL_80;
      }
    }
    else
    {
LABEL_80:
      if ( (unsigned int)sub_180012640(a1, v54, SHIDWORD(v54))
        && (unsigned int)sub_180012300(a1, v55, SHIDWORD(v55))
        && (unsigned int)sub_180014F10(a1, v56, SHIDWORD(v56))
        && (unsigned int)sub_180014610(a1, v49, HIDWORD(v57)) )
      {
        return v34;
      }
    }
    return 0;
  }
  while ( 1 )
  {
    v10 += 4;
    if ( v10 > v5 )
      return 0LL;
    ++v12;
    *(_DWORD *)(a1 + 8) = v10;
    if ( v12 >= v11 )
      goto LABEL_12;
  }
}
// 1800108DD: variable 'v30' is possibly undefined
// 1800108EC: variable 'v31' is possibly undefined
// 1800108EC: variable 'v32' is possibly undefined
// 180010A11: variable 'v44' is possibly undefined
// 180010A20: variable 'v45' is possibly undefined
// 180010A20: variable 'v46' is possibly undefined
// 180010AE2: variable 'v49' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180010580: using guessed type CHAR MultiByteStr[272];

//----- (0000000180010B10) ----------------------------------------------------
__int64 __fastcall sub_180010B10(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v4; // r8
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r9
  int v8; // edx
  int v9; // r8d
  unsigned int v10; // eax
  unsigned int v11; // r8d
  int v12; // r10d
  int v13; // r11d
  int v14; // r10d
  unsigned int v15; // r13d
  int v16; // r10d
  int v17; // r10d
  int v18; // r10d
  int v19; // r10d
  int v20; // r10d
  int v21; // r10d
  unsigned int v22; // r12d
  int v23; // r15d
  int v24; // r15d
  int v25; // r10d
  unsigned int v26; // ebp
  int v27; // r10d
  int v28; // r10d
  int v29; // r10d
  unsigned int v30; // esi
  int v31; // edx
  int v32; // edx
  int v33; // edx
  int v34; // edx
  int v35; // edx
  int v36; // edx
  int v37; // r10d
  int v38; // r10d
  unsigned int v39; // edi
  int v40; // edx
  int v41; // edx
  int v42; // edx
  int v43; // edx
  int v44; // r10d
  unsigned int v45; // r14d
  int v46; // r10d
  unsigned int v47; // r9d
  int v48; // edx
  int v49; // edx
  int v50; // edx
  int v51; // edx
  int v52; // edx
  int v53; // edx
  int v54; // edx
  unsigned __int32 v55; // eax
  unsigned __int32 v56; // ecx
  __int64 result; // rax
  unsigned __int32 v58; // [rsp+20h] [rbp-198h]
  unsigned __int32 v59; // [rsp+24h] [rbp-194h]
  unsigned __int32 v60; // [rsp+28h] [rbp-190h]
  unsigned __int32 v61; // [rsp+2Ch] [rbp-18Ch]
  unsigned __int32 v62; // [rsp+30h] [rbp-188h]
  unsigned __int32 v63; // [rsp+34h] [rbp-184h]
  unsigned __int32 v64; // [rsp+38h] [rbp-180h]
  unsigned __int32 v65; // [rsp+3Ch] [rbp-17Ch]
  unsigned __int32 v66; // [rsp+40h] [rbp-178h]
  int v67; // [rsp+44h] [rbp-174h]
  int v68; // [rsp+48h] [rbp-170h]
  int v69; // [rsp+4Ch] [rbp-16Ch]
  int v70; // [rsp+50h] [rbp-168h]
  int v71; // [rsp+54h] [rbp-164h]
  int v72; // [rsp+58h] [rbp-160h]
  int v73; // [rsp+5Ch] [rbp-15Ch]
  char v74[272]; // [rsp+60h] [rbp-158h] BYREF

  *(_DWORD *)(a1 + 8) = a2;
  v4 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v4);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v74);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v11 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= 17 )
          {
            if ( v10 + 4 <= v11 )
            {
              *((_DWORD *)v6 + 2) += 4;
              v12 = *((_DWORD *)v6 + 2);
              v13 = *((_DWORD *)v6 + 4);
              v60 = *(_DWORD *)((unsigned int)(v12 - 4) + v7);
              if ( v13 )
                v60 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v7));
              v67 = *((_DWORD *)v6 + 2);
              if ( v12 + 4 <= v11 )
              {
                v14 = v12 + 4;
                *((_DWORD *)v6 + 2) = v14;
                v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
                if ( v13 )
                  v15 = _byteswap_ulong(v15);
                if ( v14 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v16 = *((_DWORD *)v6 + 2);
                v61 = *(_DWORD *)((unsigned int)(v16 - 4) + v7);
                if ( v13 )
                  v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v16 - 4) + v7));
                v68 = *((_DWORD *)v6 + 2);
                if ( v16 + 4 > v11 )
                  return 0LL;
                v17 = v16 + 4;
                *((_DWORD *)v6 + 2) = v17;
                v58 = *(_DWORD *)((unsigned int)(v17 - 4) + v7);
                if ( v13 )
                  v58 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v7));
                if ( v17 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v18 = *((_DWORD *)v6 + 2);
                v62 = *(_DWORD *)((unsigned int)(v18 - 4) + v7);
                if ( v13 )
                  v62 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v7));
                v69 = *((_DWORD *)v6 + 2);
                if ( v18 + 4 > v11 )
                  return 0LL;
                v19 = v18 + 4;
                *((_DWORD *)v6 + 2) = v19;
                v59 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
                if ( v13 )
                  v59 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v7));
                if ( v19 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v20 = *((_DWORD *)v6 + 2);
                v63 = *(_DWORD *)((unsigned int)(v20 - 4) + v7);
                if ( v13 )
                  v63 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v7));
                v70 = *((_DWORD *)v6 + 2);
                if ( v20 + 4 > v11 )
                  return 0LL;
                v21 = v20 + 4;
                *((_DWORD *)v6 + 2) = v21;
                v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
                if ( v13 )
                  v22 = _byteswap_ulong(v22);
                if ( v21 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v23 = *((_DWORD *)v6 + 2);
                if ( v23 + 4 > v11 )
                  return 0LL;
                v24 = v23 + 4;
                *((_DWORD *)v6 + 2) = v24;
                v64 = *(_DWORD *)((unsigned int)(v24 - 4) + v7);
                if ( v13 )
                  v64 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v24 - 4) + v7));
                if ( v24 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v25 = *((_DWORD *)v6 + 2);
                v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v7);
                if ( v13 )
                  v26 = _byteswap_ulong(v26);
                if ( v25 + 4 > v11 )
                  return 0LL;
                v27 = v25 + 4;
                *((_DWORD *)v6 + 2) = v27;
                if ( v27 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v28 = *((_DWORD *)v6 + 2);
                v65 = *(_DWORD *)((unsigned int)(v28 - 4) + v7);
                if ( v13 )
                  v65 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v28 - 4) + v7));
                v71 = *((_DWORD *)v6 + 2);
                if ( v28 + 4 > v11 )
                  return 0LL;
                v29 = v28 + 4;
                *((_DWORD *)v6 + 2) = v29;
                v30 = *(_DWORD *)((unsigned int)(v29 - 4) + v7);
                if ( v13 )
                  v30 = _byteswap_ulong(v30);
                if ( v29 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v31 = *((_DWORD *)v6 + 2);
                if ( v31 + 4 > v11 )
                  return 0LL;
                v32 = v31 + 4;
                *((_DWORD *)v6 + 2) = v32;
                if ( v32 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v33 = *((_DWORD *)v6 + 2);
                if ( v33 + 4 > v11 )
                  return 0LL;
                v34 = v33 + 4;
                *((_DWORD *)v6 + 2) = v34;
                if ( v34 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v35 = *((_DWORD *)v6 + 2);
                if ( v35 + 4 > v11 )
                  return 0LL;
                v36 = v35 + 4;
                *((_DWORD *)v6 + 2) = v36;
                if ( v36 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v37 = *((_DWORD *)v6 + 2);
                v66 = *(_DWORD *)((unsigned int)(v37 - 4) + v7);
                if ( v13 )
                  v66 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v37 - 4) + v7));
                v72 = *((_DWORD *)v6 + 2);
                if ( v37 + 4 > v11 )
                  return 0LL;
                v38 = v37 + 4;
                *((_DWORD *)v6 + 2) = v38;
                v39 = *(_DWORD *)((unsigned int)(v38 - 4) + v7);
                if ( v13 )
                  v39 = _byteswap_ulong(v39);
                if ( v38 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v40 = *((_DWORD *)v6 + 2);
                if ( v40 + 4 > v11 )
                  return 0LL;
                v41 = v40 + 4;
                *((_DWORD *)v6 + 2) = v41;
                if ( v41 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v42 = *((_DWORD *)v6 + 2);
                if ( v42 + 4 > v11 )
                  return 0LL;
                v43 = v42 + 4;
                *((_DWORD *)v6 + 2) = v43;
                if ( v43 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v44 = *((_DWORD *)v6 + 2);
                v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v7);
                if ( v13 )
                  v45 = _byteswap_ulong(v45);
                v73 = *((_DWORD *)v6 + 2);
                if ( v44 + 4 > v11 )
                  return 0LL;
                v46 = v44 + 4;
                *((_DWORD *)v6 + 2) = v46;
                v47 = *(_DWORD *)((unsigned int)(v46 - 4) + v7);
                if ( v13 )
                  v47 = _byteswap_ulong(v47);
                if ( v46 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v48 = *((_DWORD *)v6 + 2);
                if ( v48 + 4 > v11 )
                  return 0LL;
                v49 = v48 + 4;
                *((_DWORD *)v6 + 2) = v49;
                if ( v49 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v50 = *((_DWORD *)v6 + 2);
                if ( v50 + 4 > v11 )
                  return 0LL;
                v51 = v50 + 4;
                *((_DWORD *)v6 + 2) = v51;
                if ( v51 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v52 = *((_DWORD *)v6 + 2);
                if ( v52 + 4 > v11 )
                  return 0LL;
                v53 = v52 + 4;
                *((_DWORD *)v6 + 2) = v53;
                if ( v53 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v54 = *((_DWORD *)v6 + 2);
                if ( v54 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) = v54 + 4;
                if ( v15 )
                  v15 += v67;
                v55 = v58;
                if ( v58 )
                  v55 = v68 + v58;
                v56 = v59;
                if ( v59 )
                  v56 = v69 + v59;
                if ( v22 )
                  v22 += v70;
                if ( v26 )
                  v26 += v24;
                if ( v30 )
                  v30 += v71;
                if ( v39 )
                  v39 += v72;
                if ( v47 )
                  v47 += v73;
                a3[7] = v55;
                a3[8] = v62;
                a3[10] = v63;
                a3[12] = v64;
                a3[14] = v65;
                a3[4] = v60;
                a3[16] = v66;
                result = 1LL;
                a3[5] = v15;
                a3[6] = v61;
                a3[9] = v56;
                a3[11] = v22;
                a3[13] = v26;
                a3[15] = v30;
                a3[17] = v39;
                a3[18] = v45;
                a3[19] = v47;
                return result;
              }
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 180010BA3: conditional instruction was optimized away because r9.8!=0
// 180010BC2: conditional instruction was optimized away because r9.8!=0
// 180010B65: variable 'v6' is possibly undefined
// 180010B10: using guessed type char var_158[272];

//----- (0000000180011140) ----------------------------------------------------
__int64 __fastcall sub_180011140(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r9
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r9
  int v8; // r11d
  int v9; // edx
  unsigned int v10; // eax
  int v11; // r8d
  int v12; // edx
  unsigned int v13; // r10d
  unsigned int v14; // r8d
  int v15; // r10d
  int v16; // ebx
  int v17; // r10d
  int v18; // r10d
  int v19; // r10d
  unsigned int v20; // esi
  int v21; // r10d
  int v22; // r10d
  int v23; // r10d
  int v24; // r10d
  int v25; // edx
  int v26; // edx
  int v27; // edx
  int v28; // edx
  int v29; // edx
  int v30; // edx
  int v31; // edx
  int v32; // edx
  int v33; // r10d
  int v34; // r10d
  unsigned int v35; // ebp
  int v36; // edx
  int v37; // edx
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // edx
  int v42; // r10d
  unsigned int v43; // r13d
  int v44; // r10d
  unsigned int v45; // edi
  int v46; // edx
  int v47; // edx
  int v48; // edx
  int v49; // edx
  int v50; // r10d
  unsigned int v51; // r14d
  int v52; // r12d
  int v53; // r10d
  unsigned int v54; // r9d
  int v55; // edx
  int v56; // edx
  int v57; // edx
  int v58; // edx
  int v59; // edx
  unsigned __int32 v60; // r8d
  unsigned __int32 v61; // edx
  unsigned __int32 v62; // eax
  __int64 v63; // rdx
  unsigned __int32 v65; // [rsp+20h] [rbp-198h]
  unsigned __int32 v66; // [rsp+24h] [rbp-194h]
  unsigned __int32 v67; // [rsp+28h] [rbp-190h]
  unsigned __int32 v68; // [rsp+2Ch] [rbp-18Ch]
  unsigned __int32 v69; // [rsp+30h] [rbp-188h]
  unsigned __int32 v70; // [rsp+34h] [rbp-184h]
  unsigned __int32 v71; // [rsp+38h] [rbp-180h]
  int v72; // [rsp+3Ch] [rbp-17Ch]
  int v73; // [rsp+40h] [rbp-178h]
  int v74; // [rsp+44h] [rbp-174h]
  int v75; // [rsp+48h] [rbp-170h]
  int v76; // [rsp+4Ch] [rbp-16Ch]
  int v77; // [rsp+50h] [rbp-168h]
  char v78[272]; // [rsp+60h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v78);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = 22;
        if ( (_DWORD)qword_1800306F0 == 868 )
          v11 = 17;
        v12 = 0;
        v13 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v13 )
            break;
          ++v12;
          *((_DWORD *)v6 + 2) = v10;
          if ( v12 >= v11 )
          {
            v14 = *((_DWORD *)v6 + 3);
            if ( v10 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v15 = *((_DWORD *)v6 + 2);
            v16 = *((_DWORD *)v6 + 4);
            v68 = *(_DWORD *)((unsigned int)(v15 - 4) + v7);
            if ( v16 )
              v68 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v15 - 4) + v7));
            v72 = *((_DWORD *)v6 + 2);
            if ( v15 + 4 > v14 )
              return 0LL;
            v17 = v15 + 4;
            *((_DWORD *)v6 + 2) = v17;
            v65 = *(_DWORD *)((unsigned int)(v17 - 4) + v7);
            if ( v16 )
              v65 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v7));
            if ( v17 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v18 = *((_DWORD *)v6 + 2);
            v77 = v18;
            if ( v18 + 4 > v14 )
              return 0LL;
            v19 = v18 + 4;
            *((_DWORD *)v6 + 2) = v19;
            v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
            if ( v16 )
              v20 = _byteswap_ulong(v20);
            if ( v19 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v21 = *((_DWORD *)v6 + 2);
            v69 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
            if ( v16 )
              v69 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v7));
            v73 = *((_DWORD *)v6 + 2);
            if ( v21 + 4 > v14 )
              return 0LL;
            v22 = v21 + 4;
            *((_DWORD *)v6 + 2) = v22;
            v66 = *(_DWORD *)((unsigned int)(v22 - 4) + v7);
            if ( v16 )
              v66 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v7));
            if ( v22 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v23 = *((_DWORD *)v6 + 2);
            v70 = *(_DWORD *)((unsigned int)(v23 - 4) + v7);
            if ( v16 )
              v70 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v7));
            v74 = *((_DWORD *)v6 + 2);
            if ( v23 + 4 > v14 )
              return 0LL;
            v24 = v23 + 4;
            *((_DWORD *)v6 + 2) = v24;
            v67 = *(_DWORD *)((unsigned int)(v24 - 4) + v7);
            if ( v16 )
              v67 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v24 - 4) + v7));
            if ( v24 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v25 = *((_DWORD *)v6 + 2);
            if ( v25 + 4 > v14 )
              return 0LL;
            v26 = v25 + 4;
            *((_DWORD *)v6 + 2) = v26;
            if ( v26 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v27 = *((_DWORD *)v6 + 2);
            if ( v27 + 4 > v14 )
              return 0LL;
            v28 = v27 + 4;
            *((_DWORD *)v6 + 2) = v28;
            if ( v28 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v29 = *((_DWORD *)v6 + 2);
            if ( v29 + 4 > v14 )
              return 0LL;
            v30 = v29 + 4;
            *((_DWORD *)v6 + 2) = v30;
            if ( v30 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v31 = *((_DWORD *)v6 + 2);
            if ( v31 + 4 > v14 )
              return 0LL;
            v32 = v31 + 4;
            *((_DWORD *)v6 + 2) = v32;
            if ( v32 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v33 = *((_DWORD *)v6 + 2);
            v71 = *(_DWORD *)((unsigned int)(v33 - 4) + v7);
            if ( v16 )
              v71 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v33 - 4) + v7));
            v76 = *((_DWORD *)v6 + 2);
            if ( v33 + 4 > v14 )
              return 0LL;
            v34 = v33 + 4;
            *((_DWORD *)v6 + 2) = v34;
            v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v7);
            if ( v16 )
              v35 = _byteswap_ulong(v35);
            if ( v34 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v36 = *((_DWORD *)v6 + 2);
            if ( v36 + 4 > v14 )
              return 0LL;
            v37 = v36 + 4;
            *((_DWORD *)v6 + 2) = v37;
            if ( v37 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v38 = *((_DWORD *)v6 + 2);
            if ( v38 + 4 > v14 )
              return 0LL;
            v39 = v38 + 4;
            *((_DWORD *)v6 + 2) = v39;
            if ( v39 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v40 = *((_DWORD *)v6 + 2);
            if ( v40 + 4 > v14 )
              return 0LL;
            v41 = v40 + 4;
            *((_DWORD *)v6 + 2) = v41;
            if ( v41 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v42 = *((_DWORD *)v6 + 2);
            v43 = *(_DWORD *)((unsigned int)(v42 - 4) + v7);
            if ( v16 )
              v43 = _byteswap_ulong(v43);
            v75 = *((_DWORD *)v6 + 2);
            if ( v42 + 4 > v14 )
              return 0LL;
            v44 = v42 + 4;
            *((_DWORD *)v6 + 2) = v44;
            v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v7);
            if ( v16 )
              v45 = _byteswap_ulong(v45);
            if ( v44 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v46 = *((_DWORD *)v6 + 2);
            if ( v46 + 4 > v14 )
              return 0LL;
            v47 = v46 + 4;
            *((_DWORD *)v6 + 2) = v47;
            if ( v47 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v48 = *((_DWORD *)v6 + 2);
            if ( v48 + 4 > v14 )
              return 0LL;
            v49 = v48 + 4;
            *((_DWORD *)v6 + 2) = v49;
            if ( v49 + 4 > v14 )
              return 0LL;
            *((_DWORD *)v6 + 2) += 4;
            v50 = *((_DWORD *)v6 + 2);
            v51 = *(_DWORD *)((unsigned int)(v50 - 4) + v7);
            if ( v16 )
              v51 = _byteswap_ulong(v51);
            v52 = *((_DWORD *)v6 + 2);
            if ( v50 + 4 <= v14 )
            {
              v53 = v50 + 4;
              *((_DWORD *)v6 + 2) = v53;
              v54 = *(_DWORD *)((unsigned int)(v53 - 4) + v7);
              if ( v16 )
                v54 = _byteswap_ulong(v54);
              if ( v53 + 4 <= v14 )
              {
                *((_DWORD *)v6 + 2) += 4;
                v55 = *((_DWORD *)v6 + 2);
                if ( v55 + 4 <= v14 )
                {
                  v56 = v55 + 4;
                  *((_DWORD *)v6 + 2) = v56;
                  if ( v56 + 4 <= v14 )
                  {
                    *((_DWORD *)v6 + 2) += 4;
                    v57 = *((_DWORD *)v6 + 2);
                    if ( v57 + 4 <= v14 )
                    {
                      v58 = v57 + 4;
                      *((_DWORD *)v6 + 2) = v58;
                      if ( v58 + 4 <= v14 )
                      {
                        *((_DWORD *)v6 + 2) += 4;
                        v59 = *((_DWORD *)v6 + 2);
                        if ( v59 + 4 <= v14 )
                        {
                          v60 = v65;
                          *((_DWORD *)v6 + 2) = v59 + 4;
                          if ( v65 )
                            v60 = v72 + v65;
                          v61 = v66;
                          if ( v66 )
                            v61 = v73 + v66;
                          v62 = v67;
                          if ( v67 )
                            v62 = v74 + v67;
                          if ( v45 )
                            v45 += v75;
                          if ( v35 )
                            v35 += v76;
                          if ( v54 )
                            v54 += v52;
                          if ( v20 )
                            v20 += v77;
                          a3[7] = v60;
                          a3[11] = v61;
                          a3[13] = v62;
                          a3[10] = v69;
                          a3[12] = v70;
                          a3[16] = v71;
                          a3[6] = v68;
                          a3[14] = v43;
                          a3[15] = v45;
                          a3[17] = v35;
                          a3[18] = v51;
                          a3[19] = v54;
                          if ( !v20 )
                            return 1LL;
                          v63 = *v6;
                          *((_DWORD *)v6 + 2) = v20;
                          while ( v63 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
                          {
                            *((_DWORD *)v6 + 2) += 4;
                            if ( ++v8 >= 64 )
                              return 1LL;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 1800111E5: conditional instruction was optimized away because r8d.4 is in (==11|==16)
// 1800111F3: conditional instruction was optimized away because r9.8!=0
// 180011212: conditional instruction was optimized away because r9.8!=0
// 180011195: variable 'v6' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180011140: using guessed type char var_158[272];

//----- (0000000180011770) ----------------------------------------------------
__int64 __fastcall sub_180011770(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r9
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r9
  int v8; // r8d
  int v9; // edx
  unsigned int v10; // eax
  int v11; // edx
  unsigned int v12; // r10d
  unsigned int v13; // r8d
  int v14; // r10d
  int v15; // r11d
  int v16; // r10d
  unsigned int v17; // r13d
  int v18; // edx
  int v19; // edx
  int v20; // r10d
  int v21; // r10d
  unsigned int v22; // r15d
  int v23; // r10d
  int v24; // r10d
  unsigned int v25; // r12d
  int v26; // edx
  int v27; // edx
  int v28; // edx
  int v29; // edx
  int v30; // edx
  int v31; // edx
  int v32; // edx
  int v33; // edx
  int v34; // r10d
  int v35; // r10d
  unsigned int v36; // ebp
  int v37; // edx
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // edx
  int v42; // edx
  int v43; // r10d
  int v44; // r10d
  unsigned int v45; // edi
  int v46; // edx
  int v47; // edx
  int v48; // edx
  int v49; // edx
  int v50; // ebx
  unsigned int v51; // r14d
  int v52; // ebx
  unsigned int v53; // r10d
  int v54; // edx
  int v55; // edx
  int v56; // edx
  int v57; // edx
  int v58; // edx
  __int64 result; // rax
  unsigned __int32 v60; // [rsp+20h] [rbp-188h]
  unsigned __int32 v61; // [rsp+24h] [rbp-184h]
  unsigned __int32 v62; // [rsp+28h] [rbp-180h]
  unsigned __int32 v63; // [rsp+2Ch] [rbp-17Ch]
  unsigned __int32 v64; // [rsp+30h] [rbp-178h]
  int v65; // [rsp+34h] [rbp-174h]
  int v66; // [rsp+38h] [rbp-170h]
  int v67; // [rsp+3Ch] [rbp-16Ch]
  int v68; // [rsp+40h] [rbp-168h]
  int v69; // [rsp+44h] [rbp-164h]
  int v70; // [rsp+48h] [rbp-160h]
  char v71[272]; // [rsp+50h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v71);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = 22;
        if ( (_DWORD)qword_1800306F0 == 884 )
          v11 = 20;
        v12 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v12 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= v11 )
          {
            v13 = *((_DWORD *)v6 + 3);
            if ( v10 + 4 <= v13 )
            {
              *((_DWORD *)v6 + 2) += 4;
              v14 = *((_DWORD *)v6 + 2);
              v15 = *((_DWORD *)v6 + 4);
              v60 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
              if ( v15 )
                v60 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v14 - 4) + v7));
              v65 = *((_DWORD *)v6 + 2);
              if ( v14 + 4 <= v13 )
              {
                v16 = v14 + 4;
                *((_DWORD *)v6 + 2) = v16;
                v17 = *(_DWORD *)((unsigned int)(v16 - 4) + v7);
                if ( v15 )
                  v17 = _byteswap_ulong(v17);
                if ( v16 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v18 = *((_DWORD *)v6 + 2);
                if ( v18 + 4 > v13 )
                  return 0LL;
                v19 = v18 + 4;
                *((_DWORD *)v6 + 2) = v19;
                if ( v19 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v20 = *((_DWORD *)v6 + 2);
                v61 = *(_DWORD *)((unsigned int)(v20 - 4) + v7);
                if ( v15 )
                  v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v7));
                v66 = *((_DWORD *)v6 + 2);
                if ( v20 + 4 > v13 )
                  return 0LL;
                v21 = v20 + 4;
                *((_DWORD *)v6 + 2) = v21;
                v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
                if ( v15 )
                  v22 = _byteswap_ulong(v22);
                if ( v21 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v23 = *((_DWORD *)v6 + 2);
                v62 = *(_DWORD *)((unsigned int)(v23 - 4) + v7);
                if ( v15 )
                  v62 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v7));
                v67 = *((_DWORD *)v6 + 2);
                if ( v23 + 4 > v13 )
                  return 0LL;
                v24 = v23 + 4;
                *((_DWORD *)v6 + 2) = v24;
                v25 = *(_DWORD *)((unsigned int)(v24 - 4) + v7);
                if ( v15 )
                  v25 = _byteswap_ulong(v25);
                if ( v24 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v26 = *((_DWORD *)v6 + 2);
                if ( v26 + 4 > v13 )
                  return 0LL;
                v27 = v26 + 4;
                *((_DWORD *)v6 + 2) = v27;
                if ( v27 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v28 = *((_DWORD *)v6 + 2);
                if ( v28 + 4 > v13 )
                  return 0LL;
                v29 = v28 + 4;
                *((_DWORD *)v6 + 2) = v29;
                if ( v29 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v30 = *((_DWORD *)v6 + 2);
                if ( v30 + 4 > v13 )
                  return 0LL;
                v31 = v30 + 4;
                *((_DWORD *)v6 + 2) = v31;
                if ( v31 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v32 = *((_DWORD *)v6 + 2);
                if ( v32 + 4 > v13 )
                  return 0LL;
                v33 = v32 + 4;
                *((_DWORD *)v6 + 2) = v33;
                if ( v33 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v34 = *((_DWORD *)v6 + 2);
                v64 = *(_DWORD *)((unsigned int)(v34 - 4) + v7);
                if ( v15 )
                  v64 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v34 - 4) + v7));
                v69 = *((_DWORD *)v6 + 2);
                if ( v34 + 4 > v13 )
                  return 0LL;
                v35 = v34 + 4;
                *((_DWORD *)v6 + 2) = v35;
                v36 = *(_DWORD *)((unsigned int)(v35 - 4) + v7);
                if ( v15 )
                  v36 = _byteswap_ulong(v36);
                if ( v35 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v37 = *((_DWORD *)v6 + 2);
                if ( v37 + 4 > v13 )
                  return 0LL;
                v38 = v37 + 4;
                *((_DWORD *)v6 + 2) = v38;
                if ( v38 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v39 = *((_DWORD *)v6 + 2);
                if ( v39 + 4 > v13 )
                  return 0LL;
                v40 = v39 + 4;
                *((_DWORD *)v6 + 2) = v40;
                if ( v40 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v41 = *((_DWORD *)v6 + 2);
                if ( v41 + 4 > v13 )
                  return 0LL;
                v42 = v41 + 4;
                *((_DWORD *)v6 + 2) = v42;
                if ( v42 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v43 = *((_DWORD *)v6 + 2);
                v63 = *(_DWORD *)((unsigned int)(v43 - 4) + v7);
                if ( v15 )
                  v63 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v43 - 4) + v7));
                v68 = *((_DWORD *)v6 + 2);
                if ( v43 + 4 > v13 )
                  return 0LL;
                v44 = v43 + 4;
                *((_DWORD *)v6 + 2) = v44;
                v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v7);
                if ( v15 )
                  v45 = _byteswap_ulong(v45);
                if ( v44 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v46 = *((_DWORD *)v6 + 2);
                if ( v46 + 4 > v13 )
                  return 0LL;
                v47 = v46 + 4;
                *((_DWORD *)v6 + 2) = v47;
                if ( v47 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v48 = *((_DWORD *)v6 + 2);
                if ( v48 + 4 > v13 )
                  return 0LL;
                v49 = v48 + 4;
                *((_DWORD *)v6 + 2) = v49;
                if ( v49 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v50 = *((_DWORD *)v6 + 2);
                v51 = *(_DWORD *)((unsigned int)(v50 - 4) + v7);
                if ( v15 )
                  v51 = _byteswap_ulong(v51);
                v70 = *((_DWORD *)v6 + 2);
                if ( v50 + 4 > v13 )
                  return 0LL;
                v52 = v50 + 4;
                *((_DWORD *)v6 + 2) = v52;
                v53 = *(_DWORD *)((unsigned int)(v52 - 4) + v7);
                if ( v15 )
                  v53 = _byteswap_ulong(v53);
                if ( v52 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v54 = *((_DWORD *)v6 + 2);
                if ( v54 + 4 > v13 )
                  return 0LL;
                v55 = v54 + 4;
                *((_DWORD *)v6 + 2) = v55;
                if ( v55 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v56 = *((_DWORD *)v6 + 2);
                if ( v56 + 4 > v13 )
                  return 0LL;
                v57 = v56 + 4;
                *((_DWORD *)v6 + 2) = v57;
                if ( v57 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v58 = *((_DWORD *)v6 + 2);
                if ( v58 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v6 + 2) = v58 + 4;
                if ( v17 )
                  v17 += v65;
                if ( v22 )
                  v22 += v66;
                if ( v25 )
                  v25 += v67;
                if ( v45 )
                  v45 += v68;
                if ( v36 )
                  v36 += v69;
                if ( v53 )
                  v53 += v70;
                a3[6] = v60;
                a3[10] = v61;
                a3[12] = v62;
                a3[14] = v63;
                a3[16] = v64;
                result = 1LL;
                a3[7] = v17;
                a3[11] = v22;
                a3[13] = v25;
                a3[15] = v45;
                a3[17] = v36;
                a3[18] = v51;
                a3[19] = v53;
                return result;
              }
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 180011811: conditional instruction was optimized away because edx.4 is in (==14|==16)
// 18001181A: conditional instruction was optimized away because r9.8!=0
// 18001183A: conditional instruction was optimized away because r9.8!=0
// 1800117C5: variable 'v6' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180011770: using guessed type char var_158[272];

//----- (0000000180011D40) ----------------------------------------------------
__int64 __fastcall sub_180011D40(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r9
  unsigned __int32 v5; // edx
  __int64 *v6; // rcx
  __int64 v7; // r10
  int v8; // r9d
  int v9; // edx
  unsigned int v10; // eax
  unsigned int v11; // r8d
  int v12; // r9d
  int v13; // r11d
  int v14; // r9d
  unsigned int v15; // r13d
  int v16; // edx
  int v17; // edx
  int v18; // r9d
  int v19; // r9d
  unsigned int v20; // r15d
  int v21; // r9d
  int v22; // r9d
  unsigned int v23; // r12d
  int v24; // edx
  int v25; // edx
  int v26; // edx
  int v27; // edx
  int v28; // edx
  int v29; // edx
  int v30; // edx
  int v31; // edx
  int v32; // r9d
  int v33; // r9d
  unsigned int v34; // ebp
  int v35; // edx
  int v36; // edx
  int v37; // edx
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // r9d
  int v42; // r9d
  unsigned int v43; // esi
  int v44; // edx
  int v45; // edx
  int v46; // edx
  int v47; // edx
  int v48; // ebx
  unsigned int v49; // r14d
  int v50; // ebx
  unsigned int v51; // r9d
  int v52; // edx
  int v53; // edx
  int v54; // edx
  int v55; // edx
  int v56; // edx
  __int64 result; // rax
  unsigned __int32 v58; // [rsp+20h] [rbp-188h]
  unsigned __int32 v59; // [rsp+24h] [rbp-184h]
  unsigned __int32 v60; // [rsp+28h] [rbp-180h]
  unsigned __int32 v61; // [rsp+2Ch] [rbp-17Ch]
  unsigned __int32 v62; // [rsp+30h] [rbp-178h]
  int v63; // [rsp+34h] [rbp-174h]
  int v64; // [rsp+38h] [rbp-170h]
  int v65; // [rsp+3Ch] [rbp-16Ch]
  int v66; // [rsp+40h] [rbp-168h]
  int v67; // [rsp+44h] [rbp-164h]
  int v68; // [rsp+48h] [rbp-160h]
  char v69[272]; // [rsp+50h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 && a2 + 4 <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) = a2 + 4;
    v5 = *(_DWORD *)(a2 + v3);
    if ( *(_DWORD *)(a1 + 16) )
      v5 = _byteswap_ulong(v5);
    sub_180005050((__int64 *)a1, v5, (__int64)v69);
    v7 = *v6;
    v8 = 0;
    v9 = 0;
    while ( v7 && (unsigned int)(*((_DWORD *)v6 + 2) + 4) <= *((_DWORD *)v6 + 3) )
    {
      *((_DWORD *)v6 + 2) += 4;
      ++v9;
      v10 = *((_DWORD *)v6 + 2);
      if ( v9 >= 6 )
      {
        v11 = *((_DWORD *)v6 + 3);
        while ( 1 )
        {
          v10 += 4;
          if ( v10 > v11 )
            break;
          ++v8;
          *((_DWORD *)v6 + 2) = v10;
          if ( v8 >= 22 )
          {
            if ( v10 + 4 <= v11 )
            {
              *((_DWORD *)v6 + 2) += 4;
              v12 = *((_DWORD *)v6 + 2);
              v13 = *((_DWORD *)v6 + 4);
              v58 = *(_DWORD *)((unsigned int)(v12 - 4) + v7);
              if ( v13 )
                v58 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v7));
              v63 = *((_DWORD *)v6 + 2);
              if ( v12 + 4 <= v11 )
              {
                v14 = v12 + 4;
                *((_DWORD *)v6 + 2) = v14;
                v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
                if ( v13 )
                  v15 = _byteswap_ulong(v15);
                if ( v14 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v16 = *((_DWORD *)v6 + 2);
                if ( v16 + 4 > v11 )
                  return 0LL;
                v17 = v16 + 4;
                *((_DWORD *)v6 + 2) = v17;
                if ( v17 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v18 = *((_DWORD *)v6 + 2);
                v59 = *(_DWORD *)((unsigned int)(v18 - 4) + v7);
                if ( v13 )
                  v59 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v7));
                v64 = *((_DWORD *)v6 + 2);
                if ( v18 + 4 > v11 )
                  return 0LL;
                v19 = v18 + 4;
                *((_DWORD *)v6 + 2) = v19;
                v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
                if ( v13 )
                  v20 = _byteswap_ulong(v20);
                if ( v19 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v21 = *((_DWORD *)v6 + 2);
                v60 = *(_DWORD *)((unsigned int)(v21 - 4) + v7);
                if ( v13 )
                  v60 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v7));
                v65 = *((_DWORD *)v6 + 2);
                if ( v21 + 4 > v11 )
                  return 0LL;
                v22 = v21 + 4;
                *((_DWORD *)v6 + 2) = v22;
                v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v7);
                if ( v13 )
                  v23 = _byteswap_ulong(v23);
                if ( v22 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v24 = *((_DWORD *)v6 + 2);
                if ( v24 + 4 > v11 )
                  return 0LL;
                v25 = v24 + 4;
                *((_DWORD *)v6 + 2) = v25;
                if ( v25 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v26 = *((_DWORD *)v6 + 2);
                if ( v26 + 4 > v11 )
                  return 0LL;
                v27 = v26 + 4;
                *((_DWORD *)v6 + 2) = v27;
                if ( v27 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v28 = *((_DWORD *)v6 + 2);
                if ( v28 + 4 > v11 )
                  return 0LL;
                v29 = v28 + 4;
                *((_DWORD *)v6 + 2) = v29;
                if ( v29 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v30 = *((_DWORD *)v6 + 2);
                if ( v30 + 4 > v11 )
                  return 0LL;
                v31 = v30 + 4;
                *((_DWORD *)v6 + 2) = v31;
                if ( v31 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v32 = *((_DWORD *)v6 + 2);
                v62 = *(_DWORD *)((unsigned int)(v32 - 4) + v7);
                if ( v13 )
                  v62 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v32 - 4) + v7));
                v67 = *((_DWORD *)v6 + 2);
                if ( v32 + 4 > v11 )
                  return 0LL;
                v33 = v32 + 4;
                *((_DWORD *)v6 + 2) = v33;
                v34 = *(_DWORD *)((unsigned int)(v33 - 4) + v7);
                if ( v13 )
                  v34 = _byteswap_ulong(v34);
                if ( v33 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v35 = *((_DWORD *)v6 + 2);
                if ( v35 + 4 > v11 )
                  return 0LL;
                v36 = v35 + 4;
                *((_DWORD *)v6 + 2) = v36;
                if ( v36 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v37 = *((_DWORD *)v6 + 2);
                if ( v37 + 4 > v11 )
                  return 0LL;
                v38 = v37 + 4;
                *((_DWORD *)v6 + 2) = v38;
                if ( v38 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v39 = *((_DWORD *)v6 + 2);
                if ( v39 + 4 > v11 )
                  return 0LL;
                v40 = v39 + 4;
                *((_DWORD *)v6 + 2) = v40;
                if ( v40 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v41 = *((_DWORD *)v6 + 2);
                v61 = *(_DWORD *)((unsigned int)(v41 - 4) + v7);
                if ( v13 )
                  v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v41 - 4) + v7));
                v66 = *((_DWORD *)v6 + 2);
                if ( v41 + 4 > v11 )
                  return 0LL;
                v42 = v41 + 4;
                *((_DWORD *)v6 + 2) = v42;
                v43 = *(_DWORD *)((unsigned int)(v42 - 4) + v7);
                if ( v13 )
                  v43 = _byteswap_ulong(v43);
                if ( v42 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v44 = *((_DWORD *)v6 + 2);
                if ( v44 + 4 > v11 )
                  return 0LL;
                v45 = v44 + 4;
                *((_DWORD *)v6 + 2) = v45;
                if ( v45 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v46 = *((_DWORD *)v6 + 2);
                if ( v46 + 4 > v11 )
                  return 0LL;
                v47 = v46 + 4;
                *((_DWORD *)v6 + 2) = v47;
                if ( v47 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v48 = *((_DWORD *)v6 + 2);
                v49 = *(_DWORD *)((unsigned int)(v48 - 4) + v7);
                if ( v13 )
                  v49 = _byteswap_ulong(v49);
                v68 = *((_DWORD *)v6 + 2);
                if ( v48 + 4 > v11 )
                  return 0LL;
                v50 = v48 + 4;
                *((_DWORD *)v6 + 2) = v50;
                v51 = *(_DWORD *)((unsigned int)(v50 - 4) + v7);
                if ( v13 )
                  v51 = _byteswap_ulong(v51);
                if ( v50 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v52 = *((_DWORD *)v6 + 2);
                if ( v52 + 4 > v11 )
                  return 0LL;
                v53 = v52 + 4;
                *((_DWORD *)v6 + 2) = v53;
                if ( v53 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v54 = *((_DWORD *)v6 + 2);
                if ( v54 + 4 > v11 )
                  return 0LL;
                v55 = v54 + 4;
                *((_DWORD *)v6 + 2) = v55;
                if ( v55 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) += 4;
                v56 = *((_DWORD *)v6 + 2);
                if ( v56 + 4 > v11 )
                  return 0LL;
                *((_DWORD *)v6 + 2) = v56 + 4;
                if ( v15 )
                  v15 += v63;
                if ( v20 )
                  v20 += v64;
                if ( v23 )
                  v23 += v65;
                if ( v43 )
                  v43 += v66;
                if ( v34 )
                  v34 += v67;
                if ( v51 )
                  v51 += v68;
                a3[6] = v58;
                a3[10] = v59;
                a3[12] = v60;
                a3[14] = v61;
                a3[16] = v62;
                result = 1LL;
                a3[7] = v15;
                a3[11] = v20;
                a3[13] = v23;
                a3[15] = v43;
                a3[17] = v34;
                a3[18] = v49;
                a3[19] = v51;
                return result;
              }
            }
            return 0LL;
          }
        }
        return 0LL;
      }
    }
  }
  return 0LL;
}
// 180011DD3: conditional instruction was optimized away because r10.8!=0
// 180011DF4: conditional instruction was optimized away because r10.8!=0
// 180011D95: variable 'v6' is possibly undefined
// 180011D40: using guessed type char var_158[272];

//----- (0000000180012300) ----------------------------------------------------
__int64 __fastcall sub_180012300(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  unsigned int v6; // ebp
  unsigned int v7; // esi
  int v8; // edi
  __int64 v9; // r9
  unsigned int v10; // r8d
  int v11; // r10d
  unsigned __int32 v12; // edx
  __int64 *v13; // rcx
  int v14; // r9d
  __int64 v15; // r8
  char *v16; // rcx
  _BYTE *v17; // rdx
  char v18; // al
  char *v19; // rcx
  _BYTE *v20; // rdx
  char v21; // al
  __int64 v22; // r9
  __int64 v23; // rdi
  unsigned int v24; // r8d
  int v25; // r11d
  unsigned __int32 v26; // r10d
  int v27; // edx
  unsigned __int32 v28; // esi
  int v29; // r14d
  __int64 *v30; // rcx
  __int64 v31; // r8
  int v32; // r9d
  int v33; // eax
  char v34[272]; // [rsp+20h] [rbp-258h] BYREF
  char v35[272]; // [rsp+130h] [rbp-148h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !a2 || (result = sub_180001B50((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = 0;
    v7 = *(_DWORD *)(a1 + 8);
    v8 = 0;
    if ( a2 )
    {
      while ( 1 )
      {
        memset(v34, 0, 0x104uLL);
        memset(v35, 0, 0x104uLL);
        v9 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v10 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)(a1 + 8);
        v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
        if ( *(_DWORD *)(a1 + 16) )
          v12 = _byteswap_ulong(v12);
        if ( v11 + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v12, (__int64)v34);
        sub_180005050(v13, v14, (__int64)v35);
        if ( qword_180030720 )
        {
          v15 = 760LL * v8;
          v16 = v34;
          v17 = (_BYTE *)(v15 + qword_180030720 + 232);
          do
          {
            v18 = *v16++;
            *v17++ = v18;
          }
          while ( v18 );
          v19 = v35;
          v20 = (_BYTE *)(v15 + qword_180030720 + 492);
          do
          {
            v21 = *v19++;
            *v20++ = v21;
          }
          while ( v21 );
        }
        if ( ++v8 >= a2 )
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      *(_DWORD *)(a1 + 8) = v7;
      if ( a2 )
      {
        while ( 1 )
        {
          v22 = *(_QWORD *)a1;
          v23 = qword_180030720 + 760LL * (int)v6;
          if ( !*(_QWORD *)a1 )
            break;
          v24 = *(_DWORD *)(a1 + 12);
          if ( v7 + 4 > v24 )
            break;
          v25 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 8) = v7 + 4;
          v26 = *(_DWORD *)(v7 + v22);
          if ( v25 )
            v26 = _byteswap_ulong(v26);
          if ( v7 + 8 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v27 = *(_DWORD *)(a1 + 8);
          v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v22);
          if ( v25 )
            v28 = _byteswap_ulong(v28);
          if ( v27 + 4 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v29 = *(_DWORD *)(a1 + 8);
          if ( v29 + 4 > v24 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          sub_180005050((__int64 *)a1, v26, (__int64)v35);
          sub_180005050(v30, v28, (__int64)v34);
          v33 = v29 + v32;
          v7 = *(_DWORD *)(a1 + 8);
          if ( !v32 )
            v33 = 0;
          if ( (_DWORD)qword_1800306F0 == 868 )
          {
            if ( !v23 )
              return 0LL;
            if ( v33 )
            {
              *(_DWORD *)(a1 + 8) = v33;
              sub_180012ED0(a1, v23);
            }
          }
          else if ( !sub_180012DD0(a1, v23, v31, v33) )
          {
            return 0LL;
          }
          ++v6;
          *(_DWORD *)(a1 + 8) = v7;
          if ( v6 >= a2 )
            return 1LL;
        }
        return 0LL;
      }
      else
      {
        return 1LL;
      }
    }
  }
  return result;
}
// 180012442: variable 'v13' is possibly undefined
// 180012442: variable 'v14' is possibly undefined
// 180012585: variable 'v30' is possibly undefined
// 180012590: variable 'v32' is possibly undefined
// 1800125D6: variable 'v31' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030720: using guessed type __int64 qword_180030720;

//----- (0000000180012640) ----------------------------------------------------
__int64 __fastcall sub_180012640(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v7; // r14d
  __int64 v8; // rdx
  unsigned int v9; // r8d
  int v10; // r9d
  int v11; // r10d
  unsigned __int32 v12; // r11d
  int v13; // r9d
  unsigned __int32 v14; // esi
  int v15; // r9d
  unsigned __int32 v16; // edi
  __int64 *v17; // rcx
  __int64 *v18; // rcx
  __int64 *v19; // rcx
  int v20; // r9d
  unsigned int v21; // ecx
  int v22; // edx
  unsigned int v23; // eax
  char *v24; // rdx
  char *v25; // r8
  char v26; // al
  unsigned int v27; // r12d
  __int64 v28; // r8
  unsigned int v29; // edx
  int v30; // r10d
  int v31; // r9d
  unsigned __int32 v32; // r11d
  int v33; // r10d
  unsigned __int32 v34; // r14d
  int v35; // r10d
  unsigned __int32 v36; // ebp
  int v37; // r10d
  unsigned __int32 v38; // edi
  int v39; // r13d
  unsigned int v40; // r15d
  unsigned int v41; // esi
  __int64 *v42; // rcx
  __int64 *v43; // rcx
  __int64 *v44; // rcx
  unsigned int v45; // ecx
  int v46; // edi
  unsigned int v47; // eax
  int v48; // r9d
  int v49; // r15d
  __int64 v50; // rcx
  char *v52; // [rsp+28h] [rbp-490h]
  char v53[272]; // [rsp+30h] [rbp-488h] BYREF
  char v54[272]; // [rsp+140h] [rbp-378h] BYREF
  char v55[272]; // [rsp+250h] [rbp-268h] BYREF
  char v56[272]; // [rsp+360h] [rbp-158h] BYREF

  if ( !a3 || !a2 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  result = sub_1800020D0((__int64)&qword_1800306F0, a2);
  if ( (_DWORD)result )
  {
    v7 = 0;
    while ( 1 )
    {
      memset(v53, 0, 0x104uLL);
      v8 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v9 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v10 = *(_DWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 16);
      v12 = *(_DWORD *)((unsigned int)(v10 - 4) + v8);
      if ( v11 )
        v12 = _byteswap_ulong(v12);
      if ( v10 + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v13 = *(_DWORD *)(a1 + 8);
      v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v8);
      if ( v11 )
        v14 = _byteswap_ulong(v14);
      if ( v13 + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v15 = *(_DWORD *)(a1 + 8);
      v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v8);
      if ( v11 )
        v16 = _byteswap_ulong(v16);
      if ( v15 + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v12, (__int64)v53);
      sub_180005050(v17, v14, (__int64)v54);
      sub_180005050(v18, v16, (__int64)v55);
      sub_180005050(v19, v20, (__int64)v56);
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v21 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v21 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v21 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v21 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v22 = *(_DWORD *)(a1 + 8);
      if ( (_DWORD)qword_1800306F0 != 868 )
      {
        if ( (_DWORD)qword_1800306F0 == 884 )
        {
          v23 = v22 + 4;
LABEL_31:
          if ( v23 > v21 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          goto LABEL_33;
        }
        if ( (_DWORD)qword_1800306F0 == 893 || (_DWORD)qword_1800306F0 == 902 )
        {
          if ( v22 + 4 > v21 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v21 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v23 = *(_DWORD *)(a1 + 8) + 4;
          goto LABEL_31;
        }
      }
LABEL_33:
      if ( qword_180030710 )
      {
        v24 = v53;
        v25 = (char *)qword_180030710 + 312 * v7 + 52;
        do
        {
          v26 = *v24++;
          *v25++ = v26;
        }
        while ( v26 );
      }
      if ( ++v7 >= a2 )
      {
        *(_DWORD *)(a1 + 8) = a3;
        v27 = 0;
        while ( 1 )
        {
          v28 = *(_QWORD *)a1;
          v52 = (char *)qword_180030710 + 312 * (int)v27;
          if ( !*(_QWORD *)a1 )
            return 0LL;
          v29 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v29 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v30 = *(_DWORD *)(a1 + 8);
          v31 = *(_DWORD *)(a1 + 16);
          v32 = *(_DWORD *)((unsigned int)(v30 - 4) + v28);
          if ( v31 )
            v32 = _byteswap_ulong(v32);
          if ( v30 + 4 > v29 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v33 = *(_DWORD *)(a1 + 8);
          v34 = *(_DWORD *)((unsigned int)(v33 - 4) + v28);
          if ( v31 )
            v34 = _byteswap_ulong(v34);
          if ( v33 + 4 > v29 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v35 = *(_DWORD *)(a1 + 8);
          v36 = *(_DWORD *)((unsigned int)(v35 - 4) + v28);
          if ( v31 )
            v36 = _byteswap_ulong(v36);
          if ( v35 + 4 > v29 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v37 = *(_DWORD *)(a1 + 8);
          v38 = *(_DWORD *)((unsigned int)(v37 - 4) + v28);
          if ( v31 )
            v38 = _byteswap_ulong(v38);
          if ( v37 + 4 > v29 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v39 = *(_DWORD *)(a1 + 8);
          v40 = *(_DWORD *)((unsigned int)(v39 - 4) + v28);
          if ( v31 )
            v40 = _byteswap_ulong(v40);
          if ( v39 + 4 > v29 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v41 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v28);
          if ( v31 )
            v41 = _byteswap_ulong(v41);
          sub_180005050((__int64 *)a1, v32, (__int64)v56);
          sub_180005050(v42, v34, (__int64)v55);
          sub_180005050(v43, v36, (__int64)v54);
          sub_180005050(v44, v38, (__int64)v53);
          if ( !*(_QWORD *)a1 )
            return 0LL;
          v45 = *(_DWORD *)(a1 + 12);
          if ( *(_DWORD *)(a1 + 8) + 4 > v45 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v45 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 > v45 )
            return 0LL;
          *(_DWORD *)(a1 + 8) += 4;
          v46 = *(_DWORD *)(a1 + 8);
          if ( (_DWORD)qword_1800306F0 != 868 )
          {
            if ( (_DWORD)qword_1800306F0 == 884 )
            {
              v47 = v46 + 4;
LABEL_69:
              if ( v47 > v45 )
                return 0LL;
              *(_DWORD *)(a1 + 8) += 4;
              v46 = *(_DWORD *)(a1 + 8);
              goto LABEL_71;
            }
            if ( (_DWORD)qword_1800306F0 == 893 || (_DWORD)qword_1800306F0 == 902 )
            {
              if ( v46 + 4 > v45 )
                return 0LL;
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 > v45 )
                return 0LL;
              *(_DWORD *)(a1 + 8) += 4;
              v47 = *(_DWORD *)(a1 + 8) + 4;
              goto LABEL_69;
            }
          }
LABEL_71:
          v48 = v41 + v39;
          if ( !v41 )
            v48 = 0;
          if ( !(unsigned int)sub_180012B60(a1, (__int64)v52, v40, v48) )
            return 0LL;
          ++v27;
          *(_DWORD *)(a1 + 8) = v46;
          if ( v27 >= a2 )
          {
            v49 = 0;
            v50 = *(_QWORD *)a1;
            while ( v50 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( ++v49 >= 77 )
                return 1LL;
            }
            return 0LL;
          }
        }
      }
    }
  }
  return result;
}
// 1800126C9: conditional instruction was optimized away because r13d.4!=0
// 1800128D8: conditional instruction was optimized away because r13d.4!=0
// 1800127C3: variable 'v17' is possibly undefined
// 1800127D2: variable 'v18' is possibly undefined
// 1800127E2: variable 'v19' is possibly undefined
// 1800127E2: variable 'v20' is possibly undefined
// 1800129FC: variable 'v42' is possibly undefined
// 180012A0B: variable 'v43' is possibly undefined
// 180012A17: variable 'v44' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (0000000180012B60) ----------------------------------------------------
__int64 __fastcall sub_180012B60(__int64 a1, __int64 a2, unsigned int a3, int a4)
{
  unsigned int v8; // esi
  __int64 v9; // r8
  unsigned int v10; // edx
  int v11; // r9d
  int v12; // r11d
  unsigned __int32 v13; // r10d
  int v14; // r9d
  unsigned __int32 v15; // edi
  int v16; // r14d
  __int64 *v17; // rcx
  int v18; // ebp
  int v19; // r9d
  int v20; // edi
  __int64 v21; // rdx
  unsigned int v22; // ecx
  unsigned int v23; // eax
  char String1[272]; // [rsp+20h] [rbp-258h] BYREF
  char v25[272]; // [rsp+130h] [rbp-148h] BYREF

  if ( !a2 )
    return 0LL;
  if ( !a4 || !a3 )
    return 1LL;
  v8 = 0;
  *(_DWORD *)(a1 + 8) = a4;
  while ( 1 )
  {
    memset(String1, 0, 0x104uLL);
    v9 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v10 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 16);
    v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
    if ( v12 )
      v13 = _byteswap_ulong(v13);
    if ( v11 + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v14 = *(_DWORD *)(a1 + 8);
    v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v9);
    if ( v12 )
      v15 = _byteswap_ulong(v15);
    if ( v14 + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v16 = *(_DWORD *)(a1 + 8);
    if ( v16 + 4 > v10 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    sub_180005050((__int64 *)a1, v13, (__int64)String1);
    sub_180005050(v17, v15, (__int64)v25);
    v18 = *(_DWORD *)(a1 + 8);
    v20 = v16 + v19;
    if ( !v19 )
      v20 = 0;
    if ( !stricmp(String1, "texture0") && v20 )
    {
      v21 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = v20;
      if ( !v21 )
        return 0LL;
      v22 = *(_DWORD *)(a1 + 12);
      if ( v20 + 4 > v22 )
        return 0LL;
      *(_DWORD *)(a1 + 8) = v20 + 4;
      if ( v20 + 8 > v22 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v22 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v22 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v22 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v22 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v23 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v21);
      if ( *(_DWORD *)(a1 + 16) )
        v23 = _byteswap_ulong(v23);
      *(_DWORD *)(a2 + 40) = v23;
    }
    ++v8;
    *(_DWORD *)(a1 + 8) = v18;
    if ( v8 >= a3 )
      return 1LL;
  }
  return 0LL;
}
// 180012CC2: variable 'v17' is possibly undefined
// 180012CCA: variable 'v19' is possibly undefined
// 180012B60: using guessed type char var_148[272];

//----- (0000000180012DD0) ----------------------------------------------------
_BOOL8 __fastcall sub_180012DD0(__int64 a1, __int64 a2, __int64 a3, int a4)
{
  __int64 v6; // r10
  unsigned int v7; // edx
  int v8; // r9d
  unsigned __int16 v9; // r11
  int v10; // ebx
  unsigned int v11; // r9d
  unsigned int v12; // eax

  if ( !a2 )
    return 0LL;
  if ( !a4 )
    return 1LL;
  v6 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a4;
  if ( !v6 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  if ( a4 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = a4 + 4;
  if ( a4 + 6 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_WORD *)((unsigned int)(v8 - 2) + v6);
  if ( *(_DWORD *)(a1 + 16) )
    v9 = __ROL2__(v9, 8);
  if ( v8 + 2 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v6);
  if ( *(_DWORD *)(a1 + 16) )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  if ( v11 )
    v12 = v11;
  *(_DWORD *)(a1 + 8) = v12;
  return (unsigned int)sub_180013C40(a1, a2, a3, v9) != 0;
}

//----- (0000000180012ED0) ----------------------------------------------------
__int64 __fastcall sub_180012ED0(__int64 a1, __int64 a2)
{
  __int64 v3; // rdx
  unsigned int v4; // eax
  unsigned int v5; // ecx
  unsigned int v6; // r12d
  int v7; // r14d
  __int64 v8; // rdi
  __int64 i; // r10
  unsigned int v10; // r8d
  int v11; // r11d
  int v12; // r9d
  int v13; // esi
  int v14; // r15d
  int v15; // r8d
  unsigned int v16; // r9d
  int v17; // r10d
  int v18; // r8d
  int v19; // r11d
  int v20; // eax
  int v21; // r13d
  int v22; // r8d
  unsigned int v23; // esi
  unsigned int v24; // r15d
  int v25; // r9d
  __int64 v26; // r10
  unsigned int v27; // r8d
  int v28; // r9d
  __int64 v29; // rdi
  __int64 v30; // r11
  char *v31; // r10
  unsigned int v32; // r8d
  int v33; // r9d
  __int64 v34; // rdi
  __int64 v35; // r11
  char *v36; // r10
  unsigned int v37; // r8d
  int v38; // r9d
  __int64 v39; // rdi
  __int64 v40; // r11
  char *v41; // r10
  unsigned int v42; // r8d
  int v43; // r11d
  int v44; // r9d
  __int64 v45; // r10
  unsigned int v46; // r8d
  int v47; // eax
  int v48; // r10d
  int v49; // r11d
  int v50; // r9d
  unsigned int v51; // r8d
  char *v52; // r14
  unsigned int v53; // r15d
  __int64 v54; // rax
  bool v55; // cf
  size_t v56; // rax
  _QWORD *v57; // rax
  __int64 v58; // r11
  unsigned int v59; // r8d
  int v60; // r10d
  int v61; // r9d
  int v62; // r12d
  int v63; // r10d
  int v64; // r13d
  __int64 v65; // rdx
  char v66; // al
  int v67; // r9d
  int v68; // edi
  int v69; // r9d
  int v70; // esi
  int v71; // r14d
  int v72; // r10d
  int v73; // r15d
  int v74; // r9d
  int v75; // r11d
  void **v76; // rdx
  char *v77; // r8
  char v78; // al
  __int64 v79; // rdx
  __int64 v80; // rax
  int v81; // edx
  __int64 v82; // rdi
  int v83; // ecx
  __int64 v84; // rdx
  __int64 v85; // r12
  _DWORD *v86; // r13
  unsigned __int16 v87; // r15
  int v88; // r14d
  __int64 v89; // r10
  __int64 v90; // rdx
  unsigned int v91; // r11d
  int v92; // r8d
  unsigned __int16 v93; // r9
  int v94; // edi
  int v95; // esi
  unsigned __int16 v96; // r8
  unsigned __int16 v97; // dx
  unsigned __int16 v98; // ax
  unsigned __int16 v99; // cx
  __int64 v100; // rdi
  __int64 v101; // rcx
  int v102; // eax
  unsigned int v103; // r9d
  unsigned int v104; // eax
  char *v105; // rbx
  unsigned int v107; // [rsp+30h] [rbp-D0h]
  unsigned int v108; // [rsp+30h] [rbp-D0h]
  unsigned int v109; // [rsp+34h] [rbp-CCh]
  unsigned int v110[4]; // [rsp+38h] [rbp-C8h] BYREF
  void *v111[2]; // [rsp+48h] [rbp-B8h] BYREF
  _QWORD *v112; // [rsp+58h] [rbp-A8h]
  __int64 v113; // [rsp+60h] [rbp-A0h]
  __int64 v114; // [rsp+68h] [rbp-98h]
  __int64 v115; // [rsp+70h] [rbp-90h] BYREF
  char v116[4]; // [rsp+78h] [rbp-88h] BYREF
  char v117; // [rsp+7Ch] [rbp-84h] BYREF
  char v118; // [rsp+80h] [rbp-80h] BYREF
  char v119; // [rsp+84h] [rbp-7Ch] BYREF
  __int64 v120; // [rsp+120h] [rbp+20h]
  __int64 v121; // [rsp+128h] [rbp+28h]
  int v122; // [rsp+130h] [rbp+30h]
  void *v123[34]; // [rsp+140h] [rbp+40h] BYREF

  v114 = -2LL;
  v113 = a2;
  if ( a2 )
  {
    v3 = *(_QWORD *)a1;
    if ( *(_QWORD *)a1 )
    {
      v4 = *(_DWORD *)(a1 + 8) + 4;
      v5 = *(_DWORD *)(a1 + 12);
      if ( v4 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = v4;
        if ( v4 + 4 <= v5 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          v6 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v3);
          if ( *(_DWORD *)(a1 + 16) )
            v6 = (v6 << 24) | ((v6 & 0xFF00) << 8) | (v6 >> 8) & 0xFF00 | HIBYTE(v6);
          sub_1800010C0(&v115);
          v120 = 0LL;
          v121 = 0LL;
          v122 = 0;
          v7 = 0;
          v8 = *(_QWORD *)a1;
          for ( i = 0LL; i < 5; ++i )
          {
            if ( !v8 )
              goto LABEL_202;
            v10 = *(_DWORD *)(a1 + 12);
            if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
              goto LABEL_202;
            *(_DWORD *)(a1 + 8) += 4;
            v11 = *(_DWORD *)(a1 + 8);
            v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v8);
            v13 = *(_DWORD *)(a1 + 16);
            if ( v13 )
              v12 = (*(_DWORD *)((unsigned int)(v11 - 4) + v8) << 24) | ((*(_DWORD *)((unsigned int)(v11 - 4) + v8) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v11 - 4) + v8) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v11 - 4) + v8));
            if ( v11 + 4 > v10 )
              goto LABEL_202;
            *(_DWORD *)(a1 + 8) += 4;
            v14 = *(_DWORD *)(a1 + 8);
            v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v8);
            if ( v13 )
              v15 = (*(_DWORD *)((unsigned int)(v14 - 4) + v8) << 24) | ((*(_DWORD *)((unsigned int)(v14 - 4) + v8) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v14 - 4) + v8) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v14 - 4) + v8));
            if ( !i )
              v7 = v12;
            if ( v15 )
              *((_DWORD *)&v120 + i) = v15 + v11;
          }
          HIDWORD(v115) = v7;
          v16 = *(_DWORD *)(a1 + 12);
          if ( v14 + 4 <= v16 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v17 = *(_DWORD *)(a1 + 8);
            v18 = *(_DWORD *)((unsigned int)(v17 - 4) + v8);
            v19 = *(_DWORD *)(a1 + 16);
            if ( v19 )
              v18 = (*(_DWORD *)((unsigned int)(v17 - 4) + v8) << 24) | ((*(_DWORD *)((unsigned int)(v17 - 4) + v8) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v17 - 4) + v8) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v17 - 4) + v8));
            if ( v17 + 4 <= v16 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v20 = *(_DWORD *)(a1 + 8);
              v21 = v14 + v18;
              if ( !v18 )
                v21 = 0;
              if ( (_DWORD)qword_1800306F0 == 779 || (_DWORD)qword_1800306F0 == 866 || (_DWORD)qword_1800306F0 == 877 )
              {
                if ( v20 + 4 > v16 )
                  goto LABEL_202;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v16 )
                  goto LABEL_202;
                *(_DWORD *)(a1 + 8) += 4;
                v20 = *(_DWORD *)(a1 + 8);
              }
              if ( v20 + 4 <= v16 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                v22 = *(_DWORD *)(a1 + 8);
                v109 = *(_DWORD *)((unsigned int)(v22 - 4) + v8);
                if ( v19 )
                  v109 = (*(_DWORD *)((unsigned int)(v22 - 4) + v8) << 24) | ((*(_DWORD *)((unsigned int)(v22 - 4) + v8) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v22 - 4) + v8) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v22 - 4) + v8));
                if ( v22 + 4 <= v16 )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  memset(v111, 0, 12);
                  memset(v110, 0, 12);
                  if ( (unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)v111) )
                  {
                    if ( (unsigned int)sub_18001D5C0((__int64 *)a1, v110) )
                    {
                      if ( (_DWORD)v120 )
                        *(_DWORD *)(a1 + 8) = v120;
                      v23 = 0;
                      v24 = 0;
                      v25 = 0;
                      if ( v7 > 0 )
                      {
                        v26 = *(_QWORD *)a1;
                        while ( v26 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v27 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v26);
                          if ( *(_DWORD *)(a1 + 16) )
                            v27 = (v27 << 24) | ((v27 & 0xFF00) << 8) | (v27 >> 8) & 0xFF00 | HIBYTE(v27);
                          if ( !v25 )
                            v24 = v27;
                          if ( ++v25 >= v7 )
                            goto LABEL_50;
                        }
                        goto LABEL_203;
                      }
LABEL_50:
                      if ( HIDWORD(v120) )
                        *(_DWORD *)(a1 + 8) = HIDWORD(v120);
                      v28 = 0;
                      if ( v7 > 0 )
                      {
                        v29 = *(_QWORD *)a1;
                        v30 = 0LL;
                        v31 = &v117;
                        while ( v29 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v32 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v29);
                          if ( *(_DWORD *)(a1 + 16) )
                            v32 = (v32 << 24) | ((v32 & 0xFF00) << 8) | (v32 >> 8) & 0xFF00 | HIBYTE(v32);
                          if ( v28 < (int)v115 )
                            *(_DWORD *)v31 = v32;
                          ++v28;
                          ++v30;
                          v31 += 16;
                          if ( v30 >= v7 )
                            goto LABEL_61;
                        }
                        goto LABEL_202;
                      }
LABEL_61:
                      if ( (_DWORD)v121 )
                        *(_DWORD *)(a1 + 8) = v121;
                      v33 = 0;
                      if ( v7 > 0 )
                      {
                        v34 = *(_QWORD *)a1;
                        v35 = 0LL;
                        v36 = &v118;
                        while ( v34 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v37 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v34);
                          if ( *(_DWORD *)(a1 + 16) )
                            v37 = (v37 << 24) | ((v37 & 0xFF00) << 8) | (v37 >> 8) & 0xFF00 | HIBYTE(v37);
                          if ( v33 < (int)v115 )
                            *(_DWORD *)v36 = v37;
                          ++v33;
                          ++v35;
                          v36 += 16;
                          if ( v35 >= v7 )
                            goto LABEL_72;
                        }
                        goto LABEL_202;
                      }
LABEL_72:
                      if ( HIDWORD(v121) )
                        *(_DWORD *)(a1 + 8) = HIDWORD(v121);
                      v38 = 0;
                      if ( v7 > 0 )
                      {
                        v39 = *(_QWORD *)a1;
                        v40 = 0LL;
                        v41 = &v119;
                        while ( v39 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v42 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v39);
                          if ( *(_DWORD *)(a1 + 16) )
                            v42 = (v42 << 24) | ((v42 & 0xFF00) << 8) | (v42 >> 8) & 0xFF00 | HIBYTE(v42);
                          if ( v38 < (int)v115 )
                            *(_DWORD *)v41 = v42;
                          ++v38;
                          ++v40;
                          v41 += 16;
                          if ( v40 >= v7 )
                            goto LABEL_83;
                        }
                        goto LABEL_202;
                      }
LABEL_83:
                      if ( v122 )
                        *(_DWORD *)(a1 + 8) = v122;
                      v23 = 0;
                      v43 = 0;
                      v44 = 0;
                      if ( v7 > 0 )
                      {
                        v45 = *(_QWORD *)a1;
                        while ( v45 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v46 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v45);
                          if ( *(_DWORD *)(a1 + 16) )
                            v46 = (v46 << 24) | ((v46 & 0xFF00) << 8) | (v46 >> 8) & 0xFF00 | HIBYTE(v46);
                          v47 = v43 + 1;
                          if ( !v46 )
                            v47 = v43;
                          v43 = v47;
                          if ( ++v44 >= v7 )
                          {
                            if ( v47 <= 0 )
                              goto LABEL_98;
                            while ( 1 )
                            {
                              memset(v111, 0, 12);
                              memset(v110, 0, 12);
                              if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)v111)
                                || !(unsigned int)sub_18001D5C0((__int64 *)a1, v110) )
                              {
                                goto LABEL_203;
                              }
                              if ( v48 + 1 >= v49 )
                                goto LABEL_98;
                            }
                          }
                        }
                        goto LABEL_203;
                      }
LABEL_98:
                      if ( v21 )
                        *(_DWORD *)(a1 + 8) = v21;
                      v50 = *(_DWORD *)(a1 + 8);
                      if ( !v50 || (unsigned int)sub_180005100(a1, v113, v6, v50, v24, (int *)&v115) )
                      {
                        v51 = 0;
                        v107 = 0;
                        v52 = 0LL;
                        v111[0] = 0LL;
                        v53 = v109;
                        if ( v109 )
                        {
                          *(_QWORD *)v110 = v109;
                          v54 = 284LL * v109;
                          if ( !is_mul_ok(v109, 0x11CuLL) )
                            v54 = -1LL;
                          v55 = __CFADD__(v54, 8LL);
                          v56 = v54 + 8;
                          if ( v55 )
                            v56 = -1LL;
                          v57 = operator new(v56);
                          v112 = v57;
                          if ( v57 )
                          {
                            *v57 = v109;
                            v52 = (char *)(v57 + 1);
                            v111[0] = v57 + 1;
                            `eh vector constructor iterator'(
                              v57 + 1,
                              0x11CuLL,
                              v109,
                              (void (__stdcall *)(void *))sub_180010560,
                              guard_check_icall_nop);
                          }
                          else
                          {
                            v52 = 0LL;
                            v111[0] = 0LL;
                          }
                          v51 = 0;
                        }
                        LODWORD(v112) = 0;
                        if ( v109 )
                        {
                          *(_QWORD *)v110 = 0LL;
                          do
                          {
                            if ( (_DWORD)qword_1800306F0 == 866 || (_DWORD)qword_1800306F0 == 877 )
                            {
                              if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
                                goto LABEL_203;
                              *(_DWORD *)(a1 + 8) += 4;
                            }
                            memset(v123, 0, 0x104uLL);
                            v58 = *(_QWORD *)a1;
                            if ( !*(_QWORD *)a1 )
                              goto LABEL_203;
                            v59 = *(_DWORD *)(a1 + 12);
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            v60 = *(_DWORD *)(a1 + 8);
                            v61 = *(_DWORD *)((unsigned int)(v60 - 4) + v58);
                            v62 = *(_DWORD *)(a1 + 16);
                            if ( v62 )
                              v61 = (*(_DWORD *)((unsigned int)(v60 - 4) + v58) << 24) | ((*(_DWORD *)((unsigned int)(v60 - 4) + v58) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v60 - 4) + v58) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v60 - 4) + v58));
                            if ( (_DWORD)qword_1800306F0 == 866 || (_DWORD)qword_1800306F0 == 877 )
                            {
                              if ( v60 + 4 > v59 )
                                goto LABEL_203;
                              *(_DWORD *)(a1 + 8) += 4;
                              v60 = *(_DWORD *)(a1 + 8);
                            }
                            if ( v60 + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            v63 = *(_DWORD *)(a1 + 8);
                            v64 = *(_DWORD *)((unsigned int)(v63 - 4) + v58);
                            if ( v62 )
                              v64 = (*(_DWORD *)((unsigned int)(v63 - 4) + v58) << 24) | ((*(_DWORD *)((unsigned int)(v63 - 4) + v58) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v63 - 4) + v58) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v63 - 4) + v58));
                            if ( v61 > 100 )
                            {
                              *(_DWORD *)(a1 + 8) = v61;
                              v65 = 0LL;
                              while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 1) <= *(_DWORD *)(a1 + 12) )
                              {
                                v66 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v58);
                                if ( v65 < 260 )
                                  *((_BYTE *)v123 + v65) = v66;
                                ++v65;
                                if ( !v66 )
                                {
                                  if ( v65 >= 260 )
                                    BYTE3(v123[32]) = 0;
                                  else
                                    *((_BYTE *)v123 + v65) = 0;
                                  *(_DWORD *)(a1 + 8) = v63;
                                  break;
                                }
                              }
                            }
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            v67 = *(_DWORD *)(a1 + 8);
                            v68 = *(_DWORD *)((unsigned int)(v67 - 4) + v58);
                            if ( v62 )
                              v68 = (*(_DWORD *)((unsigned int)(v67 - 4) + v58) << 24) | ((*(_DWORD *)((unsigned int)(v67 - 4) + v58) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v67 - 4) + v58) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v67 - 4) + v58));
                            if ( v67 + 4 > v59 )
                              goto LABEL_203;
                            *(_DWORD *)(a1 + 8) += 4;
                            v69 = *(_DWORD *)(a1 + 8);
                            v70 = *(_DWORD *)((unsigned int)(v69 - 4) + v58);
                            if ( v62 )
                              v70 = (*(_DWORD *)((unsigned int)(v69 - 4) + v58) << 24) | ((*(_DWORD *)((unsigned int)(v69 - 4) + v58) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v69 - 4) + v58) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v69 - 4) + v58));
                            if ( v69 + 4 > v59 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 4;
                            v71 = *(_DWORD *)(a1 + 8);
                            v72 = *(_DWORD *)((unsigned int)(v71 - 4) + v58);
                            if ( v62 )
                              v72 = (*(_DWORD *)((unsigned int)(v71 - 4) + v58) << 24) | ((*(_DWORD *)((unsigned int)(v71 - 4) + v58) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v71 - 4) + v58) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v71 - 4) + v58));
                            if ( v71 + 4 > v59 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 4;
                            v73 = *(_DWORD *)(a1 + 8);
                            v74 = *(_DWORD *)((unsigned int)(v73 - 4) + v58);
                            if ( v62 )
                              v74 = (*(_DWORD *)((unsigned int)(v73 - 4) + v58) << 24) | ((*(_DWORD *)((unsigned int)(v73 - 4) + v58) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v73 - 4) + v58) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v73 - 4) + v58));
                            if ( v73 + 4 > v59 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 > v59 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 4;
                            v75 = v71 + v74;
                            if ( !v74 )
                              v75 = 0;
                            v51 = v72 + v107;
                            v107 += v72;
                            v52 = (char *)v111[0];
                            if ( v111[0] )
                            {
                              v76 = v123;
                              v77 = (char *)v111[0] + 284LL * (int)v112 - (_QWORD)v123;
                              do
                              {
                                v78 = *(_BYTE *)v76;
                                v77[(_QWORD)v76] = *(_BYTE *)v76;
                                v76 = (void **)((char *)v76 + 1);
                              }
                              while ( v78 );
                              v79 = *(_QWORD *)v110;
                              v80 = 284LL * *(_QWORD *)v110;
                              *(_DWORD *)&v52[v80 + 260] = v64;
                              *(_DWORD *)&v52[v80 + 264] = v72;
                              *(_DWORD *)&v52[v80 + 268] = v70;
                              *(_DWORD *)&v52[v80 + 272] = v75;
                              *(_DWORD *)&v52[v80 + 276] = v68;
                              v51 = v107;
                            }
                            else
                            {
                              v79 = *(_QWORD *)v110;
                            }
                            LODWORD(v112) = (_DWORD)v112 + 1;
                            *(_QWORD *)v110 = v79 + 1;
                            v53 = v109;
                            v23 = 0;
                          }
                          while ( (unsigned int)v112 < v109 );
                        }
                        v81 = v51 / 3;
                        if ( v51 / 3 )
                        {
                          if ( v81 <= 0 )
                            goto LABEL_203;
                          v82 = v113;
                          if ( !(unsigned int)sub_180001DD0(v113, v81) )
                            goto LABEL_203;
                          v83 = 0;
                          if ( *(int *)v82 > 0 )
                          {
                            v84 = 0LL;
                            do
                            {
                              *(_DWORD *)(v84 + *(_QWORD *)(v82 + 8)) = 3;
                              ++v83;
                              v84 += 20LL;
                            }
                            while ( v83 < *(_DWORD *)v82 );
                          }
                        }
                        LODWORD(v112) = 0;
                        v108 = 0;
                        if ( v53 )
                        {
                          v85 = 0LL;
                          v86 = v52 + 260;
                          while ( 1 )
                          {
                            *(_DWORD *)(a1 + 8) = v86[3];
                            v110[0] = v86[4];
                            v87 = 0;
                            v88 = 0;
                            if ( *v86 )
                              break;
LABEL_196:
                            v86[5] = v87;
                            v104 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
                            if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
                              v104 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
                            *(_DWORD *)(a1 + 8) = v104;
                            ++v108;
                            v86 += 71;
                            if ( v108 >= v109 )
                              goto LABEL_199;
                          }
                          v89 = 20 * v85;
                          while ( 1 )
                          {
                            v90 = *(_QWORD *)a1;
                            if ( !*(_QWORD *)a1 )
                              goto LABEL_202;
                            v91 = *(_DWORD *)(a1 + 12);
                            if ( *(_DWORD *)(a1 + 8) + 2 > v91 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 2;
                            v92 = *(_DWORD *)(a1 + 8);
                            v93 = *(_WORD *)((unsigned int)(v92 - 2) + v90);
                            v94 = *(_DWORD *)(a1 + 16);
                            if ( v94 )
                              v93 = (v93 << 8) | HIBYTE(v93);
                            if ( v92 + 2 > v91 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 2;
                            v95 = *(_DWORD *)(a1 + 8);
                            v96 = *(_WORD *)((unsigned int)(v95 - 2) + v90);
                            if ( v94 )
                              v96 = (v96 << 8) | HIBYTE(v96);
                            if ( v95 + 2 > v91 )
                              goto LABEL_202;
                            *(_DWORD *)(a1 + 8) += 2;
                            v97 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2) + v90);
                            if ( v94 )
                              v97 = (v97 << 8) | HIBYTE(v97);
                            v98 = v93;
                            if ( v87 > v93 )
                              v98 = v87;
                            v99 = v96;
                            if ( v98 > v96 )
                              v99 = v98;
                            v87 = v97;
                            if ( v99 > v97 )
                              v87 = v99;
                            v100 = v113;
                            v101 = *(_QWORD *)(v113 + 8);
                            if ( v101 )
                            {
                              v102 = v93;
                              v103 = v110[0];
                              *(_DWORD *)(v101 + v89 + 4) = v110[0] + v102;
                              *(_DWORD *)(*(_QWORD *)(v100 + 8) + v89 + 8) = v103 + v96;
                              *(_DWORD *)(*(_QWORD *)(v100 + 8) + v89 + 12) = v103 + v97;
                            }
                            LODWORD(v112) = (_DWORD)v112 + 1;
                            ++v85;
                            v89 += 20LL;
                            if ( (unsigned int)++v88 >= *v86 )
                              goto LABEL_196;
                          }
                        }
LABEL_199:
                        if ( v111[0] )
                        {
                          v105 = (char *)v111[0] - 8;
                          `eh vector destructor iterator'(
                            v111[0],
                            0x11CuLL,
                            *((_QWORD *)v111[0] - 1),
                            guard_check_icall_nop);
                          j_j_j_free(v105);
                        }
                        v23 = 1;
                      }
LABEL_203:
                      `eh vector destructor iterator'(v116, 0x10uLL, 0xAuLL, guard_check_icall_nop);
                      return v23;
                    }
                  }
                }
              }
            }
          }
LABEL_202:
          v23 = 0;
          goto LABEL_203;
        }
      }
    }
  }
  return 0LL;
}
// 180013082: conditional instruction was optimized away because rdi.8!=0
// 1800134EE: variable 'v48' is possibly undefined
// 1800134F4: variable 'v49' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180012ED0: using guessed type char var_218[4];

//----- (0000000180013C40) ----------------------------------------------------
__int64 __fastcall sub_180013C40(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v7; // r11
  __int64 v8; // rax
  unsigned int v9; // r9d
  int v10; // r8d
  int v11; // esi
  unsigned int v12; // r12d
  int v13; // ecx
  unsigned int v14; // r8d
  int v15; // r14d
  __int64 v16; // rdi
  __int64 v17; // r10
  unsigned int v18; // r8d
  int v19; // r11d
  int v20; // r9d
  int v21; // esi
  int v22; // r15d
  int v23; // r8d
  unsigned int v24; // r8d
  int v25; // r9d
  int v26; // r10d
  int v27; // edx
  int v28; // ecx
  int v29; // r9d
  unsigned int v30; // r8d
  int v31; // eax
  unsigned int v32; // r15d
  int v33; // r9d
  __int64 v34; // r10
  unsigned int v35; // r8d
  int v36; // r9d
  __int64 v37; // rdi
  __int64 v38; // r11
  char *v39; // r10
  unsigned int v40; // r8d
  int v41; // r9d
  __int64 v42; // rdi
  __int64 v43; // r11
  char *v44; // r10
  unsigned int v45; // r8d
  int v46; // r9d
  __int64 v47; // rdi
  __int64 v48; // r11
  char *v49; // r10
  unsigned int v50; // r8d
  int v51; // ecx
  __int64 v52; // rdx
  __int64 v53; // r9
  unsigned int v54; // r8d
  int v55; // r10d
  unsigned int v56; // esi
  int v57; // r11d
  int v58; // r10d
  int v59; // edi
  int v60; // r9d
  int v61; // r15d
  int v62; // ecx
  __int64 v63; // rdx
  unsigned int v64; // esi
  __int64 v65; // r10
  __int64 v66; // rdx
  unsigned int v67; // r11d
  int v68; // r9d
  unsigned __int16 v69; // r8
  int v70; // edi
  int v71; // r14d
  unsigned __int16 v72; // r9
  unsigned __int16 v73; // dx
  __int64 v74; // rcx
  unsigned int v75; // eax
  int v77; // [rsp+30h] [rbp-D0h]
  int v78; // [rsp+34h] [rbp-CCh]
  int v79; // [rsp+38h] [rbp-C8h]
  unsigned int v80; // [rsp+40h] [rbp-C0h] BYREF
  __int64 v81; // [rsp+44h] [rbp-BCh]
  unsigned int v82; // [rsp+50h] [rbp-B0h] BYREF
  __int64 v83; // [rsp+54h] [rbp-ACh]
  __int64 v84; // [rsp+60h] [rbp-A0h]
  __int64 v85; // [rsp+70h] [rbp-90h] BYREF
  char v86[4]; // [rsp+78h] [rbp-88h] BYREF
  char v87; // [rsp+7Ch] [rbp-84h] BYREF
  char v88; // [rsp+80h] [rbp-80h] BYREF
  char v89; // [rsp+84h] [rbp-7Ch] BYREF
  __int64 v90; // [rsp+120h] [rbp+20h]
  __int64 v91; // [rsp+128h] [rbp+28h]
  int v92; // [rsp+130h] [rbp+30h]

  v84 = -2LL;
  if ( !a2 )
    return 0LL;
  v7 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v8 = *(unsigned int *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if ( (int)v8 + 4 > v9 )
    return 0LL;
  v10 = *(_DWORD *)(v8 + v7);
  v11 = *(_DWORD *)(a1 + 16);
  if ( v11 )
    v10 = (*(_DWORD *)(v8 + v7) << 24) | ((*(_DWORD *)(v8 + v7) & 0xFF00) << 8) | (*(_DWORD *)(v8 + v7) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v8 + v7));
  if ( !v10 )
    *(_DWORD *)(a1 + 8) = v8 + 4;
  v12 = 0;
  v13 = 0;
  if ( a4 )
  {
    while ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v13 >= a4 )
        goto LABEL_11;
    }
    return 0LL;
  }
LABEL_11:
  if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v78 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v7);
  if ( v11 )
  {
    v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v7);
    v78 = (v14 << 24) | ((v14 & 0xFF00) << 8) | (v14 >> 8) & 0xFF00 | HIBYTE(v14);
  }
  sub_1800010C0(&v85);
  v90 = 0LL;
  v91 = 0LL;
  v92 = 0;
  v15 = 0;
  v16 = *(_QWORD *)a1;
  v17 = 0LL;
  while ( v16 )
  {
    v18 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v16);
    v21 = *(_DWORD *)(a1 + 16);
    if ( v21 )
      v20 = (*(_DWORD *)((unsigned int)(v19 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v19 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v19 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v19 - 4) + v16));
    if ( v19 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v22 = *(_DWORD *)(a1 + 8);
    v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v16);
    if ( v21 )
      v23 = (*(_DWORD *)((unsigned int)(v22 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v22 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v22 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v22 - 4) + v16));
    if ( !v17 )
      v15 = v20;
    if ( v23 )
      *((_DWORD *)&v90 + v17) = v23 + v19;
    if ( ++v17 >= 5 )
    {
      HIDWORD(v85) = v15;
      v24 = *(_DWORD *)(a1 + 12);
      if ( v22 + 4 <= v24 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 <= v24 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v24 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v25 = *(_DWORD *)(a1 + 8);
            v77 = *(_DWORD *)((unsigned int)(v25 - 4) + v16);
            v26 = *(_DWORD *)(a1 + 16);
            if ( v26 )
              v77 = (*(_DWORD *)((unsigned int)(v25 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v25 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v25 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v25 - 4) + v16));
            if ( v25 + 4 <= v24 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v27 = 3;
              if ( (_DWORD)qword_1800306F0 == 884 )
                v27 = 2;
              v28 = 0;
              while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
              {
                *(_DWORD *)(a1 + 8) += 4;
                if ( ++v28 >= v27 )
                {
                  if ( *(_DWORD *)(a1 + 8) + 4 <= v24 )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    v29 = *(_DWORD *)(a1 + 8);
                    if ( v29 + 4 <= v24 )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      v30 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v16);
                      if ( v26 )
                        v30 = (v30 << 24) | ((v30 & 0xFF00) << 8) | (v30 >> 8) & 0xFF00 | HIBYTE(v30);
                      v31 = v29 + v30;
                      if ( !v30 )
                        v31 = 0;
                      v79 = v31;
                      v81 = 0LL;
                      v80 = 0;
                      v83 = 0LL;
                      v82 = 0;
                      if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v80) )
                      {
                        if ( (unsigned int)sub_18001D5C0((__int64 *)a1, &v82) )
                        {
                          if ( (_DWORD)v90 )
                            *(_DWORD *)(a1 + 8) = v90;
                          v32 = 0;
                          v33 = 0;
                          if ( v15 <= 0 )
                          {
LABEL_59:
                            if ( HIDWORD(v90) )
                              *(_DWORD *)(a1 + 8) = HIDWORD(v90);
                            v36 = 0;
                            if ( v15 <= 0 )
                            {
LABEL_70:
                              if ( (_DWORD)v91 )
                                *(_DWORD *)(a1 + 8) = v91;
                              v41 = 0;
                              if ( v15 <= 0 )
                              {
LABEL_81:
                                if ( HIDWORD(v91) )
                                  *(_DWORD *)(a1 + 8) = HIDWORD(v91);
                                v46 = 0;
                                if ( v15 <= 0 )
                                {
LABEL_92:
                                  if ( v92 )
                                    *(_DWORD *)(a1 + 8) = v92;
                                  v51 = 0;
                                  if ( v15 <= 0 )
                                  {
LABEL_99:
                                    if ( v79 )
                                      *(_DWORD *)(a1 + 8) = v79;
                                    v53 = *(_QWORD *)a1;
                                    if ( *(_QWORD *)a1 )
                                    {
                                      v54 = *(_DWORD *)(a1 + 12);
                                      if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                      {
                                        *(_DWORD *)(a1 + 8) += 4;
                                        if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                        {
                                          *(_DWORD *)(a1 + 8) += 4;
                                          if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                          {
                                            *(_DWORD *)(a1 + 8) += 4;
                                            if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                            {
                                              *(_DWORD *)(a1 + 8) += 4;
                                              if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                              {
                                                *(_DWORD *)(a1 + 8) += 4;
                                                if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                {
                                                  *(_DWORD *)(a1 + 8) += 4;
                                                  if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                  {
                                                    *(_DWORD *)(a1 + 8) += 4;
                                                    if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                    {
                                                      *(_DWORD *)(a1 + 8) += 4;
                                                      if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                      {
                                                        *(_DWORD *)(a1 + 8) += 4;
                                                        if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                        {
                                                          *(_DWORD *)(a1 + 8) += 4;
                                                          if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                          {
                                                            *(_DWORD *)(a1 + 8) += 4;
                                                            v55 = *(_DWORD *)(a1 + 8);
                                                            v56 = *(_DWORD *)((unsigned int)(v55 - 4) + v53);
                                                            v57 = *(_DWORD *)(a1 + 16);
                                                            if ( v57 )
                                                              v56 = (*(_DWORD *)((unsigned int)(v55 - 4) + v53) << 24) | ((*(_DWORD *)((unsigned int)(v55 - 4) + v53) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v55 - 4) + v53) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v55 - 4) + v53));
                                                            if ( v55 + 4 <= v54 )
                                                            {
                                                              *(_DWORD *)(a1 + 8) += 4;
                                                              if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                              {
                                                                *(_DWORD *)(a1 + 8) += 4;
                                                                if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                                {
                                                                  *(_DWORD *)(a1 + 8) += 4;
                                                                  v58 = *(_DWORD *)(a1 + 8);
                                                                  v59 = *(_DWORD *)((unsigned int)(v58 - 4) + v53);
                                                                  if ( v57 )
                                                                    v59 = (*(_DWORD *)((unsigned int)(v58 - 4) + v53) << 24) | ((*(_DWORD *)((unsigned int)(v58 - 4) + v53) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v58 - 4) + v53) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v58 - 4) + v53));
                                                                  if ( v58 + 4 <= v54 )
                                                                  {
                                                                    *(_DWORD *)(a1 + 8) += 4;
                                                                    if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                                    {
                                                                      *(_DWORD *)(a1 + 8) += 4;
                                                                      if ( *(_DWORD *)(a1 + 8) + 4 <= v54 )
                                                                      {
                                                                        *(_DWORD *)(a1 + 8) += 4;
                                                                        *(_DWORD *)(a1 + 8) += 24;
                                                                        if ( v77 )
                                                                          *(_DWORD *)(a1 + 8) = v77;
                                                                        v60 = *(_DWORD *)(a1 + 8);
                                                                        if ( !v60
                                                                          || (unsigned int)sub_180005100(
                                                                                             a1,
                                                                                             a2,
                                                                                             v78,
                                                                                             v60,
                                                                                             v32,
                                                                                             (int *)&v85) )
                                                                        {
                                                                          if ( v59 )
                                                                            *(_DWORD *)(a1 + 8) = v59;
                                                                          v61 = v56 / 3;
                                                                          if ( v56 / 3 )
                                                                          {
                                                                            if ( v61 <= 0
                                                                              || !(unsigned int)sub_180001DD0(a2, v61) )
                                                                            {
                                                                              goto LABEL_153;
                                                                            }
                                                                            v62 = 0;
                                                                            if ( *(int *)a2 > 0 )
                                                                            {
                                                                              v63 = 0LL;
                                                                              do
                                                                              {
                                                                                *(_DWORD *)(v63 + *(_QWORD *)(a2 + 8)) = 3;
                                                                                ++v62;
                                                                                v63 += 20LL;
                                                                              }
                                                                              while ( v62 < *(_DWORD *)a2 );
                                                                            }
                                                                          }
                                                                          v64 = 0;
                                                                          if ( v61 )
                                                                          {
                                                                            v65 = 0LL;
                                                                            while ( 1 )
                                                                            {
                                                                              v66 = *(_QWORD *)a1;
                                                                              if ( !*(_QWORD *)a1 )
                                                                                break;
                                                                              v67 = *(_DWORD *)(a1 + 12);
                                                                              if ( *(_DWORD *)(a1 + 8) + 2 > v67 )
                                                                                break;
                                                                              *(_DWORD *)(a1 + 8) += 2;
                                                                              v68 = *(_DWORD *)(a1 + 8);
                                                                              v69 = *(_WORD *)((unsigned int)(v68 - 2)
                                                                                             + v66);
                                                                              v70 = *(_DWORD *)(a1 + 16);
                                                                              if ( v70 )
                                                                                v69 = (v69 << 8) | HIBYTE(v69);
                                                                              if ( v68 + 2 > v67 )
                                                                                break;
                                                                              *(_DWORD *)(a1 + 8) += 2;
                                                                              v71 = *(_DWORD *)(a1 + 8);
                                                                              v72 = *(_WORD *)((unsigned int)(v71 - 2)
                                                                                             + v66);
                                                                              if ( v70 )
                                                                                v72 = (v72 << 8) | HIBYTE(v72);
                                                                              if ( v71 + 2 > v67 )
                                                                                break;
                                                                              *(_DWORD *)(a1 + 8) += 2;
                                                                              v73 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2)
                                                                                             + v66);
                                                                              if ( v70 )
                                                                                v73 = (v73 << 8) | HIBYTE(v73);
                                                                              v74 = *(_QWORD *)(a2 + 8);
                                                                              if ( v74 )
                                                                              {
                                                                                *(_DWORD *)(v74 + v65 + 4) = v69;
                                                                                *(_DWORD *)(*(_QWORD *)(a2 + 8) + v65 + 8) = v72;
                                                                                *(_DWORD *)(*(_QWORD *)(a2 + 8)
                                                                                          + v65
                                                                                          + 12) = v73;
                                                                              }
                                                                              ++v64;
                                                                              v65 += 20LL;
                                                                              if ( v64 >= v61 )
                                                                                goto LABEL_150;
                                                                            }
                                                                          }
                                                                          else
                                                                          {
LABEL_150:
                                                                            v75 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
                                                                            if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
                                                                              v75 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
                                                                            *(_DWORD *)(a1 + 8) = v75;
                                                                            v12 = 1;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v52 = *(_QWORD *)a1;
                                    while ( v52 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                                    {
                                      *(_DWORD *)(a1 + 8) += 4;
                                      if ( ++v51 >= v15 )
                                        goto LABEL_99;
                                    }
                                  }
                                }
                                else
                                {
                                  v47 = *(_QWORD *)a1;
                                  v48 = 0LL;
                                  v49 = &v89;
                                  while ( v47 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                                  {
                                    *(_DWORD *)(a1 + 8) += 4;
                                    v50 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v47);
                                    if ( *(_DWORD *)(a1 + 16) )
                                      v50 = (v50 << 24) | ((v50 & 0xFF00) << 8) | (v50 >> 8) & 0xFF00 | HIBYTE(v50);
                                    if ( v46 < (int)v85 )
                                      *(_DWORD *)v49 = v50;
                                    ++v46;
                                    ++v48;
                                    v49 += 16;
                                    if ( v48 >= v15 )
                                      goto LABEL_92;
                                  }
                                }
                              }
                              else
                              {
                                v42 = *(_QWORD *)a1;
                                v43 = 0LL;
                                v44 = &v88;
                                while ( v42 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                                {
                                  *(_DWORD *)(a1 + 8) += 4;
                                  v45 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v42);
                                  if ( *(_DWORD *)(a1 + 16) )
                                    v45 = (v45 << 24) | ((v45 & 0xFF00) << 8) | (v45 >> 8) & 0xFF00 | HIBYTE(v45);
                                  if ( v41 < (int)v85 )
                                    *(_DWORD *)v44 = v45;
                                  ++v41;
                                  ++v43;
                                  v44 += 16;
                                  if ( v43 >= v15 )
                                    goto LABEL_81;
                                }
                              }
                            }
                            else
                            {
                              v37 = *(_QWORD *)a1;
                              v38 = 0LL;
                              v39 = &v87;
                              while ( v37 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                              {
                                *(_DWORD *)(a1 + 8) += 4;
                                v40 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v37);
                                if ( *(_DWORD *)(a1 + 16) )
                                  v40 = (v40 << 24) | ((v40 & 0xFF00) << 8) | (v40 >> 8) & 0xFF00 | HIBYTE(v40);
                                if ( v36 < (int)v85 )
                                  *(_DWORD *)v39 = v40;
                                ++v36;
                                ++v38;
                                v39 += 16;
                                if ( v38 >= v15 )
                                  goto LABEL_70;
                              }
                            }
                          }
                          else
                          {
                            v34 = *(_QWORD *)a1;
                            while ( v34 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                            {
                              *(_DWORD *)(a1 + 8) += 4;
                              v35 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v34);
                              if ( *(_DWORD *)(a1 + 16) )
                                v35 = (v35 << 24) | ((v35 & 0xFF00) << 8) | (v35 >> 8) & 0xFF00 | HIBYTE(v35);
                              if ( !v33 )
                                v32 = v35;
                              if ( ++v33 >= v15 )
                                goto LABEL_59;
                            }
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_153;
                }
              }
            }
          }
        }
      }
      break;
    }
  }
LABEL_153:
  `eh vector destructor iterator'(v86, 0x10uLL, 0xAuLL, guard_check_icall_nop);
  return v12;
}
// 180013E64: conditional instruction was optimized away because rdi.8!=0
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180013C40: using guessed type char var_F8[4];

//----- (0000000180014610) ----------------------------------------------------
__int64 __fastcall sub_180014610(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v6; // r9
  unsigned int v7; // r8d
  int v8; // r11d
  unsigned __int32 v9; // r10d
  int v10; // edx
  unsigned __int32 v11; // edi
  int v12; // r14d
  unsigned int v13; // esi
  __int64 *v14; // rcx
  int v15; // r9d
  unsigned int v16; // edi
  __int64 v17; // r9
  char *v18; // rdx
  char v19; // cl
  char *v20; // rdx
  char v21; // al
  char v22[272]; // [rsp+20h] [rbp-238h] BYREF
  char v23[272]; // [rsp+130h] [rbp-128h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  memset(v22, 0, 0x104uLL);
  memset(v23, 0, 0x104uLL);
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  if ( a3 + 4 > v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = a3 + 4;
  v9 = *(_DWORD *)(a3 + v6);
  if ( v8 )
    v9 = _byteswap_ulong(v9);
  if ( a3 + 8 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v6);
  if ( v8 )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v6);
  if ( v8 )
    v13 = _byteswap_ulong(v13);
  if ( v12 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  sub_180005050((__int64 *)a1, v9, (__int64)v22);
  sub_180005050(v14, v11, (__int64)v23);
  v16 = v12 + v15;
  if ( !v15 )
    v16 = 0;
  v17 = sub_180001A00((__int64)&qword_1800306F0);
  if ( v17 )
  {
    v18 = v22;
    do
    {
      v19 = *v18;
      v18[v17 - (_QWORD)v22] = *v18;
      ++v18;
    }
    while ( v19 );
    v20 = v23;
    do
    {
      v21 = *v20;
      v20[v17 - (_QWORD)v23 + 260] = *v20;
      ++v20;
    }
    while ( v21 );
    *(_DWORD *)(v17 + 1300) = -1;
  }
  dword_180030748 = 0;
  sub_180014820(a1, 0, v16, v13);
  return 1LL;
}
// 180014730: variable 'v14' is possibly undefined
// 180014738: variable 'v15' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030748: using guessed type int dword_180030748;

//----- (0000000180014820) ----------------------------------------------------
__int64 __fastcall sub_180014820(__int64 a1, int a2, unsigned int a3, unsigned int a4)
{
  __int64 v6; // r9
  unsigned int v7; // r8d
  int v8; // r11d
  int v9; // r10d
  unsigned __int32 v10; // edx
  int v11; // r11d
  unsigned __int32 v12; // ebx
  __int64 *v13; // rcx
  __int64 *v14; // rcx
  int v15; // r9d
  __int64 *v16; // rcx
  __int64 v17; // r8
  unsigned int v18; // edx
  int v19; // r10d
  int v20; // r9d
  int v21; // r10d
  int v22; // r10d
  __int64 v23; // rsi
  char *v24; // rdx
  char v25; // cl
  char *v26; // rcx
  char v27; // al
  char *v28; // rcx
  char v29; // al
  __int128 v30; // xmm0
  int v31; // eax
  int v32; // eax
  __int64 v33; // r8
  int v34; // ebx
  __int64 v35; // r8
  unsigned int v36; // r9d
  unsigned __int32 v37; // [rsp+30h] [rbp-D0h]
  unsigned __int32 v38; // [rsp+34h] [rbp-CCh]
  unsigned __int32 v39; // [rsp+38h] [rbp-C8h]
  int v40; // [rsp+3Ch] [rbp-C4h]
  int v41; // [rsp+40h] [rbp-C0h]
  int v42; // [rsp+44h] [rbp-BCh]
  int v44; // [rsp+4Ch] [rbp-B4h]
  __int64 v46[2]; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v47[2]; // [rsp+68h] [rbp-98h] BYREF
  __int128 v48; // [rsp+78h] [rbp-88h] BYREF
  char v49[272]; // [rsp+90h] [rbp-70h] BYREF
  char v50[272]; // [rsp+1A0h] [rbp+A0h] BYREF
  char v51[272]; // [rsp+2B0h] [rbp+1B0h] BYREF

  if ( a3 <= 0x63 || a3 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  v41 = dword_180030728 - 1;
  v40 = 0;
  if ( !a4 )
    return 1LL;
  while ( 1 )
  {
    memset(v49, 0, 0x104uLL);
    memset(v50, 0, 0x104uLL);
    memset(v51, 0, 0x104uLL);
    v6 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v7 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    v10 = *(_DWORD *)((unsigned int)(v8 - 4) + v6);
    if ( v9 )
      v10 = _byteswap_ulong(v10);
    if ( v8 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v6);
    if ( v9 )
      v12 = _byteswap_ulong(v12);
    if ( v11 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    sub_180005050((__int64 *)a1, v10, (__int64)v49);
    sub_180005050(v13, v12, (__int64)v50);
    sub_180005050(v14, v15, (__int64)v51);
    memset(v46, 0, 12);
    v48 = 0uLL;
    memset(v47, 0, 12);
    if ( !(unsigned int)sub_18001D5C0(v16, (unsigned int *)v46) )
      break;
    if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v48) )
      break;
    if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)v47) )
      break;
    if ( !*(_QWORD *)a1 )
      break;
    if ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    ++dword_180030748;
    v17 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v18 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v19 = *(_DWORD *)(a1 + 8);
    v20 = *(_DWORD *)(a1 + 16);
    v42 = v19;
    v38 = *(_DWORD *)((unsigned int)(v19 - 4) + v17);
    if ( v20 )
      v38 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v17));
    if ( v19 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v21 = *(_DWORD *)(a1 + 8);
    v37 = *(_DWORD *)((unsigned int)(v21 - 4) + v17);
    if ( v20 )
      v37 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v17));
    if ( v21 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v44 = *(_DWORD *)(a1 + 8);
    if ( v44 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v22 = *(_DWORD *)(a1 + 8);
    v39 = *(_DWORD *)((unsigned int)(v22 - 4) + v17);
    if ( v20 )
      v39 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v17));
    if ( v22 + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v23 = sub_180001A00((__int64)&qword_1800306F0);
    if ( v23 )
    {
      v24 = v49;
      do
      {
        v25 = *v24;
        v24[v23 - (_QWORD)v49] = *v24;
        ++v24;
      }
      while ( v25 );
      v26 = v50;
      do
      {
        v27 = *v26;
        v26[v23 - (_QWORD)v50 + 260] = *v26;
        ++v26;
      }
      while ( v27 );
      v28 = v51;
      do
      {
        v29 = *v28;
        v28[v23 - (_QWORD)v51 + 520] = *v28;
        ++v28;
      }
      while ( v29 );
      *(_QWORD *)(v23 + 1312) = v46[0];
      v30 = v48;
      *(_DWORD *)(v23 + 1300) = v41;
      v31 = v46[1];
      *(_OWORD *)(v23 + 1336) = v30;
      *(_DWORD *)(v23 + 1320) = v31;
      v32 = v47[1];
      *(_QWORD *)(v23 + 1324) = v47[0];
      *(_DWORD *)(v23 + 1332) = v32;
    }
    v33 = v37 + v42;
    v34 = *(_DWORD *)(a1 + 8);
    if ( !v37 )
      v33 = 0LL;
    sub_180014820(a1, (unsigned int)(a2 + 1), v33, v38);
    v36 = v39 + v44;
    if ( !v39 )
      v36 = 0;
    sub_180014C60(a1, v23, v35, v36);
    *(_DWORD *)(a1 + 8) = v34;
    if ( ++v40 >= a4 )
      return 1LL;
  }
  return 0LL;
}
// 18001496F: variable 'v13' is possibly undefined
// 18001497E: variable 'v14' is possibly undefined
// 18001497E: variable 'v15' is possibly undefined
// 1800149BB: variable 'v16' is possibly undefined
// 180014C08: variable 'v35' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030728: using guessed type int dword_180030728;
// 180030748: using guessed type int dword_180030748;
// 180014820: using guessed type __int128 var_368;

//----- (0000000180014C60) ----------------------------------------------------
__int64 __fastcall sub_180014C60(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v6; // r9
  unsigned int v7; // r10d
  __int64 v8; // r8
  int v9; // r11d
  unsigned __int32 v10; // edx
  unsigned int v11; // eax
  unsigned int v12; // r9d
  int v13; // ebx

  if ( a4 < 0x64 || a4 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  ++dword_180030748;
  v6 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    v7 = *(_DWORD *)(a1 + 12);
    v8 = (unsigned int)(*(_DWORD *)(a1 + 8) + 4);
    if ( (unsigned int)v8 <= v7 )
    {
      v9 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v8;
      v10 = *(_DWORD *)((unsigned int)(v8 - 4) + v6);
      if ( v9 )
        v10 = _byteswap_ulong(v10);
      if ( (int)v8 + 4 <= v7 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
        if ( v9 )
          v11 = _byteswap_ulong(v11);
        *(_DWORD *)(a2 + 1304) = v10;
        v12 = v8 + v11;
        v13 = *(_DWORD *)(a1 + 8);
        if ( !v11 )
          v12 = 0;
        sub_180014D40(a1, a2, v8, v12, v10);
        *(_DWORD *)(a1 + 8) = v13;
        return 1LL;
      }
    }
  }
  return 0LL;
}
// 180030748: using guessed type int dword_180030748;

//----- (0000000180014D40) ----------------------------------------------------
__int64 __fastcall sub_180014D40(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5)
{
  unsigned int v9; // esi
  __int64 v10; // rdx
  unsigned int v11; // ebx
  int v12; // r8d
  unsigned __int32 v13; // r10d
  int v14; // r9d
  unsigned __int32 v15; // ebx
  __int64 *v16; // rcx
  __int64 *v17; // rcx
  int v18; // r9d
  __int64 v19; // r9
  unsigned int v20; // ecx
  int v21; // r10d
  __int64 v22; // r8
  char *v23; // rcx
  char v24; // al
  int v25; // ebx
  unsigned int v26; // r9d
  char v27[272]; // [rsp+30h] [rbp-248h] BYREF
  char v28[272]; // [rsp+140h] [rbp-138h] BYREF

  if ( !a4 )
    return 1LL;
  if ( a4 >= 0x64 )
  {
    v9 = *(_DWORD *)(a1 + 12);
    if ( a4 < v9 )
    {
      *(_DWORD *)(a1 + 8) = a4;
      if ( a5 == 3 )
      {
        memset(v27, 0, 0x104uLL);
        v10 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v11 = a4 + 4;
        if ( v11 > v9 )
          return 0LL;
        v12 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v11;
        v13 = *(_DWORD *)(v11 - 4 + v10);
        if ( v12 )
          v13 = _byteswap_ulong(v13);
        if ( v11 + 4 > v9 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v14 = *(_DWORD *)(a1 + 8);
        v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v10);
        if ( v12 )
          v15 = _byteswap_ulong(v15);
        if ( v14 + 4 > v9 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v13, (__int64)v28);
        sub_180005050(v16, v15, (__int64)v27);
        sub_180005050(v17, v18, (__int64)v28);
        v19 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v20 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v20 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v21 = *(_DWORD *)(a1 + 8);
        if ( v21 + 4 > v20 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v22 = *(unsigned int *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v19);
        if ( *(_DWORD *)(a1 + 16) )
          v22 = _byteswap_ulong(v22);
        v23 = v27;
        do
        {
          v24 = *v23;
          v23[a2 - (_QWORD)v27 + 780] = *v23;
          ++v23;
        }
        while ( v24 );
        v25 = *(_DWORD *)(a1 + 8);
        v26 = v21 + v22;
        if ( !(_DWORD)v22 )
          v26 = 0;
        sub_180009870(a1, a2, v22, v26);
        *(_DWORD *)(a1 + 8) = v25;
      }
    }
  }
  return 1LL;
}
// 180014E3D: variable 'v16' is possibly undefined
// 180014E4D: variable 'v17' is possibly undefined
// 180014E4D: variable 'v18' is possibly undefined

//----- (0000000180014F10) ----------------------------------------------------
__int64 __fastcall sub_180014F10(__int64 a1, unsigned int a2, int a3)
{
  __int64 v7; // rdx
  unsigned int v8; // r8d
  int v9; // r10d
  unsigned __int32 v10; // edx
  int v11; // r9d
  unsigned int v12; // esi
  __int64 v13; // r9
  unsigned int v14; // r8d
  int v15; // r14d
  int v16; // r10d
  __int64 v17; // rdx
  int v18; // edi
  unsigned int v19; // r11d
  int v20; // edi
  int v21; // r8d
  char v22[272]; // [rsp+20h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( a2 )
  {
    while ( 1 )
    {
      v7 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
      if ( *(_DWORD *)(a1 + 16) )
        v10 = _byteswap_ulong(v10);
      if ( v9 + 4 > v8 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v10, (__int64)v22);
      if ( v11 + 1 >= a2 )
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v12 = 0;
    *(_DWORD *)(a1 + 8) = a3;
    if ( a2 )
    {
      while ( 1 )
      {
        v13 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v14 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_DWORD *)(a1 + 16);
        v17 = *(unsigned int *)((unsigned int)(v15 - 4) + v13);
        if ( v16 )
          v17 = _byteswap_ulong(v17);
        if ( v15 + 4 > v14 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v18 = *(_DWORD *)(a1 + 8);
        v19 = *(_DWORD *)((unsigned int)(v18 - 4) + v13);
        if ( v16 )
          v19 = _byteswap_ulong(v19);
        if ( (int)v17 > 100 )
        {
          *(_DWORD *)(a1 + 8) = v17;
          v17 = 0LL;
          while ( *(_DWORD *)(a1 + 8) + 1 <= v14 )
          {
            ++*(_DWORD *)(a1 + 8);
            ++v17;
            if ( !*(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8) - 1) + v13) )
            {
              if ( v17 < 260 )
                v22[v17] = 0;
              *(_DWORD *)(a1 + 8) = v18;
              break;
            }
          }
        }
        v20 = *(_DWORD *)(a1 + 8);
        v21 = v15 + v19;
        if ( !v19 )
          v21 = 0;
        if ( !(unsigned int)sub_1800150F0(a1, v17, v21) )
          return 0LL;
        ++v12;
        *(_DWORD *)(a1 + 8) = v20;
        if ( v12 >= a2 )
          return 1LL;
      }
    }
    else
    {
      return 1LL;
    }
  }
}
// 180014FB7: variable 'v11' is possibly undefined
// 180014F10: using guessed type char var_138[272];

//----- (00000001800150F0) ----------------------------------------------------
__int64 __fastcall sub_1800150F0(__int64 a1, __int64 a2, int a3)
{
  __int64 v5; // rdx
  unsigned int v6; // r9d
  unsigned int v7; // r8d
  int v8; // r10d
  unsigned int v9; // r14d
  unsigned int v10; // edi
  __int64 v11; // rdx
  unsigned int v12; // r8d
  int v13; // r11d
  int v14; // r9d
  unsigned __int32 v15; // r10d
  int v16; // r11d
  unsigned int v17; // r12d
  int v18; // r11d
  int v19; // r11d
  unsigned int v20; // r15d
  int v21; // r11d
  int v22; // r11d
  int v23; // r11d
  unsigned int v24; // r13d
  int v25; // r11d
  unsigned int v26; // esi
  unsigned int v27; // r8d
  int v28; // ecx
  int v29; // edx
  unsigned int v30; // edx
  int v31; // eax
  int v32; // edi
  unsigned int v33; // r14d
  int v34; // esi
  __int64 v35; // rdx
  unsigned __int32 v36; // edx
  int v37; // r9d
  int v38; // r10d
  __int64 v39; // r14
  unsigned int v40; // r8d
  int v41; // r15d
  unsigned int v42; // esi
  int v43; // r9d
  int v44; // r10d
  int v45; // r11d
  unsigned int v46; // edx
  int v47; // ecx
  int v48; // [rsp+20h] [rbp-E0h]
  int v49; // [rsp+20h] [rbp-E0h]
  int v50; // [rsp+24h] [rbp-DCh]
  int v51; // [rsp+24h] [rbp-DCh]
  int v52; // [rsp+28h] [rbp-D8h]
  unsigned int v53; // [rsp+28h] [rbp-D8h]
  int v54; // [rsp+2Ch] [rbp-D4h]
  int v55; // [rsp+2Ch] [rbp-D4h]
  unsigned __int32 v56; // [rsp+30h] [rbp-D0h]
  unsigned __int32 v57; // [rsp+34h] [rbp-CCh]
  unsigned __int32 v58; // [rsp+38h] [rbp-C8h]
  unsigned int v59; // [rsp+40h] [rbp-C0h] BYREF
  __int64 v60; // [rsp+44h] [rbp-BCh]
  unsigned int v61; // [rsp+50h] [rbp-B0h]
  unsigned int v62; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v63; // [rsp+5Ch] [rbp-A4h]
  __int128 v64; // [rsp+70h] [rbp-90h] BYREF
  __int128 v65; // [rsp+80h] [rbp-80h]
  __int128 v66; // [rsp+90h] [rbp-70h]
  __int128 v67; // [rsp+A0h] [rbp-60h]
  char v68[272]; // [rsp+B0h] [rbp-50h] BYREF

  if ( !a3 )
    return 1LL;
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !v5 )
    return 0LL;
  v6 = *(_DWORD *)(a1 + 12);
  v7 = a3 + 4;
  v61 = v7;
  if ( v7 > v6 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v7;
  v9 = *(_DWORD *)(v7 - 4 + v5);
  if ( v8 )
    v9 = _byteswap_ulong(v9);
  if ( v7 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v5);
  if ( v8 )
    v10 = _byteswap_ulong(v10);
  v64 = xmmword_180028E60;
  v65 = xmmword_180028E70;
  v66 = xmmword_180028E80;
  v67 = xmmword_180028EA0;
  if ( !sub_18001D8D0(a1, (unsigned int *)&v64) )
    return 0LL;
  v11 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v12 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v13 = *(_DWORD *)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 16);
  v15 = *(_DWORD *)((unsigned int)(v13 - 4) + v11);
  if ( v14 )
    v15 = _byteswap_ulong(v15);
  if ( v13 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v16 = *(_DWORD *)(a1 + 8);
  v48 = v16;
  v17 = *(_DWORD *)((unsigned int)(v16 - 4) + v11);
  if ( v14 )
    v17 = _byteswap_ulong(v17);
  if ( v16 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v18 = *(_DWORD *)(a1 + 8);
  v56 = *(_DWORD *)((unsigned int)(v18 - 4) + v11);
  if ( v14 )
    v56 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v11));
  if ( v18 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v19 = *(_DWORD *)(a1 + 8);
  v50 = v19;
  v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v11);
  if ( v14 )
    v20 = _byteswap_ulong(v20);
  if ( v19 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v21 = *(_DWORD *)(a1 + 8);
  v57 = *(_DWORD *)((unsigned int)(v21 - 4) + v11);
  if ( v14 )
    v57 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v11));
  if ( v21 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v52 = *(_DWORD *)(a1 + 8);
  if ( v52 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v22 = *(_DWORD *)(a1 + 8);
  v58 = *(_DWORD *)((unsigned int)(v22 - 4) + v11);
  if ( v14 )
    v58 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v11));
  if ( v22 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v23 = *(_DWORD *)(a1 + 8);
  v54 = v23;
  v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v11);
  if ( v14 )
    v24 = _byteswap_ulong(v24);
  if ( v23 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v25 = *(_DWORD *)(a1 + 8);
  v26 = *(_DWORD *)((unsigned int)(v25 - 4) + v11);
  if ( v14 )
    v26 = _byteswap_ulong(v26);
  if ( v25 + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v12 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  sub_180005050((__int64 *)a1, v15, (__int64)v68);
  v27 = v10 + v61;
  if ( !v10 )
    v27 = 0;
  v28 = v56 + v48;
  if ( !v56 )
    v28 = 0;
  v29 = v57 + v50;
  v49 = v28;
  if ( !v57 )
    v29 = 0;
  v51 = v29;
  v30 = v58 + v52;
  if ( !v58 )
    v30 = 0;
  v31 = v26 + v54;
  v53 = v30;
  if ( !v26 )
    v31 = 0;
  v32 = 0;
  v55 = v31;
  if ( v27 )
  {
    v33 = v9 >> 4;
    v34 = 0;
    *(_DWORD *)(a1 + 8) = v27;
    if ( v33 )
    {
      while ( 1 )
      {
        v64 = xmmword_180028E60;
        v65 = xmmword_180028E70;
        v66 = xmmword_180028E80;
        v67 = xmmword_180028EA0;
        if ( !sub_18001D8D0(a1, (unsigned int *)&v64) )
          return 0LL;
        if ( ++v34 >= v33 )
        {
          v28 = v49;
          break;
        }
      }
    }
  }
  if ( v28 )
  {
    *(_DWORD *)(a1 + 8) = v28;
    if ( v17 )
    {
      do
      {
        v35 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 || (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v36 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v35);
        if ( *(_DWORD *)(a1 + 16) )
          v36 = _byteswap_ulong(v36);
        sub_180005050((__int64 *)a1, v36, (__int64)v68);
      }
      while ( v37 + 1 < v17 );
    }
  }
  if ( v51 )
  {
    *(_DWORD *)(a1 + 8) = v51;
    if ( v20 )
    {
      do
      {
        v60 = 0LL;
        v59 = 0;
        if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v59) )
          return 0LL;
      }
      while ( v38 + 1 < v20 );
    }
  }
  if ( v53 )
  {
    v39 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = v53;
    if ( v39 )
    {
      v40 = *(_DWORD *)(a1 + 12);
      if ( v53 + 4 <= v40 )
      {
        v41 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v53 + 4;
        v42 = *(_DWORD *)(v53 + v39);
        if ( v41 )
          v42 = _byteswap_ulong(v42);
        if ( v53 + 8 <= v40 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          v43 = 0;
          v44 = 0;
          if ( v42 )
          {
            while ( *(_DWORD *)(a1 + 8) + 4 <= v40 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v45 = *(_DWORD *)(a1 + 8);
              v46 = *(_DWORD *)((unsigned int)(v45 - 4) + v39);
              if ( v41 )
                v46 = _byteswap_ulong(v46);
              if ( v45 + 4 > v40 )
                break;
              *(_DWORD *)(a1 + 8) += 4;
              v43 += v46;
              if ( ++v44 >= v42 )
                goto LABEL_77;
            }
            return 0LL;
          }
LABEL_77:
          v47 = 0;
          if ( v43 > 0 )
          {
            while ( *(_DWORD *)(a1 + 8) + 4 <= v40 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 > v40 )
                break;
              *(_DWORD *)(a1 + 8) += 4;
              if ( ++v47 >= v43 )
                goto LABEL_81;
            }
            return 0LL;
          }
          goto LABEL_81;
        }
      }
    }
    return 0LL;
  }
LABEL_81:
  if ( v55 )
  {
    *(_DWORD *)(a1 + 8) = v55;
    if ( v24 )
    {
      while ( 1 )
      {
        v60 = 0LL;
        v59 = 0;
        v63 = 0LL;
        v62 = 0;
        if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v59) || !(unsigned int)sub_18001D5C0((__int64 *)a1, &v62) )
          break;
        if ( ++v32 >= v24 )
          return 1LL;
      }
      return 0LL;
    }
  }
  return 1LL;
}
// 1800154AB: variable 'v37' is possibly undefined
// 1800154EE: variable 'v38' is possibly undefined
// 180028E60: using guessed type __int128 xmmword_180028E60;
// 180028E70: using guessed type __int128 xmmword_180028E70;
// 180028E80: using guessed type __int128 xmmword_180028E80;
// 180028EA0: using guessed type __int128 xmmword_180028EA0;

//----- (00000001800156A0) ----------------------------------------------------
void __fastcall sub_1800156A0(_QWORD *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  *((_DWORD *)a1 + 4) = 0;
}

//----- (00000001800156B0) ----------------------------------------------------
__int64 __fastcall sub_1800156B0(__int64 a1, _DWORD *a2)
{
  __int64 v2; // r10
  int v5; // r8d
  unsigned int v6; // ecx
  unsigned int v7; // r8d
  unsigned int v8; // r8d
  int v9; // edx
  int v10; // eax
  int v11; // r8d
  int v12; // edx
  unsigned int v13; // eax
  int v14; // r8d
  int v15; // edx
  unsigned int v16; // edi
  unsigned int v17; // r9d
  unsigned int v18; // r8d
  __int64 v19; // rdx
  CHAR v20; // al
  unsigned int v21; // ecx
  unsigned int v22; // edi
  int v23; // eax
  int v24; // esi
  unsigned int v25; // r13d
  int v26; // ecx
  unsigned int v27; // edx
  unsigned int v29; // edx
  unsigned int v30; // edx
  int v31; // edx
  unsigned int v32; // edx
  int v33; // eax
  unsigned int v34; // edx
  int v35; // edx
  unsigned int v36; // edx
  unsigned int v37; // esi
  __int64 v38; // r10
  unsigned int v39; // r8d
  int v40; // r9d
  int v41; // r11d
  unsigned __int32 v42; // edx
  unsigned int v43; // r9d
  unsigned int v44; // eax
  unsigned int v45; // eax
  unsigned int v46; // edx
  unsigned int v47; // ecx
  __int64 v48; // r8
  unsigned int v49; // eax
  int v50; // esi
  unsigned int v51; // r14d
  __int64 v52; // rdx
  unsigned int v53; // r8d
  int v54; // r9d
  int v55; // r11d
  unsigned __int32 v56; // r10d
  unsigned int v57; // r9d
  unsigned int v58; // edi
  unsigned int v59; // eax
  __int64 *v60; // rcx
  int v61; // r9d
  int v62; // ecx
  unsigned int v63; // r12d
  int v64; // r15d
  __int64 v65; // r9
  unsigned __int32 v66; // edi
  unsigned int v67; // edx
  int v68; // r10d
  int v69; // r8d
  unsigned __int32 v70; // r11d
  unsigned int v71; // r10d
  int v72; // r10d
  unsigned __int32 v73; // r14d
  unsigned int v74; // r10d
  int v75; // r10d
  unsigned __int32 v76; // esi
  unsigned int v77; // r10d
  int v78; // r10d
  unsigned int v79; // r10d
  unsigned int v80; // eax
  unsigned int v81; // eax
  unsigned int v82; // eax
  unsigned int v83; // r10d
  __int64 *v84; // rcx
  __int64 *v85; // rcx
  __int64 v86; // r14
  unsigned int v87; // ecx
  int v88; // eax
  __int64 v89; // rdx
  __int64 v90; // [rsp+30h] [rbp-D0h] BYREF
  __int64 v91; // [rsp+38h] [rbp-C8h]
  __int64 v92; // [rsp+40h] [rbp-C0h]
  __int64 v93; // [rsp+48h] [rbp-B8h]
  __int64 v94; // [rsp+50h] [rbp-B0h]
  __int64 v95; // [rsp+58h] [rbp-A8h]
  __int64 v96; // [rsp+60h] [rbp-A0h]
  __int64 v97; // [rsp+68h] [rbp-98h]
  __int64 v98; // [rsp+70h] [rbp-90h]
  __int64 v99; // [rsp+78h] [rbp-88h]
  CHAR MultiByteStr[272]; // [rsp+80h] [rbp-80h] BYREF
  char v101[272]; // [rsp+190h] [rbp+90h] BYREF
  char v102[272]; // [rsp+2A0h] [rbp+1A0h] BYREF

  v2 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12);
  v7 = v5 + 4;
  if ( v7 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v7;
  if ( v7 + 4 > v6 )
    return 0LL;
  v8 = v7 + 4;
  *(_DWORD *)(a1 + 8) = v8;
  if ( v8 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v9 = *(_DWORD *)(a1 + 8);
  if ( v9 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v9 + 4;
  v10 = a2[2];
  if ( !v10 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10;
  v11 = a2[4];
  if ( v10 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 4;
  if ( v10 + 8 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 8;
  if ( v10 + 12 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 12;
  if ( v10 + 16 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 16;
  if ( v10 + 20 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 20;
  if ( v10 + 24 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v10 + 24;
  if ( v10 + 28 > v6 )
    return 0LL;
  v12 = v10 + 28;
  *(_DWORD *)(a1 + 8) = v10 + 28;
  if ( v10 + 32 > v6 )
    return 0LL;
  v13 = v10 + 32;
  *(_DWORD *)(a1 + 8) = v12 + 4;
  v14 = v11 - 4;
  v15 = 0;
  if ( v14 <= 0 )
  {
LABEL_19:
    v16 = a2[7];
    if ( v13 < v16 )
    {
      while ( MultiByteStr && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v17 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v2);
        if ( *(_DWORD *)(a1 + 16) )
          v17 = _byteswap_ulong(v17);
        v18 = 0;
        v19 = 0LL;
        if ( v17 )
        {
          while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 1) <= *(_DWORD *)(a1 + 12) )
          {
            v20 = *(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8))++ + v2);
            if ( v19 < 260 )
              MultiByteStr[v19] = v20;
            if ( v20 )
            {
              ++v18;
              ++v19;
              if ( v18 < v17 )
                continue;
            }
            if ( v19 >= 260 )
              goto LABEL_32;
            goto LABEL_31;
          }
          return 0LL;
        }
LABEL_31:
        MultiByteStr[v19] = 0;
LABEL_32:
        v21 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
        if ( (*(_DWORD *)(a1 + 8) & 3) != 0 )
          v21 += 4;
        *(_DWORD *)(a1 + 8) = v21;
        if ( v21 >= v16 )
          goto LABEL_35;
      }
      return 0LL;
    }
LABEL_35:
    v22 = 0;
    v23 = *(_DWORD *)(a1 + 8);
    v24 = 0;
    if ( a2[7] )
      v23 = a2[7];
    v25 = 1;
    *(_DWORD *)(a1 + 8) = v23;
    v26 = qword_1800306F0;
    v90 = 0LL;
    v91 = 0LL;
    v92 = 0LL;
    v93 = 0LL;
    v94 = 0LL;
    v95 = 0LL;
    v96 = 0LL;
    v97 = 0LL;
    v98 = 0LL;
    v99 = 0LL;
    switch ( (_DWORD)qword_1800306F0 )
    {
      case 0x30B:
        v27 = a2[7];
        if ( !v27 || !(unsigned int)sub_1800160E0(a1, v27, (__int64)&v90) )
          return 0;
        goto LABEL_67;
      case 0x362:
        v29 = a2[7];
        if ( !v29 || !(unsigned int)sub_1800166C0(a1, v29, (__int64)&v90) )
          return 0;
        goto LABEL_67;
      case 0x36D:
        v30 = a2[7];
        if ( !v30 || !(unsigned int)sub_180016CF0(a1, v30, (__int64)&v90) )
          return 0;
        goto LABEL_67;
    }
    if ( (unsigned int)(qword_1800306F0 - 911) <= 0x17 && (v31 = 8913025, _bittest(&v31, qword_1800306F0 - 911)) )
    {
      v32 = a2[7];
      if ( !v32 )
        return 0;
      v33 = sub_1800172F0(a1, v32, (unsigned __int32 *)&v90);
    }
    else
    {
      if ( (_DWORD)qword_1800306F0 == 944 )
      {
        v34 = a2[7];
        if ( !v34 || !(unsigned int)sub_180017AB0(a1, v34, &v90) )
          return 0;
LABEL_67:
        if ( HIDWORD(v90) )
        {
          v37 = v90;
          *(_DWORD *)(a1 + 8) = HIDWORD(v90);
          if ( v37 )
          {
            do
            {
              v38 = *(_QWORD *)a1;
              if ( !*(_QWORD *)a1 )
                return 0;
              v39 = *(_DWORD *)(a1 + 12);
              if ( *(_DWORD *)(a1 + 8) + 4 > v39 )
                return 0;
              *(_DWORD *)(a1 + 8) += 4;
              v40 = *(_DWORD *)(a1 + 8);
              v41 = *(_DWORD *)(a1 + 16);
              v42 = *(_DWORD *)((unsigned int)(v40 - 4) + v38);
              if ( v41 )
                v42 = _byteswap_ulong(v42);
              v43 = v40 + 4;
              if ( v43 > v39 )
                return 0;
              *(_DWORD *)(a1 + 8) = v43;
              if ( v41 )
                v42 = _byteswap_ulong(*(_DWORD *)(v43 - 4 + v38));
              if ( v43 + 4 > v39 )
                return 0;
              *(_DWORD *)(a1 + 8) += 4;
              v44 = *(_DWORD *)(a1 + 8) + 4;
              if ( v44 > v39 )
                return 0;
              *(_DWORD *)(a1 + 8) = v44;
              if ( v44 + 4 > v39 )
                return 0;
              *(_DWORD *)(a1 + 8) += 4;
              v45 = *(_DWORD *)(a1 + 8) + 4;
              if ( v45 > v39 )
                return 0;
              *(_DWORD *)(a1 + 8) = v45;
              sub_180005050((__int64 *)a1, v42, (__int64)MultiByteStr);
            }
            while ( ++v22 < v37 );
          }
        }
        if ( HIDWORD(v91) )
        {
          v46 = v91;
          v47 = 0;
          *(_DWORD *)(a1 + 8) = HIDWORD(v91);
          if ( v46 )
          {
            v48 = *(_QWORD *)a1;
            while ( v48 )
            {
              v49 = *(_DWORD *)(a1 + 8) + 2;
              if ( v49 > *(_DWORD *)(a1 + 12) )
                break;
              ++v47;
              *(_DWORD *)(a1 + 8) = v49;
              if ( v47 >= v46 )
                goto LABEL_87;
            }
            return 0;
          }
        }
LABEL_87:
        if ( HIDWORD(v92) )
        {
          v50 = 0;
          *(_DWORD *)(a1 + 8) = HIDWORD(v92);
          v51 = v92;
          if ( (_DWORD)v92 )
          {
            v52 = *(_QWORD *)a1;
LABEL_90:
            if ( v52 )
            {
              v53 = *(_DWORD *)(a1 + 12);
              if ( *(_DWORD *)(a1 + 8) + 4 <= v53 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                v54 = *(_DWORD *)(a1 + 8);
                v55 = *(_DWORD *)(a1 + 16);
                v56 = *(_DWORD *)((unsigned int)(v54 - 4) + v52);
                if ( v55 )
                  v56 = _byteswap_ulong(v56);
                v57 = v54 + 4;
                if ( v57 <= v53 )
                {
                  *(_DWORD *)(a1 + 8) = v57;
                  if ( v55 )
                    v56 = _byteswap_ulong(*(_DWORD *)(v57 - 4 + v52));
                  if ( v57 + 4 <= v53 )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    v58 = *(_DWORD *)(a1 + 8) + 4;
                    if ( v58 <= v53 )
                    {
                      *(_DWORD *)(a1 + 8) = v58;
                      if ( v58 + 4 <= v53 )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        v59 = *(_DWORD *)(a1 + 8) + 4;
                        if ( v59 <= v53 )
                        {
                          *(_DWORD *)(a1 + 8) = v59;
                          sub_180005050((__int64 *)a1, v56, (__int64)MultiByteStr);
                          sub_180005050(v60, v61, (__int64)v101);
                          v52 = *(_QWORD *)a1;
                          v62 = 0;
                          while ( v52 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( ++v62 >= 10 )
                            {
                              if ( ++v50 < v51 )
                                goto LABEL_90;
                              goto LABEL_106;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return 0;
          }
        }
LABEL_106:
        if ( HIDWORD(v93) )
        {
          v63 = v93;
          *(_DWORD *)(a1 + 8) = HIDWORD(v93);
          if ( v63 && !(unsigned int)sub_180001FD0((__int64)&qword_1800306F0, v63) )
            return 0;
          v64 = 0;
          if ( v63 )
          {
            while ( 1 )
            {
              memset(MultiByteStr, 0, 0x104uLL);
              v65 = *(_QWORD *)a1;
              v66 = 0;
              if ( !*(_QWORD *)a1 )
                return 0;
              v67 = *(_DWORD *)(a1 + 12);
              if ( *(_DWORD *)(a1 + 8) + 4 > v67 )
                return 0;
              *(_DWORD *)(a1 + 8) += 4;
              v68 = *(_DWORD *)(a1 + 8);
              v69 = *(_DWORD *)(a1 + 16);
              v70 = *(_DWORD *)((unsigned int)(v68 - 4) + v65);
              if ( v69 )
                v70 = _byteswap_ulong(v70);
              v71 = v68 + 4;
              if ( v71 > v67 )
                return 0;
              *(_DWORD *)(a1 + 8) = v71;
              if ( v69 )
                v70 = _byteswap_ulong(*(_DWORD *)(v71 - 4 + v65));
              if ( v71 + 4 > v67 )
                return 0;
              *(_DWORD *)(a1 + 8) += 4;
              v72 = *(_DWORD *)(a1 + 8);
              v73 = *(_DWORD *)((unsigned int)(v72 - 4) + v65);
              if ( v69 )
                v73 = _byteswap_ulong(v73);
              v74 = v72 + 4;
              if ( v74 > v67 )
                return 0;
              *(_DWORD *)(a1 + 8) = v74;
              if ( v69 )
                v73 = _byteswap_ulong(*(_DWORD *)(v74 - 4 + v65));
              if ( v74 + 4 > v67 )
                return 0;
              *(_DWORD *)(a1 + 8) += 4;
              v75 = *(_DWORD *)(a1 + 8);
              v76 = *(_DWORD *)((unsigned int)(v75 - 4) + v65);
              if ( v69 )
                v76 = _byteswap_ulong(v76);
              v77 = v75 + 4;
              if ( v77 > v67 )
                return 0;
              *(_DWORD *)(a1 + 8) = v77;
              if ( v69 )
                v76 = _byteswap_ulong(*(_DWORD *)(v77 - 4 + v65));
              if ( (_DWORD)qword_1800306F0 == 779 )
              {
                if ( v77 + 4 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) += 4;
                v78 = *(_DWORD *)(a1 + 8);
                v66 = *(_DWORD *)((unsigned int)(v78 - 4) + v65);
                if ( v69 )
                  v66 = _byteswap_ulong(v66);
                v79 = v78 + 4;
                if ( v79 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) = v79;
                if ( v69 )
                  v66 = _byteswap_ulong(*(_DWORD *)(v79 - 4 + v65));
                if ( v79 + 4 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) += 4;
                v80 = *(_DWORD *)(a1 + 8) + 4;
                if ( v80 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) = v80;
                if ( v80 + 4 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) += 4;
                v81 = *(_DWORD *)(a1 + 8) + 4;
                if ( v81 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) = v81;
                if ( v81 + 4 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) += 4;
                v82 = *(_DWORD *)(a1 + 8) + 4;
                if ( v82 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) = v82;
              }
              else if ( (int)qword_1800306F0 > 911 )
              {
                if ( v77 + 4 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) += 4;
                v83 = *(_DWORD *)(a1 + 8);
                v66 = *(_DWORD *)(v83 - 4 + v65);
                if ( v69 )
                  v66 = _byteswap_ulong(v66);
                if ( v83 + 4 > v67 )
                  return 0;
                *(_DWORD *)(a1 + 8) = v83 + 4;
                if ( v69 )
                  v66 = _byteswap_ulong(*(_DWORD *)(v83 + v65));
              }
              sub_180005050((__int64 *)a1, v70, (__int64)MultiByteStr);
              sub_180005050(v84, v73, (__int64)v101);
              sub_180005050(v85, v76, (__int64)v102);
              v26 = qword_1800306F0;
              if ( (int)qword_1800306F0 > 911 || (_DWORD)qword_1800306F0 == 779 )
              {
                sub_180005050((__int64 *)a1, v66, (__int64)v102);
                v26 = qword_1800306F0;
              }
              if ( qword_180030700 )
              {
                MultiByteToWideChar(0, 1u, MultiByteStr, -1, (LPWSTR)qword_180030700 + 260 * v64, 255);
                v26 = qword_1800306F0;
              }
              if ( ++v64 >= v63 )
                goto LABEL_158;
            }
          }
        }
        v26 = qword_1800306F0;
LABEL_158:
        v22 = v95;
        v24 = HIDWORD(v95);
        goto LABEL_159;
      }
      if ( (_DWORD)qword_1800306F0 == 946 || (_DWORD)qword_1800306F0 == 954 )
      {
        v33 = sub_180018190(a1, a2[7], &v90);
      }
      else
      {
        if ( (unsigned int)(qword_1800306F0 - 964) > 0x1A || (v35 = 69210631, !_bittest(&v35, qword_1800306F0 - 964)) )
        {
LABEL_159:
          v86 = 0x1080481C0101LL;
          if ( v26 != 866 && v26 != 877 && ((unsigned int)(v26 - 946) > 0x2C || !_bittest64(&v86, v26 - 946)) )
          {
LABEL_165:
            v87 = v26 - 946;
            if ( v87 <= 0x2C && _bittest64(&v86, (int)v87) )
              v88 = sub_180019C40(a1, v22, v24);
            else
              v88 = sub_1800190D0(a1, v22, v24);
            if ( v88
              && (unsigned int)sub_180019F30(a1, v96, SHIDWORD(v96))
              && (unsigned int)sub_18001C9D0(a1, v97, SHIDWORD(v97))
              && (unsigned int)sub_18001AC20(a1, v89, HIDWORD(v98)) )
            {
              return v25;
            }
            return 0;
          }
          if ( (unsigned int)sub_1800198F0(a1, v94, SHIDWORD(v94)) )
          {
            v26 = qword_1800306F0;
            goto LABEL_165;
          }
          return 0;
        }
        v36 = a2[7];
        if ( !v36 )
          return 0;
        v33 = sub_1800188D0(a1, v36, (unsigned __int32 *)&v90);
      }
    }
    if ( !v33 )
      return 0;
    goto LABEL_67;
  }
  while ( v13 + 4 <= v6 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    v13 = *(_DWORD *)(a1 + 8) + 4;
    if ( v13 > v6 )
      break;
    ++v15;
    *(_DWORD *)(a1 + 8) = v13;
    if ( v15 >= v14 )
      goto LABEL_19;
  }
  return 0LL;
}
// 180015CB9: variable 'v60' is possibly undefined
// 180015CB9: variable 'v61' is possibly undefined
// 180015F4C: variable 'v84' is possibly undefined
// 180015F5A: variable 'v85' is possibly undefined
// 18001609B: variable 'v89' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 1800156B0: using guessed type CHAR MultiByteStr[272];

//----- (00000001800160E0) ----------------------------------------------------
__int64 __fastcall sub_1800160E0(__int64 a1, unsigned int a2, __int64 a3)
{
  __int64 v3; // r11
  unsigned int v5; // ebx
  unsigned int v6; // r10d
  int v7; // r8d
  unsigned __int32 v8; // r9d
  __int64 *v9; // rcx
  __int64 v10; // r9
  int v11; // edx
  unsigned int v12; // r8d
  unsigned int v13; // eax
  int v14; // edx
  int v15; // ebx
  unsigned int v16; // r8d
  int v17; // r11d
  int v18; // ebx
  int v19; // esi
  int v20; // esi
  int v21; // r14d
  int v22; // r14d
  int v23; // r10d
  int v24; // r10d
  int v25; // edx
  int v26; // edx
  int v27; // r13d
  int v28; // r13d
  int v29; // r10d
  unsigned int v30; // r12d
  int v31; // r10d
  int v32; // r10d
  int v33; // r10d
  int v34; // r10d
  unsigned int v35; // ebp
  int v36; // r10d
  int v37; // edx
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // r15d
  int v42; // r15d
  int v43; // r10d
  unsigned int v44; // r9d
  int v45; // r10d
  int v46; // edx
  int v47; // edx
  int v48; // edx
  int v49; // edx
  int v50; // edx
  int v51; // edx
  int v52; // edx
  int v53; // edx
  int v54; // edx
  int v55; // edx
  unsigned __int32 v56; // edx
  unsigned __int32 v57; // ecx
  unsigned __int32 v58; // eax
  __int64 result; // rax
  unsigned __int32 v60; // [rsp+20h] [rbp-188h]
  unsigned __int32 v61; // [rsp+24h] [rbp-184h]
  unsigned __int32 v62; // [rsp+28h] [rbp-180h]
  unsigned __int32 v63; // [rsp+2Ch] [rbp-17Ch]
  unsigned __int32 v64; // [rsp+30h] [rbp-178h]
  unsigned __int32 v65; // [rsp+34h] [rbp-174h]
  unsigned __int32 v66; // [rsp+38h] [rbp-170h]
  unsigned __int32 v67; // [rsp+3Ch] [rbp-16Ch]
  unsigned __int32 v68; // [rsp+40h] [rbp-168h]
  int v69; // [rsp+44h] [rbp-164h]
  char v70[272]; // [rsp+50h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = a2 + 4;
    if ( a2 + 4 <= v5 )
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v6;
      v8 = *(_DWORD *)(a2 + v3);
      if ( v7 )
        v8 = _byteswap_ulong(v8);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = a2 + 8;
        if ( v7 )
          v8 = _byteswap_ulong(*(_DWORD *)(v6 + v3));
        sub_180005050((__int64 *)a1, v8, (__int64)v70);
        v10 = *v9;
        v11 = 0;
        while ( v10 )
        {
          v12 = *((_DWORD *)v9 + 3);
          if ( *((_DWORD *)v9 + 2) + 4 > v12 )
            break;
          *((_DWORD *)v9 + 2) += 4;
          v13 = *((_DWORD *)v9 + 2) + 4;
          if ( v13 > v12 )
            break;
          ++v11;
          *((_DWORD *)v9 + 2) = v13;
          if ( v11 >= 5 )
          {
            v14 = 0;
            while ( (unsigned int)(*((_DWORD *)v9 + 2) + 4) <= *((_DWORD *)v9 + 3) )
            {
              *((_DWORD *)v9 + 2) += 4;
              ++v14;
              v15 = *((_DWORD *)v9 + 2);
              if ( v14 >= 16 )
              {
                v16 = *((_DWORD *)v9 + 3);
                if ( v15 + 4 <= v16 )
                {
                  v17 = *((_DWORD *)v9 + 4);
                  v18 = v15 + 4;
                  *((_DWORD *)v9 + 2) = v18;
                  v63 = *(_DWORD *)((unsigned int)(v18 - 4) + v10);
                  if ( v17 )
                    v63 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v10));
                  if ( v18 + 4 <= v16 )
                  {
                    *((_DWORD *)v9 + 2) += 4;
                    v19 = *((_DWORD *)v9 + 2);
                    v60 = *(_DWORD *)((unsigned int)(v19 - 4) + v10);
                    if ( v17 )
                      v60 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v10));
                    if ( v19 + 4 > v16 )
                      return 0LL;
                    v20 = v19 + 4;
                    *((_DWORD *)v9 + 2) = v20;
                    v65 = *(_DWORD *)((unsigned int)(v20 - 4) + v10);
                    if ( v17 )
                      v65 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v10));
                    if ( v20 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v21 = *((_DWORD *)v9 + 2);
                    v61 = *(_DWORD *)((unsigned int)(v21 - 4) + v10);
                    if ( v17 )
                      v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v10));
                    if ( v21 + 4 > v16 )
                      return 0LL;
                    v22 = v21 + 4;
                    *((_DWORD *)v9 + 2) = v22;
                    v66 = *(_DWORD *)((unsigned int)(v22 - 4) + v10);
                    if ( v17 )
                      v66 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v10));
                    if ( v22 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v23 = *((_DWORD *)v9 + 2);
                    v62 = *(_DWORD *)((unsigned int)(v23 - 4) + v10);
                    if ( v17 )
                      v62 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v10));
                    if ( v23 + 4 > v16 )
                      return 0LL;
                    v24 = v23 + 4;
                    *((_DWORD *)v9 + 2) = v24;
                    if ( v24 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v25 = *((_DWORD *)v9 + 2);
                    if ( v25 + 4 > v16 )
                      return 0LL;
                    v26 = v25 + 4;
                    *((_DWORD *)v9 + 2) = v26;
                    if ( v26 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v27 = *((_DWORD *)v9 + 2);
                    if ( v27 + 4 > v16 )
                      return 0LL;
                    v28 = v27 + 4;
                    *((_DWORD *)v9 + 2) = v28;
                    v64 = *(_DWORD *)((unsigned int)(v28 - 4) + v10);
                    if ( v17 )
                      v64 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v28 - 4) + v10));
                    if ( v28 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v29 = *((_DWORD *)v9 + 2);
                    v30 = *(_DWORD *)((unsigned int)(v29 - 4) + v10);
                    if ( v17 )
                      v30 = _byteswap_ulong(v30);
                    if ( v29 + 4 > v16 )
                      return 0LL;
                    v31 = v29 + 4;
                    *((_DWORD *)v9 + 2) = v31;
                    if ( v31 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v32 = *((_DWORD *)v9 + 2);
                    if ( v32 + 4 > v16 )
                      return 0LL;
                    v33 = v32 + 4;
                    *((_DWORD *)v9 + 2) = v33;
                    v69 = v33;
                    v67 = *(_DWORD *)((unsigned int)(v33 - 4) + v10);
                    if ( v17 )
                      v67 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v33 - 4) + v10));
                    if ( v33 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v34 = *((_DWORD *)v9 + 2);
                    v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v10);
                    if ( v17 )
                      v35 = _byteswap_ulong(v35);
                    if ( v34 + 4 > v16 )
                      return 0LL;
                    v36 = v34 + 4;
                    *((_DWORD *)v9 + 2) = v36;
                    if ( v36 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v37 = *((_DWORD *)v9 + 2);
                    if ( v37 + 4 > v16 )
                      return 0LL;
                    v38 = v37 + 4;
                    *((_DWORD *)v9 + 2) = v38;
                    if ( v38 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v39 = *((_DWORD *)v9 + 2);
                    if ( v39 + 4 > v16 )
                      return 0LL;
                    v40 = v39 + 4;
                    *((_DWORD *)v9 + 2) = v40;
                    if ( v40 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v41 = *((_DWORD *)v9 + 2);
                    if ( v41 + 4 > v16 )
                      return 0LL;
                    v42 = v41 + 4;
                    *((_DWORD *)v9 + 2) = v42;
                    v68 = *(_DWORD *)((unsigned int)(v42 - 4) + v10);
                    if ( v17 )
                      v68 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v42 - 4) + v10));
                    if ( v42 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v43 = *((_DWORD *)v9 + 2);
                    v44 = *(_DWORD *)((unsigned int)(v43 - 4) + v10);
                    if ( v17 )
                      v44 = _byteswap_ulong(v44);
                    if ( v43 + 4 > v16 )
                      return 0LL;
                    v45 = v43 + 4;
                    *((_DWORD *)v9 + 2) = v45;
                    if ( v45 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v46 = *((_DWORD *)v9 + 2);
                    if ( v46 + 4 > v16 )
                      return 0LL;
                    v47 = v46 + 4;
                    *((_DWORD *)v9 + 2) = v47;
                    if ( v47 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v48 = *((_DWORD *)v9 + 2);
                    if ( v48 + 4 > v16 )
                      return 0LL;
                    v49 = v48 + 4;
                    *((_DWORD *)v9 + 2) = v49;
                    if ( v49 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v50 = *((_DWORD *)v9 + 2);
                    if ( v50 + 4 > v16 )
                      return 0LL;
                    v51 = v50 + 4;
                    *((_DWORD *)v9 + 2) = v51;
                    if ( v51 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v52 = *((_DWORD *)v9 + 2);
                    if ( v52 + 4 > v16 )
                      return 0LL;
                    v53 = v52 + 4;
                    *((_DWORD *)v9 + 2) = v53;
                    if ( v53 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v54 = *((_DWORD *)v9 + 2);
                    if ( v54 + 4 > v16 )
                      return 0LL;
                    v55 = v54 + 4;
                    *((_DWORD *)v9 + 2) = v55;
                    if ( v55 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v56 = v60;
                    if ( v60 )
                      v56 = v18 + v60;
                    if ( v30 )
                      v30 += v28;
                    v57 = v61;
                    if ( v61 )
                      v57 = v20 + v61;
                    v58 = v62;
                    if ( v62 )
                      v58 = v22 + v62;
                    if ( v35 )
                      v35 += v69;
                    if ( v44 )
                      v44 += v42;
                    *(_DWORD *)(a3 + 28) = v56;
                    *(_DWORD *)(a3 + 60) = v58;
                    *(_QWORD *)(a3 + 40) = 0LL;
                    *(_DWORD *)(a3 + 64) = v67;
                    *(_DWORD *)(a3 + 32) = v64;
                    *(_DWORD *)(a3 + 52) = v57;
                    *(_DWORD *)(a3 + 72) = v68;
                    result = 1LL;
                    *(_DWORD *)(a3 + 48) = v65;
                    *(_DWORD *)(a3 + 24) = v63;
                    *(_DWORD *)(a3 + 36) = v30;
                    *(_DWORD *)(a3 + 56) = v66;
                    *(_DWORD *)(a3 + 68) = v35;
                    *(_DWORD *)(a3 + 76) = v44;
                    return result;
                  }
                }
                return 0LL;
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 1800161B3: conditional instruction was optimized away because r9.8!=0
// 1800161D9: conditional instruction was optimized away because r9.8!=0
// 180016164: variable 'v9' is possibly undefined
// 1800160E0: using guessed type char var_158[272];

//----- (00000001800166C0) ----------------------------------------------------
__int64 __fastcall sub_1800166C0(__int64 a1, unsigned int a2, __int64 a3)
{
  __int64 v3; // r11
  unsigned int v5; // ebx
  unsigned int v6; // r10d
  int v7; // r8d
  unsigned __int32 v8; // r9d
  __int64 *v9; // rcx
  __int64 v10; // r9
  int v11; // edx
  unsigned int v12; // r8d
  unsigned int v13; // eax
  int v14; // r8d
  int v15; // edx
  unsigned int v16; // r8d
  int v17; // r10d
  int v18; // r11d
  int v19; // r10d
  unsigned int v20; // r13d
  int v21; // edx
  int v22; // edx
  int v23; // r10d
  int v24; // r10d
  unsigned int v25; // r12d
  int v26; // edx
  int v27; // edx
  int v28; // r10d
  int v29; // r10d
  unsigned int v30; // r14d
  int v31; // edx
  int v32; // edx
  int v33; // r10d
  int v34; // r10d
  unsigned int v35; // ebp
  int v36; // edx
  int v37; // edx
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // edx
  int v42; // r10d
  int v43; // r10d
  unsigned int v44; // esi
  int v45; // edx
  int v46; // edx
  int v47; // edx
  int v48; // edx
  int v49; // edx
  int v50; // edx
  int v51; // ebx
  unsigned int v52; // r15d
  int v53; // ebx
  unsigned int v54; // r10d
  int v55; // edx
  int v56; // edx
  int v57; // edx
  int v58; // edx
  int v59; // edx
  int v60; // edx
  int v61; // edx
  __int64 result; // rax
  unsigned __int32 v63; // [rsp+20h] [rbp-188h]
  unsigned __int32 v64; // [rsp+24h] [rbp-184h]
  unsigned __int32 v65; // [rsp+28h] [rbp-180h]
  unsigned __int32 v66; // [rsp+2Ch] [rbp-17Ch]
  unsigned __int32 v67; // [rsp+30h] [rbp-178h]
  int v68; // [rsp+34h] [rbp-174h]
  int v69; // [rsp+38h] [rbp-170h]
  int v70; // [rsp+3Ch] [rbp-16Ch]
  int v71; // [rsp+40h] [rbp-168h]
  int v72; // [rsp+44h] [rbp-164h]
  int v73; // [rsp+48h] [rbp-160h]
  char v74[272]; // [rsp+50h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = a2 + 4;
    if ( a2 + 4 <= v5 )
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v6;
      v8 = *(_DWORD *)(a2 + v3);
      if ( v7 )
        v8 = _byteswap_ulong(v8);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = a2 + 8;
        if ( v7 )
          v8 = _byteswap_ulong(*(_DWORD *)(v6 + v3));
        sub_180005050((__int64 *)a1, v8, (__int64)v74);
        v10 = *v9;
        v11 = 0;
        while ( v10 )
        {
          v12 = *((_DWORD *)v9 + 3);
          if ( *((_DWORD *)v9 + 2) + 4 > v12 )
            break;
          *((_DWORD *)v9 + 2) += 4;
          v13 = *((_DWORD *)v9 + 2) + 4;
          if ( v13 > v12 )
            break;
          ++v11;
          *((_DWORD *)v9 + 2) = v13;
          if ( v11 >= 5 )
          {
            v14 = 21;
            if ( (_DWORD)qword_1800306F0 == 779 )
            {
              v15 = 0;
              v14 = 16;
            }
            else
            {
              if ( (_DWORD)qword_1800306F0 == 866 )
                v14 = 18;
              v15 = 0;
            }
            while ( (unsigned int)(*((_DWORD *)v9 + 2) + 4) <= *((_DWORD *)v9 + 3) )
            {
              *((_DWORD *)v9 + 2) += 4;
              if ( ++v15 >= v14 )
              {
                v16 = *((_DWORD *)v9 + 3);
                if ( *((_DWORD *)v9 + 2) + 4 <= v16 )
                {
                  *((_DWORD *)v9 + 2) += 4;
                  v17 = *((_DWORD *)v9 + 2);
                  v18 = *((_DWORD *)v9 + 4);
                  v63 = *(_DWORD *)((unsigned int)(v17 - 4) + v10);
                  if ( v18 )
                    v63 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v10));
                  v68 = *((_DWORD *)v9 + 2);
                  if ( v17 + 4 <= v16 )
                  {
                    v19 = v17 + 4;
                    *((_DWORD *)v9 + 2) = v19;
                    v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v10);
                    if ( v18 )
                      v20 = _byteswap_ulong(v20);
                    if ( v19 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v21 = *((_DWORD *)v9 + 2);
                    if ( v21 + 4 > v16 )
                      return 0LL;
                    v22 = v21 + 4;
                    *((_DWORD *)v9 + 2) = v22;
                    if ( v22 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v23 = *((_DWORD *)v9 + 2);
                    v64 = *(_DWORD *)((unsigned int)(v23 - 4) + v10);
                    if ( v18 )
                      v64 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v10));
                    v69 = *((_DWORD *)v9 + 2);
                    if ( v23 + 4 > v16 )
                      return 0LL;
                    v24 = v23 + 4;
                    *((_DWORD *)v9 + 2) = v24;
                    v25 = *(_DWORD *)((unsigned int)(v24 - 4) + v10);
                    if ( v18 )
                      v25 = _byteswap_ulong(v25);
                    if ( v24 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v26 = *((_DWORD *)v9 + 2);
                    if ( v26 + 4 > v16 )
                      return 0LL;
                    v27 = v26 + 4;
                    *((_DWORD *)v9 + 2) = v27;
                    if ( v27 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v28 = *((_DWORD *)v9 + 2);
                    v65 = *(_DWORD *)((unsigned int)(v28 - 4) + v10);
                    if ( v18 )
                      v65 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v28 - 4) + v10));
                    v70 = *((_DWORD *)v9 + 2);
                    if ( v28 + 4 > v16 )
                      return 0LL;
                    v29 = v28 + 4;
                    *((_DWORD *)v9 + 2) = v29;
                    v30 = *(_DWORD *)((unsigned int)(v29 - 4) + v10);
                    if ( v18 )
                      v30 = _byteswap_ulong(v30);
                    if ( v29 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v31 = *((_DWORD *)v9 + 2);
                    if ( v31 + 4 > v16 )
                      return 0LL;
                    v32 = v31 + 4;
                    *((_DWORD *)v9 + 2) = v32;
                    if ( v32 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v33 = *((_DWORD *)v9 + 2);
                    v66 = *(_DWORD *)((unsigned int)(v33 - 4) + v10);
                    if ( v18 )
                      v66 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v33 - 4) + v10));
                    v71 = *((_DWORD *)v9 + 2);
                    if ( v33 + 4 > v16 )
                      return 0LL;
                    v34 = v33 + 4;
                    *((_DWORD *)v9 + 2) = v34;
                    v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v10);
                    if ( v18 )
                      v35 = _byteswap_ulong(v35);
                    if ( v34 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v36 = *((_DWORD *)v9 + 2);
                    if ( v36 + 4 > v16 )
                      return 0LL;
                    v37 = v36 + 4;
                    *((_DWORD *)v9 + 2) = v37;
                    if ( v37 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v38 = *((_DWORD *)v9 + 2);
                    if ( v38 + 4 > v16 )
                      return 0LL;
                    v39 = v38 + 4;
                    *((_DWORD *)v9 + 2) = v39;
                    if ( v39 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v40 = *((_DWORD *)v9 + 2);
                    if ( v40 + 4 > v16 )
                      return 0LL;
                    v41 = v40 + 4;
                    *((_DWORD *)v9 + 2) = v41;
                    if ( v41 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v42 = *((_DWORD *)v9 + 2);
                    v67 = *(_DWORD *)((unsigned int)(v42 - 4) + v10);
                    if ( v18 )
                      v67 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v42 - 4) + v10));
                    v72 = *((_DWORD *)v9 + 2);
                    if ( v42 + 4 > v16 )
                      return 0LL;
                    v43 = v42 + 4;
                    *((_DWORD *)v9 + 2) = v43;
                    v44 = *(_DWORD *)((unsigned int)(v43 - 4) + v10);
                    if ( v18 )
                      v44 = _byteswap_ulong(v44);
                    if ( v43 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v45 = *((_DWORD *)v9 + 2);
                    if ( v45 + 4 > v16 )
                      return 0LL;
                    v46 = v45 + 4;
                    *((_DWORD *)v9 + 2) = v46;
                    if ( v46 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v47 = *((_DWORD *)v9 + 2);
                    if ( v47 + 4 > v16 )
                      return 0LL;
                    v48 = v47 + 4;
                    *((_DWORD *)v9 + 2) = v48;
                    if ( v48 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v49 = *((_DWORD *)v9 + 2);
                    if ( v49 + 4 > v16 )
                      return 0LL;
                    v50 = v49 + 4;
                    *((_DWORD *)v9 + 2) = v50;
                    if ( v50 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v51 = *((_DWORD *)v9 + 2);
                    v52 = *(_DWORD *)((unsigned int)(v51 - 4) + v10);
                    if ( v18 )
                      v52 = _byteswap_ulong(v52);
                    v73 = *((_DWORD *)v9 + 2);
                    if ( v51 + 4 > v16 )
                      return 0LL;
                    v53 = v51 + 4;
                    *((_DWORD *)v9 + 2) = v53;
                    v54 = *(_DWORD *)((unsigned int)(v53 - 4) + v10);
                    if ( v18 )
                      v54 = _byteswap_ulong(v54);
                    if ( v53 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v55 = *((_DWORD *)v9 + 2);
                    if ( v55 + 4 > v16 )
                      return 0LL;
                    v56 = v55 + 4;
                    *((_DWORD *)v9 + 2) = v56;
                    if ( v56 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v57 = *((_DWORD *)v9 + 2);
                    if ( v57 + 4 > v16 )
                      return 0LL;
                    v58 = v57 + 4;
                    *((_DWORD *)v9 + 2) = v58;
                    if ( v58 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v59 = *((_DWORD *)v9 + 2);
                    if ( v59 + 4 > v16 )
                      return 0LL;
                    v60 = v59 + 4;
                    *((_DWORD *)v9 + 2) = v60;
                    if ( v60 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v61 = *((_DWORD *)v9 + 2);
                    if ( v61 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) = v61 + 4;
                    if ( v20 )
                      v20 += v68;
                    if ( v25 )
                      v25 += v69;
                    if ( v30 )
                      v30 += v70;
                    if ( v35 )
                      v35 += v71;
                    if ( v44 )
                      v44 += v72;
                    if ( v54 )
                      v54 += v73;
                    *(_DWORD *)(a3 + 24) = v63;
                    *(_QWORD *)(a3 + 40) = 0LL;
                    *(_DWORD *)(a3 + 32) = v64;
                    *(_DWORD *)(a3 + 48) = v65;
                    *(_DWORD *)(a3 + 56) = v66;
                    *(_DWORD *)(a3 + 64) = v67;
                    result = 1LL;
                    *(_DWORD *)(a3 + 28) = v20;
                    *(_DWORD *)(a3 + 36) = v25;
                    *(_DWORD *)(a3 + 52) = v30;
                    *(_DWORD *)(a3 + 60) = v35;
                    *(_DWORD *)(a3 + 68) = v44;
                    *(_DWORD *)(a3 + 72) = v52;
                    *(_DWORD *)(a3 + 76) = v54;
                    return result;
                  }
                }
                return 0LL;
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 1800167BA: conditional instruction was optimized away because r8d.4 is in (==12|==15)
// 1800167C3: conditional instruction was optimized away because r9.8!=0
// 1800167E9: conditional instruction was optimized away because r9.8!=0
// 180016744: variable 'v9' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 1800166C0: using guessed type char var_158[272];

//----- (0000000180016CF0) ----------------------------------------------------
__int64 __fastcall sub_180016CF0(__int64 a1, unsigned int a2, __int64 a3)
{
  __int64 v3; // r11
  unsigned int v5; // ebx
  unsigned int v6; // r10d
  int v7; // r8d
  unsigned __int32 v8; // r9d
  __int64 *v9; // rcx
  __int64 v10; // r9
  int v11; // edx
  unsigned int v12; // r8d
  unsigned int v13; // eax
  int v14; // r8d
  int v15; // edx
  unsigned int v16; // r8d
  int v17; // r10d
  int v18; // r11d
  int v19; // r10d
  int v20; // edx
  int v21; // edx
  int v22; // r10d
  int v23; // r10d
  unsigned int v24; // r12d
  int v25; // r15d
  int v26; // r15d
  int v27; // r10d
  unsigned int v28; // r14d
  int v29; // r10d
  int v30; // r10d
  int v31; // r10d
  unsigned int v32; // ebp
  int v33; // edx
  int v34; // edx
  int v35; // edx
  int v36; // edx
  int v37; // edx
  int v38; // edx
  int v39; // r10d
  int v40; // r10d
  unsigned int v41; // esi
  int v42; // edx
  int v43; // edx
  int v44; // edx
  int v45; // edx
  int v46; // edx
  int v47; // edx
  int v48; // ebx
  unsigned int v49; // r13d
  int v50; // ebx
  unsigned int v51; // r10d
  int v52; // edx
  int v53; // edx
  int v54; // edx
  int v55; // edx
  int v56; // edx
  int v57; // edx
  int v58; // edx
  unsigned __int32 v59; // eax
  __int64 result; // rax
  unsigned __int32 v61; // [rsp+20h] [rbp-188h]
  unsigned __int32 v62; // [rsp+24h] [rbp-184h]
  unsigned __int32 v63; // [rsp+28h] [rbp-180h]
  unsigned __int32 v64; // [rsp+2Ch] [rbp-17Ch]
  unsigned __int32 v65; // [rsp+30h] [rbp-178h]
  unsigned __int32 v66; // [rsp+34h] [rbp-174h]
  int v67; // [rsp+38h] [rbp-170h]
  int v68; // [rsp+3Ch] [rbp-16Ch]
  int v69; // [rsp+40h] [rbp-168h]
  int v70; // [rsp+44h] [rbp-164h]
  int v71; // [rsp+48h] [rbp-160h]
  char v72[272]; // [rsp+50h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = a2 + 4;
    if ( a2 + 4 <= v5 )
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v6;
      v8 = *(_DWORD *)(a2 + v3);
      if ( v7 )
        v8 = _byteswap_ulong(v8);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = a2 + 8;
        if ( v7 )
          v8 = _byteswap_ulong(*(_DWORD *)(v6 + v3));
        sub_180005050((__int64 *)a1, v8, (__int64)v72);
        v10 = *v9;
        v11 = 0;
        while ( v10 )
        {
          v12 = *((_DWORD *)v9 + 3);
          if ( *((_DWORD *)v9 + 2) + 4 > v12 )
            break;
          *((_DWORD *)v9 + 2) += 4;
          v13 = *((_DWORD *)v9 + 2) + 4;
          if ( v13 > v12 )
            break;
          ++v11;
          *((_DWORD *)v9 + 2) = v13;
          if ( v11 >= 5 )
          {
            v14 = 21;
            if ( (_DWORD)qword_1800306F0 == 779 )
              v14 = 16;
            v15 = 0;
            while ( (unsigned int)(*((_DWORD *)v9 + 2) + 4) <= *((_DWORD *)v9 + 3) )
            {
              *((_DWORD *)v9 + 2) += 4;
              if ( ++v15 >= v14 )
              {
                v16 = *((_DWORD *)v9 + 3);
                if ( *((_DWORD *)v9 + 2) + 4 <= v16 )
                {
                  *((_DWORD *)v9 + 2) += 4;
                  v17 = *((_DWORD *)v9 + 2);
                  v18 = *((_DWORD *)v9 + 4);
                  v62 = *(_DWORD *)((unsigned int)(v17 - 4) + v10);
                  if ( v18 )
                    v62 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v10));
                  v67 = *((_DWORD *)v9 + 2);
                  if ( v17 + 4 <= v16 )
                  {
                    v19 = v17 + 4;
                    *((_DWORD *)v9 + 2) = v19;
                    v61 = *(_DWORD *)((unsigned int)(v19 - 4) + v10);
                    if ( v18 )
                      v61 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v10));
                    if ( v19 + 4 <= v16 )
                    {
                      *((_DWORD *)v9 + 2) += 4;
                      v20 = *((_DWORD *)v9 + 2);
                      if ( v20 + 4 <= v16 )
                      {
                        v21 = v20 + 4;
                        *((_DWORD *)v9 + 2) = v21;
                        if ( v21 + 4 <= v16 )
                        {
                          *((_DWORD *)v9 + 2) += 4;
                          v22 = *((_DWORD *)v9 + 2);
                          v63 = *(_DWORD *)((unsigned int)(v22 - 4) + v10);
                          if ( v18 )
                            v63 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v10));
                          v68 = *((_DWORD *)v9 + 2);
                          if ( v22 + 4 <= v16 )
                          {
                            v23 = v22 + 4;
                            *((_DWORD *)v9 + 2) = v23;
                            v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v10);
                            if ( v18 )
                              v24 = _byteswap_ulong(v24);
                            if ( v23 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v25 = *((_DWORD *)v9 + 2);
                            if ( v25 + 4 > v16 )
                              return 0LL;
                            v26 = v25 + 4;
                            *((_DWORD *)v9 + 2) = v26;
                            v64 = *(_DWORD *)((unsigned int)(v26 - 4) + v10);
                            if ( v18 )
                              v64 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v10));
                            if ( v26 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v27 = *((_DWORD *)v9 + 2);
                            v28 = *(_DWORD *)((unsigned int)(v27 - 4) + v10);
                            if ( v18 )
                              v28 = _byteswap_ulong(v28);
                            if ( v27 + 4 > v16 )
                              return 0LL;
                            v29 = v27 + 4;
                            *((_DWORD *)v9 + 2) = v29;
                            if ( v29 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v30 = *((_DWORD *)v9 + 2);
                            v65 = *(_DWORD *)((unsigned int)(v30 - 4) + v10);
                            if ( v18 )
                              v65 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v30 - 4) + v10));
                            v69 = *((_DWORD *)v9 + 2);
                            if ( v30 + 4 > v16 )
                              return 0LL;
                            v31 = v30 + 4;
                            *((_DWORD *)v9 + 2) = v31;
                            v32 = *(_DWORD *)((unsigned int)(v31 - 4) + v10);
                            if ( v18 )
                              v32 = _byteswap_ulong(v32);
                            if ( v31 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v33 = *((_DWORD *)v9 + 2);
                            if ( v33 + 4 > v16 )
                              return 0LL;
                            v34 = v33 + 4;
                            *((_DWORD *)v9 + 2) = v34;
                            if ( v34 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v35 = *((_DWORD *)v9 + 2);
                            if ( v35 + 4 > v16 )
                              return 0LL;
                            v36 = v35 + 4;
                            *((_DWORD *)v9 + 2) = v36;
                            if ( v36 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v37 = *((_DWORD *)v9 + 2);
                            if ( v37 + 4 > v16 )
                              return 0LL;
                            v38 = v37 + 4;
                            *((_DWORD *)v9 + 2) = v38;
                            if ( v38 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v39 = *((_DWORD *)v9 + 2);
                            v66 = *(_DWORD *)((unsigned int)(v39 - 4) + v10);
                            if ( v18 )
                              v66 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v39 - 4) + v10));
                            v70 = *((_DWORD *)v9 + 2);
                            if ( v39 + 4 > v16 )
                              return 0LL;
                            v40 = v39 + 4;
                            *((_DWORD *)v9 + 2) = v40;
                            v41 = *(_DWORD *)((unsigned int)(v40 - 4) + v10);
                            if ( v18 )
                              v41 = _byteswap_ulong(v41);
                            if ( v40 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v42 = *((_DWORD *)v9 + 2);
                            if ( v42 + 4 > v16 )
                              return 0LL;
                            v43 = v42 + 4;
                            *((_DWORD *)v9 + 2) = v43;
                            if ( v43 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v44 = *((_DWORD *)v9 + 2);
                            if ( v44 + 4 > v16 )
                              return 0LL;
                            v45 = v44 + 4;
                            *((_DWORD *)v9 + 2) = v45;
                            if ( v45 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v46 = *((_DWORD *)v9 + 2);
                            if ( v46 + 4 > v16 )
                              return 0LL;
                            v47 = v46 + 4;
                            *((_DWORD *)v9 + 2) = v47;
                            if ( v47 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v48 = *((_DWORD *)v9 + 2);
                            v49 = *(_DWORD *)((unsigned int)(v48 - 4) + v10);
                            if ( v18 )
                              v49 = _byteswap_ulong(v49);
                            v71 = *((_DWORD *)v9 + 2);
                            if ( v48 + 4 > v16 )
                              return 0LL;
                            v50 = v48 + 4;
                            *((_DWORD *)v9 + 2) = v50;
                            v51 = *(_DWORD *)((unsigned int)(v50 - 4) + v10);
                            if ( v18 )
                              v51 = _byteswap_ulong(v51);
                            if ( v50 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v52 = *((_DWORD *)v9 + 2);
                            if ( v52 + 4 > v16 )
                              return 0LL;
                            v53 = v52 + 4;
                            *((_DWORD *)v9 + 2) = v53;
                            if ( v53 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v54 = *((_DWORD *)v9 + 2);
                            if ( v54 + 4 > v16 )
                              return 0LL;
                            v55 = v54 + 4;
                            *((_DWORD *)v9 + 2) = v55;
                            if ( v55 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v56 = *((_DWORD *)v9 + 2);
                            if ( v56 + 4 > v16 )
                              return 0LL;
                            v57 = v56 + 4;
                            *((_DWORD *)v9 + 2) = v57;
                            if ( v57 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) += 4;
                            v58 = *((_DWORD *)v9 + 2);
                            if ( v58 + 4 > v16 )
                              return 0LL;
                            *((_DWORD *)v9 + 2) = v58 + 4;
                            v59 = v61;
                            if ( v61 )
                              v59 = v67 + v61;
                            if ( v24 )
                              v24 += v68;
                            if ( v28 )
                              v28 += v26;
                            if ( v32 )
                              v32 += v69;
                            if ( v41 )
                              v41 += v70;
                            if ( v51 )
                              v51 += v71;
                            *(_DWORD *)(a3 + 28) = v59;
                            *(_QWORD *)(a3 + 40) = 0LL;
                            *(_DWORD *)(a3 + 32) = v63;
                            *(_DWORD *)(a3 + 48) = v64;
                            *(_DWORD *)(a3 + 56) = v65;
                            *(_DWORD *)(a3 + 64) = v66;
                            result = 1LL;
                            *(_DWORD *)(a3 + 24) = v62;
                            *(_DWORD *)(a3 + 36) = v24;
                            *(_DWORD *)(a3 + 52) = v28;
                            *(_DWORD *)(a3 + 60) = v32;
                            *(_DWORD *)(a3 + 68) = v41;
                            *(_DWORD *)(a3 + 72) = v49;
                            *(_DWORD *)(a3 + 76) = v51;
                            return result;
                          }
                        }
                      }
                    }
                  }
                }
                return 0LL;
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 180016DD7: conditional instruction was optimized away because r8d.4 is in (==10|==15)
// 180016DE3: conditional instruction was optimized away because r9.8!=0
// 180016E09: conditional instruction was optimized away because r9.8!=0
// 180016D74: variable 'v9' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180016CF0: using guessed type char var_158[272];

//----- (00000001800172F0) ----------------------------------------------------
__int64 __fastcall sub_1800172F0(__int64 a1, unsigned int a2, unsigned __int32 *a3)
{
  __int64 v3; // r11
  unsigned int v5; // ebx
  unsigned int v6; // r10d
  int v7; // r8d
  unsigned __int32 v8; // r9d
  __int64 *v9; // rcx
  __int64 v10; // r10
  unsigned int v11; // r11d
  int v12; // edx
  unsigned int v13; // r8d
  unsigned int v14; // eax
  int i; // edx
  int v16; // edi
  unsigned int v17; // r8d
  int v18; // ebx
  int v19; // edi
  int v20; // r15d
  int v21; // r15d
  unsigned int v22; // r9d
  int v23; // r9d
  int v24; // r9d
  int v25; // r9d
  int v26; // r9d
  int v27; // edx
  int v28; // edx
  int v29; // r9d
  int v30; // r9d
  int v31; // r9d
  int v32; // r9d
  int v33; // r9d
  int v34; // r9d
  unsigned int v35; // r13d
  int v36; // edx
  int v37; // edx
  int v38; // edx
  int v39; // edx
  int v40; // edx
  int v41; // edx
  int v42; // r9d
  int v43; // r9d
  unsigned int v44; // ebp
  int v45; // edx
  int v46; // edx
  int v47; // edx
  int v48; // edx
  int v49; // edx
  int v50; // edx
  int v51; // edx
  int v52; // edx
  int v53; // edx
  int v54; // edx
  int v55; // edx
  int v56; // edx
  int v57; // r9d
  unsigned int v58; // r14d
  int v59; // r12d
  int v60; // r9d
  unsigned int v61; // r11d
  int v62; // edx
  int v63; // edx
  int v64; // edx
  int v65; // edx
  int v66; // edx
  int v67; // edx
  int v68; // edx
  int v69; // edx
  unsigned __int32 v70; // r9d
  unsigned __int32 v71; // r10d
  unsigned __int32 v72; // r8d
  unsigned __int32 v73; // edx
  unsigned __int32 v74; // ecx
  unsigned __int32 v75; // eax
  __int64 result; // rax
  unsigned __int32 v77; // [rsp+20h] [rbp-1A8h]
  unsigned __int32 v78; // [rsp+24h] [rbp-1A4h]
  unsigned __int32 v79; // [rsp+28h] [rbp-1A0h]
  unsigned __int32 v80; // [rsp+2Ch] [rbp-19Ch]
  unsigned __int32 v81; // [rsp+30h] [rbp-198h]
  unsigned __int32 v82; // [rsp+34h] [rbp-194h]
  unsigned __int32 v83; // [rsp+38h] [rbp-190h]
  unsigned __int32 v84; // [rsp+3Ch] [rbp-18Ch]
  unsigned __int32 v85; // [rsp+40h] [rbp-188h]
  unsigned __int32 v86; // [rsp+44h] [rbp-184h]
  unsigned __int32 v87; // [rsp+48h] [rbp-180h]
  unsigned __int32 v88; // [rsp+4Ch] [rbp-17Ch]
  unsigned __int32 v89; // [rsp+50h] [rbp-178h]
  unsigned __int32 v90; // [rsp+54h] [rbp-174h]
  int v91; // [rsp+58h] [rbp-170h]
  int v92; // [rsp+5Ch] [rbp-16Ch]
  int v93; // [rsp+60h] [rbp-168h]
  int v94; // [rsp+64h] [rbp-164h]
  int v95; // [rsp+68h] [rbp-160h]
  int v96; // [rsp+6Ch] [rbp-15Ch]
  char v97[272]; // [rsp+70h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = a2 + 4;
    if ( a2 + 4 <= v5 )
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v6;
      v8 = *(_DWORD *)(a2 + v3);
      if ( v7 )
        v8 = _byteswap_ulong(v8);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = a2 + 8;
        if ( v7 )
          v8 = _byteswap_ulong(*(_DWORD *)(v6 + v3));
        sub_180005050((__int64 *)a1, v8, (__int64)v97);
        v10 = *v9;
        v11 = 0;
        v12 = 0;
        while ( v10 )
        {
          v13 = *((_DWORD *)v9 + 3);
          if ( *((_DWORD *)v9 + 2) + 4 > v13 )
            break;
          *((_DWORD *)v9 + 2) += 4;
          v14 = *((_DWORD *)v9 + 2) + 4;
          if ( v14 > v13 )
            break;
          ++v12;
          *((_DWORD *)v9 + 2) = v14;
          if ( v12 >= 5 )
          {
            for ( i = 0; i < 9; ++i )
            {
              if ( (unsigned int)(*((_DWORD *)v9 + 2) + 4) > *((_DWORD *)v9 + 3) )
                return 0LL;
              *((_DWORD *)v9 + 2) += 4;
              v16 = *((_DWORD *)v9 + 2);
            }
            v17 = *((_DWORD *)v9 + 3);
            if ( v16 + 4 > v17 )
              return 0LL;
            v18 = *((_DWORD *)v9 + 4);
            v19 = v16 + 4;
            *((_DWORD *)v9 + 2) = v19;
            v83 = *(_DWORD *)((unsigned int)(v19 - 4) + v10);
            if ( v18 )
              v83 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v10));
            if ( v19 + 4 > v17 )
              return 0LL;
            *((_DWORD *)v9 + 2) += 4;
            v20 = *((_DWORD *)v9 + 2);
            v77 = *(_DWORD *)((unsigned int)(v20 - 4) + v10);
            if ( v18 )
              v77 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v10));
            if ( v20 + 4 <= v17 )
            {
              v21 = v20 + 4;
              *((_DWORD *)v9 + 2) = v21;
              v84 = *(_DWORD *)((unsigned int)(v21 - 4) + v10);
              if ( v18 )
                v84 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v10));
              if ( v21 + 4 <= v17 )
              {
                *((_DWORD *)v9 + 2) += 4;
                v22 = *((_DWORD *)v9 + 2);
                v78 = *(_DWORD *)(v22 - 4 + v10);
                if ( v18 )
                  v78 = _byteswap_ulong(*(_DWORD *)(v22 - 4 + v10));
                while ( v22 + 4 <= v17 )
                {
                  *((_DWORD *)v9 + 2) += 4;
                  v22 = *((_DWORD *)v9 + 2) + 4;
                  if ( v22 > v17 )
                    break;
                  ++v11;
                  *((_DWORD *)v9 + 2) = v22;
                  if ( v11 >= 4 )
                  {
                    if ( v22 + 4 <= v17 )
                    {
                      *((_DWORD *)v9 + 2) += 4;
                      v23 = *((_DWORD *)v9 + 2);
                      v85 = *(_DWORD *)((unsigned int)(v23 - 4) + v10);
                      if ( v18 )
                        v85 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v10));
                      v91 = *((_DWORD *)v9 + 2);
                      if ( v23 + 4 <= v17 )
                      {
                        v24 = v23 + 4;
                        *((_DWORD *)v9 + 2) = v24;
                        v79 = *(_DWORD *)((unsigned int)(v24 - 4) + v10);
                        if ( v18 )
                          v79 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v24 - 4) + v10));
                        if ( v24 + 4 <= v17 )
                        {
                          *((_DWORD *)v9 + 2) += 4;
                          v25 = *((_DWORD *)v9 + 2);
                          v86 = *(_DWORD *)((unsigned int)(v25 - 4) + v10);
                          if ( v18 )
                            v86 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v25 - 4) + v10));
                          v92 = *((_DWORD *)v9 + 2);
                          if ( v25 + 4 <= v17 )
                          {
                            v26 = v25 + 4;
                            *((_DWORD *)v9 + 2) = v26;
                            v80 = *(_DWORD *)((unsigned int)(v26 - 4) + v10);
                            if ( v18 )
                              v80 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v10));
                            if ( v26 + 4 <= v17 )
                            {
                              *((_DWORD *)v9 + 2) += 4;
                              v27 = *((_DWORD *)v9 + 2);
                              if ( v27 + 4 <= v17 )
                              {
                                v28 = v27 + 4;
                                *((_DWORD *)v9 + 2) = v28;
                                if ( v28 + 4 <= v17 )
                                {
                                  *((_DWORD *)v9 + 2) += 4;
                                  v29 = *((_DWORD *)v9 + 2);
                                  v87 = *(_DWORD *)((unsigned int)(v29 - 4) + v10);
                                  if ( v18 )
                                    v87 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v29 - 4) + v10));
                                  v93 = *((_DWORD *)v9 + 2);
                                  if ( v29 + 4 <= v17 )
                                  {
                                    v30 = v29 + 4;
                                    *((_DWORD *)v9 + 2) = v30;
                                    v81 = *(_DWORD *)((unsigned int)(v30 - 4) + v10);
                                    if ( v18 )
                                      v81 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v30 - 4) + v10));
                                    if ( v30 + 4 <= v17 )
                                    {
                                      *((_DWORD *)v9 + 2) += 4;
                                      v31 = *((_DWORD *)v9 + 2);
                                      v88 = *(_DWORD *)((unsigned int)(v31 - 4) + v10);
                                      if ( v18 )
                                        v88 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v31 - 4) + v10));
                                      v94 = *((_DWORD *)v9 + 2);
                                      if ( v31 + 4 <= v17 )
                                      {
                                        v32 = v31 + 4;
                                        *((_DWORD *)v9 + 2) = v32;
                                        v82 = *(_DWORD *)((unsigned int)(v32 - 4) + v10);
                                        if ( v18 )
                                          v82 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v32 - 4) + v10));
                                        if ( v32 + 4 <= v17 )
                                        {
                                          *((_DWORD *)v9 + 2) += 4;
                                          v33 = *((_DWORD *)v9 + 2);
                                          v89 = *(_DWORD *)((unsigned int)(v33 - 4) + v10);
                                          if ( v18 )
                                            v89 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v33 - 4) + v10));
                                          v95 = *((_DWORD *)v9 + 2);
                                          if ( v33 + 4 <= v17 )
                                          {
                                            v34 = v33 + 4;
                                            *((_DWORD *)v9 + 2) = v34;
                                            v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v10);
                                            if ( v18 )
                                              v35 = _byteswap_ulong(v35);
                                            if ( v34 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v36 = *((_DWORD *)v9 + 2);
                                            if ( v36 + 4 > v17 )
                                              return 0LL;
                                            v37 = v36 + 4;
                                            *((_DWORD *)v9 + 2) = v37;
                                            if ( v37 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v38 = *((_DWORD *)v9 + 2);
                                            if ( v38 + 4 > v17 )
                                              return 0LL;
                                            v39 = v38 + 4;
                                            *((_DWORD *)v9 + 2) = v39;
                                            if ( v39 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v40 = *((_DWORD *)v9 + 2);
                                            if ( v40 + 4 > v17 )
                                              return 0LL;
                                            v41 = v40 + 4;
                                            *((_DWORD *)v9 + 2) = v41;
                                            if ( v41 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v42 = *((_DWORD *)v9 + 2);
                                            v90 = *(_DWORD *)((unsigned int)(v42 - 4) + v10);
                                            if ( v18 )
                                              v90 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v42 - 4) + v10));
                                            v96 = *((_DWORD *)v9 + 2);
                                            if ( v42 + 4 > v17 )
                                              return 0LL;
                                            v43 = v42 + 4;
                                            *((_DWORD *)v9 + 2) = v43;
                                            v44 = *(_DWORD *)((unsigned int)(v43 - 4) + v10);
                                            if ( v18 )
                                              v44 = _byteswap_ulong(v44);
                                            if ( v43 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v45 = *((_DWORD *)v9 + 2);
                                            if ( v45 + 4 > v17 )
                                              return 0LL;
                                            v46 = v45 + 4;
                                            *((_DWORD *)v9 + 2) = v46;
                                            if ( v46 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v47 = *((_DWORD *)v9 + 2);
                                            if ( v47 + 4 > v17 )
                                              return 0LL;
                                            v48 = v47 + 4;
                                            *((_DWORD *)v9 + 2) = v48;
                                            if ( v48 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v49 = *((_DWORD *)v9 + 2);
                                            if ( v49 + 4 > v17 )
                                              return 0LL;
                                            v50 = v49 + 4;
                                            *((_DWORD *)v9 + 2) = v50;
                                            if ( v50 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v51 = *((_DWORD *)v9 + 2);
                                            if ( v51 + 4 > v17 )
                                              return 0LL;
                                            v52 = v51 + 4;
                                            *((_DWORD *)v9 + 2) = v52;
                                            if ( v52 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v53 = *((_DWORD *)v9 + 2);
                                            if ( v53 + 4 > v17 )
                                              return 0LL;
                                            v54 = v53 + 4;
                                            *((_DWORD *)v9 + 2) = v54;
                                            if ( v54 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v55 = *((_DWORD *)v9 + 2);
                                            if ( v55 + 4 > v17 )
                                              return 0LL;
                                            v56 = v55 + 4;
                                            *((_DWORD *)v9 + 2) = v56;
                                            if ( v56 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v57 = *((_DWORD *)v9 + 2);
                                            v58 = *(_DWORD *)((unsigned int)(v57 - 4) + v10);
                                            if ( v18 )
                                              v58 = _byteswap_ulong(v58);
                                            v59 = *((_DWORD *)v9 + 2);
                                            if ( v57 + 4 > v17 )
                                              return 0LL;
                                            v60 = v57 + 4;
                                            *((_DWORD *)v9 + 2) = v60;
                                            v61 = *(_DWORD *)((unsigned int)(v60 - 4) + v10);
                                            if ( v18 )
                                              v61 = _byteswap_ulong(v61);
                                            if ( v60 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v62 = *((_DWORD *)v9 + 2);
                                            if ( v62 + 4 > v17 )
                                              return 0LL;
                                            v63 = v62 + 4;
                                            *((_DWORD *)v9 + 2) = v63;
                                            if ( v63 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v64 = *((_DWORD *)v9 + 2);
                                            if ( v64 + 4 > v17 )
                                              return 0LL;
                                            v65 = v64 + 4;
                                            *((_DWORD *)v9 + 2) = v65;
                                            if ( v65 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v66 = *((_DWORD *)v9 + 2);
                                            if ( v66 + 4 > v17 )
                                              return 0LL;
                                            v67 = v66 + 4;
                                            *((_DWORD *)v9 + 2) = v67;
                                            if ( v67 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v68 = *((_DWORD *)v9 + 2);
                                            if ( v68 + 4 > v17 )
                                              return 0LL;
                                            v69 = v68 + 4;
                                            *((_DWORD *)v9 + 2) = v69;
                                            if ( v69 + 4 > v17 )
                                              return 0LL;
                                            *((_DWORD *)v9 + 2) += 4;
                                            v70 = v77;
                                            if ( v77 )
                                              v70 = v19 + v77;
                                            v71 = v78;
                                            if ( v78 )
                                              v71 = v21 + v78;
                                            v72 = v79;
                                            if ( v79 )
                                              v72 = v91 + v79;
                                            v73 = v80;
                                            if ( v80 )
                                              v73 = v92 + v80;
                                            v74 = v81;
                                            if ( v81 )
                                              v74 = v93 + v81;
                                            v75 = v82;
                                            if ( v82 )
                                              v75 = v94 + v82;
                                            if ( v35 )
                                              v35 += v95;
                                            if ( v44 )
                                              v44 += v96;
                                            if ( v61 )
                                              v61 += v59;
                                            a3[13] = v75;
                                            a3[1] = v70;
                                            a3[14] = v89;
                                            a3[2] = v84;
                                            a3[5] = v72;
                                            a3[7] = v73;
                                            a3[11] = v74;
                                            a3[16] = v90;
                                            result = 1LL;
                                            *a3 = v83;
                                            a3[3] = v71;
                                            a3[4] = v85;
                                            a3[6] = v86;
                                            a3[10] = v87;
                                            a3[12] = v88;
                                            a3[15] = v35;
                                            a3[17] = v44;
                                            a3[18] = v58;
                                            a3[19] = v61;
                                            return result;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    return 0LL;
                  }
                }
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 1800173C7: conditional instruction was optimized away because r10.8!=0
// 1800173ED: conditional instruction was optimized away because r10.8!=0
// 180017374: variable 'v9' is possibly undefined
// 1800172F0: using guessed type char var_158[272];

//----- (0000000180017AB0) ----------------------------------------------------
__int64 __fastcall sub_180017AB0(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v3; // r11
  unsigned int v5; // ebx
  unsigned int v6; // r10d
  int v7; // r8d
  unsigned __int32 v8; // r9d
  __int64 *v9; // rcx
  __int64 v10; // r10
  int v11; // r9d
  int v12; // edx
  unsigned int v13; // r8d
  unsigned int v14; // eax
  int v15; // ebx
  unsigned int v16; // r8d
  int v17; // r11d
  int v18; // ebx
  int v19; // ebp
  int v20; // ebp
  int v21; // r9d
  int v22; // r9d
  int v23; // edx
  int v24; // edx
  int v25; // r9d
  int v26; // r9d
  int v27; // r13d
  int v28; // r13d
  int v29; // r9d
  int v30; // r9d
  int v31; // r9d
  int v32; // r9d
  int v33; // edx
  int v34; // edx
  int v35; // edx
  int v36; // edx
  int v37; // r9d
  int v38; // r9d
  int v39; // r9d
  unsigned int v40; // r15d
  int v41; // r9d
  int v42; // edx
  int v43; // edx
  int v44; // edx
  int v45; // edx
  int v46; // edx
  int v47; // edx
  int v48; // edx
  int v49; // edx
  int v50; // edx
  int v51; // edx
  int v52; // r14d
  int v53; // r14d
  unsigned int v54; // r12d
  int v55; // edi
  unsigned int v56; // r9d
  int v57; // edi
  int v58; // edx
  int v59; // edx
  int v60; // edx
  int v61; // edx
  int v62; // edx
  int v63; // edx
  int v64; // edx
  unsigned __int32 v65; // r8d
  unsigned __int32 v66; // r10d
  unsigned __int32 v67; // edx
  unsigned __int32 v68; // ecx
  unsigned __int32 v69; // eax
  __int64 result; // rax
  unsigned __int32 v71; // [rsp+20h] [rbp-198h]
  unsigned __int32 v72; // [rsp+24h] [rbp-194h]
  unsigned __int32 v73; // [rsp+28h] [rbp-190h]
  unsigned __int32 v74; // [rsp+2Ch] [rbp-18Ch]
  unsigned __int32 v75; // [rsp+30h] [rbp-188h]
  unsigned __int32 v76; // [rsp+34h] [rbp-184h]
  unsigned __int32 v77; // [rsp+38h] [rbp-180h]
  unsigned __int32 v78; // [rsp+3Ch] [rbp-17Ch]
  unsigned __int32 v79; // [rsp+40h] [rbp-178h]
  unsigned __int32 v80; // [rsp+44h] [rbp-174h]
  unsigned __int32 v81; // [rsp+48h] [rbp-170h]
  int v82; // [rsp+4Ch] [rbp-16Ch]
  int v83; // [rsp+50h] [rbp-168h]
  int v84; // [rsp+54h] [rbp-164h]
  char v85[272]; // [rsp+60h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = a2 + 4;
    if ( a2 + 4 <= v5 )
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v6;
      v8 = *(_DWORD *)(a2 + v3);
      if ( v7 )
        v8 = _byteswap_ulong(v8);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = a2 + 8;
        if ( v7 )
          v8 = _byteswap_ulong(*(_DWORD *)(v6 + v3));
        sub_180005050((__int64 *)a1, v8, (__int64)v85);
        v10 = *v9;
        v11 = 0;
        v12 = 0;
        while ( v10 )
        {
          v13 = *((_DWORD *)v9 + 3);
          if ( *((_DWORD *)v9 + 2) + 4 > v13 )
            break;
          *((_DWORD *)v9 + 2) += 4;
          v14 = *((_DWORD *)v9 + 2) + 4;
          if ( v14 > v13 )
            break;
          ++v12;
          *((_DWORD *)v9 + 2) = v14;
          if ( v12 >= 5 )
          {
            while ( (unsigned int)(*((_DWORD *)v9 + 2) + 4) <= *((_DWORD *)v9 + 3) )
            {
              *((_DWORD *)v9 + 2) += 4;
              ++v11;
              v15 = *((_DWORD *)v9 + 2);
              if ( v11 >= 21 )
              {
                v16 = *((_DWORD *)v9 + 3);
                if ( v15 + 4 <= v16 )
                {
                  v17 = *((_DWORD *)v9 + 4);
                  v18 = v15 + 4;
                  *((_DWORD *)v9 + 2) = v18;
                  v76 = *(_DWORD *)((unsigned int)(v18 - 4) + v10);
                  if ( v17 )
                    v76 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v10));
                  if ( v18 + 4 <= v16 )
                  {
                    *((_DWORD *)v9 + 2) += 4;
                    v19 = *((_DWORD *)v9 + 2);
                    v71 = *(_DWORD *)((unsigned int)(v19 - 4) + v10);
                    if ( v17 )
                      v71 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v10));
                    if ( v19 + 4 > v16 )
                      return 0LL;
                    v20 = v19 + 4;
                    *((_DWORD *)v9 + 2) = v20;
                    v77 = *(_DWORD *)((unsigned int)(v20 - 4) + v10);
                    if ( v17 )
                      v77 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v10));
                    if ( v20 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v21 = *((_DWORD *)v9 + 2);
                    v72 = *(_DWORD *)((unsigned int)(v21 - 4) + v10);
                    if ( v17 )
                      v72 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v10));
                    if ( v21 + 4 > v16 )
                      return 0LL;
                    v22 = v21 + 4;
                    *((_DWORD *)v9 + 2) = v22;
                    if ( v22 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v23 = *((_DWORD *)v9 + 2);
                    if ( v23 + 4 > v16 )
                      return 0LL;
                    v24 = v23 + 4;
                    *((_DWORD *)v9 + 2) = v24;
                    if ( v24 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v25 = *((_DWORD *)v9 + 2);
                    if ( v25 + 4 > v16 )
                      return 0LL;
                    v26 = v25 + 4;
                    *((_DWORD *)v9 + 2) = v26;
                    v82 = v26;
                    v78 = *(_DWORD *)((unsigned int)(v26 - 4) + v10);
                    if ( v17 )
                      v78 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v10));
                    if ( v26 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v27 = *((_DWORD *)v9 + 2);
                    v73 = *(_DWORD *)((unsigned int)(v27 - 4) + v10);
                    if ( v17 )
                      v73 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v27 - 4) + v10));
                    if ( v27 + 4 > v16 )
                      return 0LL;
                    v28 = v27 + 4;
                    *((_DWORD *)v9 + 2) = v28;
                    v79 = *(_DWORD *)((unsigned int)(v28 - 4) + v10);
                    if ( v17 )
                      v79 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v28 - 4) + v10));
                    if ( v28 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v29 = *((_DWORD *)v9 + 2);
                    v74 = *(_DWORD *)((unsigned int)(v29 - 4) + v10);
                    if ( v17 )
                      v74 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v29 - 4) + v10));
                    if ( v29 + 4 > v16 )
                      return 0LL;
                    v30 = v29 + 4;
                    *((_DWORD *)v9 + 2) = v30;
                    v83 = v30;
                    v80 = *(_DWORD *)((unsigned int)(v30 - 4) + v10);
                    if ( v17 )
                      v80 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v30 - 4) + v10));
                    if ( v30 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v31 = *((_DWORD *)v9 + 2);
                    v75 = *(_DWORD *)((unsigned int)(v31 - 4) + v10);
                    if ( v17 )
                      v75 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v31 - 4) + v10));
                    if ( v31 + 4 > v16 )
                      return 0LL;
                    v32 = v31 + 4;
                    *((_DWORD *)v9 + 2) = v32;
                    if ( v32 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v33 = *((_DWORD *)v9 + 2);
                    if ( v33 + 4 > v16 )
                      return 0LL;
                    v34 = v33 + 4;
                    *((_DWORD *)v9 + 2) = v34;
                    if ( v34 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v35 = *((_DWORD *)v9 + 2);
                    if ( v35 + 4 > v16 )
                      return 0LL;
                    v36 = v35 + 4;
                    *((_DWORD *)v9 + 2) = v36;
                    if ( v36 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v37 = *((_DWORD *)v9 + 2);
                    if ( v37 + 4 > v16 )
                      return 0LL;
                    v38 = v37 + 4;
                    *((_DWORD *)v9 + 2) = v38;
                    v84 = v38;
                    v81 = *(_DWORD *)((unsigned int)(v38 - 4) + v10);
                    if ( v17 )
                      v81 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v38 - 4) + v10));
                    if ( v38 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v39 = *((_DWORD *)v9 + 2);
                    v40 = *(_DWORD *)((unsigned int)(v39 - 4) + v10);
                    if ( v17 )
                      v40 = _byteswap_ulong(v40);
                    if ( v39 + 4 > v16 )
                      return 0LL;
                    v41 = v39 + 4;
                    *((_DWORD *)v9 + 2) = v41;
                    if ( v41 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v42 = *((_DWORD *)v9 + 2);
                    if ( v42 + 4 > v16 )
                      return 0LL;
                    v43 = v42 + 4;
                    *((_DWORD *)v9 + 2) = v43;
                    if ( v43 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v44 = *((_DWORD *)v9 + 2);
                    if ( v44 + 4 > v16 )
                      return 0LL;
                    v45 = v44 + 4;
                    *((_DWORD *)v9 + 2) = v45;
                    if ( v45 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v46 = *((_DWORD *)v9 + 2);
                    if ( v46 + 4 > v16 )
                      return 0LL;
                    v47 = v46 + 4;
                    *((_DWORD *)v9 + 2) = v47;
                    if ( v47 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v48 = *((_DWORD *)v9 + 2);
                    if ( v48 + 4 > v16 )
                      return 0LL;
                    v49 = v48 + 4;
                    *((_DWORD *)v9 + 2) = v49;
                    if ( v49 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v50 = *((_DWORD *)v9 + 2);
                    if ( v50 + 4 > v16 )
                      return 0LL;
                    v51 = v50 + 4;
                    *((_DWORD *)v9 + 2) = v51;
                    if ( v51 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v52 = *((_DWORD *)v9 + 2);
                    if ( v52 + 4 > v16 )
                      return 0LL;
                    v53 = v52 + 4;
                    *((_DWORD *)v9 + 2) = v53;
                    v54 = *(_DWORD *)((unsigned int)(v53 - 4) + v10);
                    if ( v17 )
                      v54 = _byteswap_ulong(v54);
                    if ( v53 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v55 = *((_DWORD *)v9 + 2);
                    v56 = *(_DWORD *)((unsigned int)(v55 - 4) + v10);
                    if ( v17 )
                      v56 = _byteswap_ulong(v56);
                    if ( v55 + 4 > v16 )
                      return 0LL;
                    v57 = v55 + 4;
                    *((_DWORD *)v9 + 2) = v57;
                    if ( v57 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v58 = *((_DWORD *)v9 + 2);
                    if ( v58 + 4 > v16 )
                      return 0LL;
                    v59 = v58 + 4;
                    *((_DWORD *)v9 + 2) = v59;
                    if ( v59 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v60 = *((_DWORD *)v9 + 2);
                    if ( v60 + 4 > v16 )
                      return 0LL;
                    v61 = v60 + 4;
                    *((_DWORD *)v9 + 2) = v61;
                    if ( v61 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v62 = *((_DWORD *)v9 + 2);
                    if ( v62 + 4 > v16 )
                      return 0LL;
                    v63 = v62 + 4;
                    *((_DWORD *)v9 + 2) = v63;
                    if ( v63 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v64 = *((_DWORD *)v9 + 2);
                    if ( v64 + 4 > v16 )
                      return 0LL;
                    v65 = v71;
                    *((_DWORD *)v9 + 2) = v64 + 4;
                    if ( v71 )
                      v65 = v18 + v71;
                    v66 = v72;
                    if ( v72 )
                      v66 = v20 + v72;
                    v67 = v73;
                    if ( v73 )
                      v67 = v82 + v73;
                    v68 = v74;
                    if ( v74 )
                      v68 = v28 + v74;
                    v69 = v75;
                    if ( v75 )
                      v69 = v83 + v75;
                    if ( v40 )
                      v40 += v84;
                    if ( v56 )
                      v56 += v53;
                    a3[5] = v65;
                    a3[15] = v69;
                    a3[6] = v77;
                    a3[11] = v67;
                    a3[13] = v68;
                    a3[16] = v81;
                    result = 1LL;
                    a3[10] = v78;
                    a3[4] = v76;
                    a3[7] = v66;
                    a3[12] = v79;
                    a3[14] = v80;
                    a3[17] = v40;
                    a3[18] = v54;
                    a3[19] = v56;
                    return result;
                  }
                }
                return 0LL;
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 180017B83: conditional instruction was optimized away because r10.8!=0
// 180017BAB: conditional instruction was optimized away because r10.8!=0
// 180017B34: variable 'v9' is possibly undefined
// 180017AB0: using guessed type char var_158[272];

//----- (0000000180018190) ----------------------------------------------------
__int64 __fastcall sub_180018190(__int64 a1, unsigned int a2, _DWORD *a3)
{
  __int64 v4; // r10
  unsigned int v5; // ebx
  int v6; // r11d
  unsigned __int32 v7; // r9d
  __int64 *v8; // rcx
  __int64 v9; // r9
  int v10; // edx
  int v11; // r8d
  unsigned int v12; // r10d
  unsigned int v13; // r8d
  int v14; // r11d
  int v15; // r10d
  unsigned int v16; // r12d
  int v17; // r11d
  unsigned int v18; // r15d
  int v19; // r11d
  int v20; // r11d
  unsigned int v21; // r13d
  int v22; // r11d
  int v23; // r11d
  int v24; // r11d
  int v25; // r11d
  int v26; // r11d
  int v27; // r11d
  int v28; // r11d
  unsigned int v29; // ebp
  int v30; // r11d
  unsigned int v31; // esi
  int v32; // r14d
  unsigned int v33; // ebx
  int v34; // edi
  unsigned int v35; // r11d
  int v36; // eax
  int v37; // eax
  int v38; // eax
  int v39; // eax
  int v40; // eax
  int v41; // eax
  int v42; // eax
  unsigned __int32 v43; // [rsp+20h] [rbp-198h]
  unsigned __int32 v44; // [rsp+24h] [rbp-194h]
  unsigned __int32 v45; // [rsp+28h] [rbp-190h]
  unsigned __int32 v46; // [rsp+2Ch] [rbp-18Ch]
  unsigned __int32 v47; // [rsp+30h] [rbp-188h]
  unsigned __int32 v48; // [rsp+34h] [rbp-184h]
  unsigned __int32 v49; // [rsp+38h] [rbp-180h]
  int v50; // [rsp+3Ch] [rbp-17Ch]
  int v51; // [rsp+40h] [rbp-178h]
  int v52; // [rsp+44h] [rbp-174h]
  int v53; // [rsp+48h] [rbp-170h]
  int v54; // [rsp+4Ch] [rbp-16Ch]
  int v55; // [rsp+50h] [rbp-168h]
  char v57[272]; // [rsp+60h] [rbp-158h] BYREF

  if ( !a2 )
    return 0LL;
  v4 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v4 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    if ( a2 + 4 <= v5 )
    {
      v6 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = a2 + 4;
      v7 = *(_DWORD *)(a2 + v4);
      if ( v6 )
        v7 = _byteswap_ulong(v7);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( v6 )
          v7 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v4));
        sub_180005050((__int64 *)a1, v7, (__int64)v57);
        v9 = *v8;
        v10 = 0;
        v11 = 0;
        while ( v9 )
        {
          v12 = *((_DWORD *)v8 + 3);
          if ( *((_DWORD *)v8 + 2) + 4 > v12 )
            break;
          *((_DWORD *)v8 + 2) += 4;
          if ( *((_DWORD *)v8 + 2) + 4 > v12 )
            break;
          *((_DWORD *)v8 + 2) += 4;
          if ( ++v11 >= 5 )
          {
            while ( (unsigned int)(*((_DWORD *)v8 + 2) + 4) <= *((_DWORD *)v8 + 3) )
            {
              *((_DWORD *)v8 + 2) += 4;
              if ( ++v10 >= 21 )
              {
                v13 = *((_DWORD *)v8 + 3);
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v14 = *((_DWORD *)v8 + 2);
                v15 = *((_DWORD *)v8 + 4);
                v50 = v14;
                v16 = *(_DWORD *)((unsigned int)(v14 - 4) + v9);
                if ( v15 )
                  v16 = _byteswap_ulong(v16);
                if ( v14 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v17 = *((_DWORD *)v8 + 2);
                v18 = *(_DWORD *)((unsigned int)(v17 - 4) + v9);
                if ( v15 )
                  v18 = _byteswap_ulong(v18);
                if ( v17 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v19 = *((_DWORD *)v8 + 2);
                v51 = v19;
                v43 = *(_DWORD *)((unsigned int)(v19 - 4) + v9);
                if ( v15 )
                  v43 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v9));
                if ( v19 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v20 = *((_DWORD *)v8 + 2);
                v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v9);
                if ( v15 )
                  v21 = _byteswap_ulong(v21);
                if ( v20 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v22 = *((_DWORD *)v8 + 2);
                v52 = v22;
                v44 = *(_DWORD *)((unsigned int)(v22 - 4) + v9);
                if ( v15 )
                  v44 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v9));
                if ( v22 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v23 = *((_DWORD *)v8 + 2);
                v45 = *(_DWORD *)((unsigned int)(v23 - 4) + v9);
                if ( v15 )
                  v45 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v9));
                if ( v23 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v24 = *((_DWORD *)v8 + 2);
                v53 = v24;
                v46 = *(_DWORD *)((unsigned int)(v24 - 4) + v9);
                if ( v15 )
                  v46 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v24 - 4) + v9));
                if ( v24 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v25 = *((_DWORD *)v8 + 2);
                v47 = *(_DWORD *)((unsigned int)(v25 - 4) + v9);
                if ( v15 )
                  v47 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v25 - 4) + v9));
                if ( v25 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v26 = *((_DWORD *)v8 + 2);
                v54 = v26;
                v48 = *(_DWORD *)((unsigned int)(v26 - 4) + v9);
                if ( v15 )
                  v48 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v9));
                if ( v26 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v27 = *((_DWORD *)v8 + 2);
                v49 = *(_DWORD *)((unsigned int)(v27 - 4) + v9);
                if ( v15 )
                  v49 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v27 - 4) + v9));
                if ( v27 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v28 = *((_DWORD *)v8 + 2);
                v55 = v28;
                v29 = *(_DWORD *)((unsigned int)(v28 - 4) + v9);
                if ( v15 )
                  v29 = _byteswap_ulong(v29);
                if ( v28 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v30 = *((_DWORD *)v8 + 2);
                v31 = *(_DWORD *)((unsigned int)(v30 - 4) + v9);
                if ( v15 )
                  v31 = _byteswap_ulong(v31);
                if ( v30 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v32 = *((_DWORD *)v8 + 2);
                v33 = *(_DWORD *)((unsigned int)(v32 - 4) + v9);
                if ( v15 )
                  v33 = _byteswap_ulong(v33);
                if ( v32 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v34 = *((_DWORD *)v8 + 2);
                v35 = *(_DWORD *)((unsigned int)(v34 - 4) + v9);
                if ( v15 )
                  v35 = _byteswap_ulong(v35);
                if ( v34 + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                if ( *((_DWORD *)v8 + 2) + 4 > v13 )
                  return 0LL;
                *((_DWORD *)v8 + 2) += 4;
                v36 = v18 + v50;
                a3[6] = v16;
                a3[16] = v29;
                if ( !v18 )
                  v36 = 0;
                a3[18] = v33;
                a3[7] = v36;
                a3[8] = v43;
                v37 = v21 + v51;
                if ( !v21 )
                  v37 = 0;
                a3[9] = v37;
                a3[10] = v44;
                v38 = v45 + v52;
                if ( !v45 )
                  v38 = 0;
                a3[11] = v38;
                a3[12] = v46;
                v39 = v47 + v53;
                if ( !v47 )
                  v39 = 0;
                a3[13] = v39;
                a3[14] = v48;
                v40 = v49 + v54;
                if ( !v49 )
                  v40 = 0;
                a3[15] = v40;
                v41 = v31 + v55;
                if ( !v31 )
                  v41 = 0;
                a3[17] = v41;
                v42 = v32 + v35;
                if ( !v35 )
                  v42 = 0;
                a3[19] = v42;
                return 1LL;
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 180018284: conditional instruction was optimized away because r9.8!=0
// 1800182AA: conditional instruction was optimized away because r9.8!=0
// 18001823D: variable 'v8' is possibly undefined
// 180018190: using guessed type char var_158[272];

//----- (00000001800188D0) ----------------------------------------------------
__int64 __fastcall sub_1800188D0(__int64 a1, unsigned int a2, unsigned __int32 *a3)
{
  __int64 v3; // r11
  unsigned int v5; // ebx
  unsigned int v6; // r10d
  int v7; // r8d
  unsigned __int32 v8; // r9d
  __int64 *v9; // rcx
  __int64 v10; // r10
  int v11; // r9d
  int v12; // edx
  unsigned int v13; // r8d
  unsigned int v14; // eax
  int v15; // ebx
  unsigned int v16; // r8d
  int v17; // r11d
  int v18; // ebx
  int v19; // ebp
  int v20; // ebp
  int v21; // r9d
  int v22; // r9d
  int v23; // edx
  int v24; // edx
  int v25; // edx
  int v26; // edx
  int v27; // edx
  int v28; // edx
  int v29; // edx
  int v30; // edx
  int v31; // edx
  int v32; // edx
  int v33; // edx
  int v34; // edx
  int v35; // r14d
  int v36; // r14d
  int v37; // r9d
  int v38; // r9d
  int v39; // r13d
  int v40; // r13d
  int v41; // r15d
  int v42; // r15d
  int v43; // r9d
  int v44; // r9d
  int v45; // r9d
  int v46; // r9d
  int v47; // r9d
  unsigned int v48; // r12d
  int v49; // r9d
  int v50; // edx
  int v51; // edx
  int v52; // edx
  int v53; // edx
  int v54; // r9d
  int v55; // r9d
  int v56; // r9d
  unsigned int v57; // esi
  int v58; // r9d
  int v59; // edx
  int v60; // edx
  int v61; // edx
  int v62; // edx
  int v63; // edx
  int v64; // edx
  int v65; // edx
  int v66; // edx
  int v67; // edx
  int v68; // edx
  int v69; // r9d
  int v70; // r9d
  unsigned int v71; // edx
  unsigned int v72; // eax
  unsigned __int32 v73; // ebx
  unsigned __int32 v74; // r11d
  unsigned __int32 v75; // r10d
  unsigned __int32 v76; // r8d
  unsigned __int32 v77; // ecx
  __int64 result; // rax
  unsigned __int32 v79; // [rsp+20h] [rbp-1A8h]
  unsigned __int32 v80; // [rsp+24h] [rbp-1A4h]
  unsigned __int32 v81; // [rsp+28h] [rbp-1A0h]
  unsigned __int32 v82; // [rsp+2Ch] [rbp-19Ch]
  unsigned __int32 v83; // [rsp+30h] [rbp-198h]
  unsigned __int32 v84; // [rsp+34h] [rbp-194h]
  unsigned __int32 v85; // [rsp+38h] [rbp-190h]
  unsigned __int32 v86; // [rsp+3Ch] [rbp-18Ch]
  unsigned __int32 v87; // [rsp+40h] [rbp-188h]
  unsigned __int32 v88; // [rsp+44h] [rbp-184h]
  unsigned __int32 v89; // [rsp+48h] [rbp-180h]
  unsigned __int32 v90; // [rsp+4Ch] [rbp-17Ch]
  unsigned __int32 v91; // [rsp+50h] [rbp-178h]
  unsigned __int32 v92; // [rsp+54h] [rbp-174h]
  int v93; // [rsp+58h] [rbp-170h]
  int v94; // [rsp+5Ch] [rbp-16Ch]
  int v95; // [rsp+60h] [rbp-168h]
  char v96[272]; // [rsp+70h] [rbp-158h] BYREF

  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = a2;
  if ( v3 )
  {
    v5 = *(_DWORD *)(a1 + 12);
    v6 = a2 + 4;
    if ( a2 + 4 <= v5 )
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v6;
      v8 = *(_DWORD *)(a2 + v3);
      if ( v7 )
        v8 = _byteswap_ulong(v8);
      if ( a2 + 8 <= v5 )
      {
        *(_DWORD *)(a1 + 8) = a2 + 8;
        if ( v7 )
          v8 = _byteswap_ulong(*(_DWORD *)(v6 + v3));
        sub_180005050((__int64 *)a1, v8, (__int64)v96);
        v10 = *v9;
        v11 = 0;
        v12 = 0;
        while ( v10 )
        {
          v13 = *((_DWORD *)v9 + 3);
          if ( *((_DWORD *)v9 + 2) + 4 > v13 )
            break;
          *((_DWORD *)v9 + 2) += 4;
          v14 = *((_DWORD *)v9 + 2) + 4;
          if ( v14 > v13 )
            break;
          ++v12;
          *((_DWORD *)v9 + 2) = v14;
          if ( v12 >= 5 )
          {
            while ( (unsigned int)(*((_DWORD *)v9 + 2) + 4) <= *((_DWORD *)v9 + 3) )
            {
              *((_DWORD *)v9 + 2) += 4;
              ++v11;
              v15 = *((_DWORD *)v9 + 2);
              if ( v11 >= 9 )
              {
                v16 = *((_DWORD *)v9 + 3);
                if ( v15 + 4 <= v16 )
                {
                  v17 = *((_DWORD *)v9 + 4);
                  v18 = v15 + 4;
                  *((_DWORD *)v9 + 2) = v18;
                  v85 = *(_DWORD *)((unsigned int)(v18 - 4) + v10);
                  if ( v17 )
                    v85 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v10));
                  if ( v18 + 4 <= v16 )
                  {
                    *((_DWORD *)v9 + 2) += 4;
                    v19 = *((_DWORD *)v9 + 2);
                    v79 = *(_DWORD *)((unsigned int)(v19 - 4) + v10);
                    if ( v17 )
                      v79 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v19 - 4) + v10));
                    if ( v19 + 4 > v16 )
                      return 0LL;
                    v20 = v19 + 4;
                    *((_DWORD *)v9 + 2) = v20;
                    v86 = *(_DWORD *)((unsigned int)(v20 - 4) + v10);
                    if ( v17 )
                      v86 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v10));
                    if ( v20 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v21 = *((_DWORD *)v9 + 2);
                    v80 = *(_DWORD *)((unsigned int)(v21 - 4) + v10);
                    if ( v17 )
                      v80 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v10));
                    if ( v21 + 4 > v16 )
                      return 0LL;
                    v22 = v21 + 4;
                    *((_DWORD *)v9 + 2) = v22;
                    if ( v22 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v23 = *((_DWORD *)v9 + 2);
                    if ( v23 + 4 > v16 )
                      return 0LL;
                    v24 = v23 + 4;
                    *((_DWORD *)v9 + 2) = v24;
                    if ( v24 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v25 = *((_DWORD *)v9 + 2);
                    if ( v25 + 4 > v16 )
                      return 0LL;
                    v26 = v25 + 4;
                    *((_DWORD *)v9 + 2) = v26;
                    if ( v26 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v27 = *((_DWORD *)v9 + 2);
                    if ( v27 + 4 > v16 )
                      return 0LL;
                    v28 = v27 + 4;
                    *((_DWORD *)v9 + 2) = v28;
                    if ( v28 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v29 = *((_DWORD *)v9 + 2);
                    if ( v29 + 4 > v16 )
                      return 0LL;
                    v30 = v29 + 4;
                    *((_DWORD *)v9 + 2) = v30;
                    if ( v30 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v31 = *((_DWORD *)v9 + 2);
                    if ( v31 + 4 > v16 )
                      return 0LL;
                    v32 = v31 + 4;
                    *((_DWORD *)v9 + 2) = v32;
                    if ( v32 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v33 = *((_DWORD *)v9 + 2);
                    if ( v33 + 4 > v16 )
                      return 0LL;
                    v34 = v33 + 4;
                    *((_DWORD *)v9 + 2) = v34;
                    if ( v34 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v35 = *((_DWORD *)v9 + 2);
                    if ( v35 + 4 > v16 )
                      return 0LL;
                    v36 = v35 + 4;
                    *((_DWORD *)v9 + 2) = v36;
                    v87 = *(_DWORD *)((unsigned int)(v36 - 4) + v10);
                    if ( v17 )
                      v87 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v36 - 4) + v10));
                    if ( v36 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v37 = *((_DWORD *)v9 + 2);
                    v81 = *(_DWORD *)((unsigned int)(v37 - 4) + v10);
                    if ( v17 )
                      v81 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v37 - 4) + v10));
                    if ( v37 + 4 > v16 )
                      return 0LL;
                    v38 = v37 + 4;
                    *((_DWORD *)v9 + 2) = v38;
                    if ( v38 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v39 = *((_DWORD *)v9 + 2);
                    if ( v39 + 4 > v16 )
                      return 0LL;
                    v40 = v39 + 4;
                    *((_DWORD *)v9 + 2) = v40;
                    v88 = *(_DWORD *)((unsigned int)(v40 - 4) + v10);
                    if ( v17 )
                      v88 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v40 - 4) + v10));
                    if ( v40 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v41 = *((_DWORD *)v9 + 2);
                    v82 = *(_DWORD *)((unsigned int)(v41 - 4) + v10);
                    if ( v17 )
                      v82 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v41 - 4) + v10));
                    if ( v41 + 4 > v16 )
                      return 0LL;
                    v42 = v41 + 4;
                    *((_DWORD *)v9 + 2) = v42;
                    v89 = *(_DWORD *)((unsigned int)(v42 - 4) + v10);
                    if ( v17 )
                      v89 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v42 - 4) + v10));
                    if ( v42 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v43 = *((_DWORD *)v9 + 2);
                    v83 = *(_DWORD *)((unsigned int)(v43 - 4) + v10);
                    if ( v17 )
                      v83 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v43 - 4) + v10));
                    if ( v43 + 4 > v16 )
                      return 0LL;
                    v44 = v43 + 4;
                    *((_DWORD *)v9 + 2) = v44;
                    v93 = v44;
                    v90 = *(_DWORD *)((unsigned int)(v44 - 4) + v10);
                    if ( v17 )
                      v90 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v44 - 4) + v10));
                    if ( v44 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v45 = *((_DWORD *)v9 + 2);
                    v84 = *(_DWORD *)((unsigned int)(v45 - 4) + v10);
                    if ( v17 )
                      v84 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v45 - 4) + v10));
                    if ( v45 + 4 > v16 )
                      return 0LL;
                    v46 = v45 + 4;
                    *((_DWORD *)v9 + 2) = v46;
                    v94 = v46;
                    v91 = *(_DWORD *)((unsigned int)(v46 - 4) + v10);
                    if ( v17 )
                      v91 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v46 - 4) + v10));
                    if ( v46 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v47 = *((_DWORD *)v9 + 2);
                    v48 = *(_DWORD *)((unsigned int)(v47 - 4) + v10);
                    if ( v17 )
                      v48 = _byteswap_ulong(v48);
                    if ( v47 + 4 > v16 )
                      return 0LL;
                    v49 = v47 + 4;
                    *((_DWORD *)v9 + 2) = v49;
                    if ( v49 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v50 = *((_DWORD *)v9 + 2);
                    if ( v50 + 4 > v16 )
                      return 0LL;
                    v51 = v50 + 4;
                    *((_DWORD *)v9 + 2) = v51;
                    if ( v51 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v52 = *((_DWORD *)v9 + 2);
                    if ( v52 + 4 > v16 )
                      return 0LL;
                    v53 = v52 + 4;
                    *((_DWORD *)v9 + 2) = v53;
                    if ( v53 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v54 = *((_DWORD *)v9 + 2);
                    if ( v54 + 4 > v16 )
                      return 0LL;
                    v55 = v54 + 4;
                    *((_DWORD *)v9 + 2) = v55;
                    v95 = v55;
                    v92 = *(_DWORD *)((unsigned int)(v55 - 4) + v10);
                    if ( v17 )
                      v92 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v55 - 4) + v10));
                    if ( v55 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v56 = *((_DWORD *)v9 + 2);
                    v57 = *(_DWORD *)((unsigned int)(v56 - 4) + v10);
                    if ( v17 )
                      v57 = _byteswap_ulong(v57);
                    if ( v56 + 4 > v16 )
                      return 0LL;
                    v58 = v56 + 4;
                    *((_DWORD *)v9 + 2) = v58;
                    if ( v58 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v59 = *((_DWORD *)v9 + 2);
                    if ( v59 + 4 > v16 )
                      return 0LL;
                    v60 = v59 + 4;
                    *((_DWORD *)v9 + 2) = v60;
                    if ( v60 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v61 = *((_DWORD *)v9 + 2);
                    if ( v61 + 4 > v16 )
                      return 0LL;
                    v62 = v61 + 4;
                    *((_DWORD *)v9 + 2) = v62;
                    if ( v62 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v63 = *((_DWORD *)v9 + 2);
                    if ( v63 + 4 > v16 )
                      return 0LL;
                    v64 = v63 + 4;
                    *((_DWORD *)v9 + 2) = v64;
                    if ( v64 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v65 = *((_DWORD *)v9 + 2);
                    if ( v65 + 4 > v16 )
                      return 0LL;
                    v66 = v65 + 4;
                    *((_DWORD *)v9 + 2) = v66;
                    if ( v66 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v67 = *((_DWORD *)v9 + 2);
                    if ( v67 + 4 > v16 )
                      return 0LL;
                    v68 = v67 + 4;
                    *((_DWORD *)v9 + 2) = v68;
                    if ( v68 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v69 = *((_DWORD *)v9 + 2);
                    if ( v69 + 4 > v16 )
                      return 0LL;
                    v70 = v69 + 4;
                    *((_DWORD *)v9 + 2) = v70;
                    v71 = *(_DWORD *)((unsigned int)(v70 - 4) + v10);
                    if ( v17 )
                      v71 = _byteswap_ulong(v71);
                    if ( v70 + 4 > v16 )
                      return 0LL;
                    *((_DWORD *)v9 + 2) += 4;
                    v72 = *(_DWORD *)((unsigned int)(*((_DWORD *)v9 + 2) - 4) + v10);
                    if ( v17 )
                      v72 = _byteswap_ulong(v72);
                    if ( v79 )
                      v79 += v18;
                    v73 = v80;
                    if ( v80 )
                      v73 = v20 + v80;
                    v74 = v81;
                    if ( v81 )
                      v74 = v36 + v81;
                    v75 = v82;
                    if ( v82 )
                      v75 = v40 + v82;
                    v76 = v83;
                    if ( v83 )
                      v76 = v42 + v83;
                    v77 = v84;
                    if ( v84 )
                      v77 = v93 + v84;
                    if ( v48 )
                      v48 += v94;
                    if ( v57 )
                      v57 += v95;
                    if ( v72 )
                      v72 += v70;
                    *a3 = v85;
                    a3[1] = v79;
                    a3[2] = v86;
                    a3[6] = v87;
                    a3[13] = v77;
                    a3[8] = v88;
                    a3[11] = v76;
                    a3[14] = v91;
                    a3[19] = v72;
                    result = 1LL;
                    a3[10] = v89;
                    a3[3] = v73;
                    a3[7] = v74;
                    a3[9] = v75;
                    a3[12] = v90;
                    a3[15] = v48;
                    a3[16] = v92;
                    a3[17] = v57;
                    a3[18] = v71;
                    return result;
                  }
                }
                return 0LL;
              }
            }
            return 0LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 1800189A3: conditional instruction was optimized away because r10.8!=0
// 1800189CB: conditional instruction was optimized away because r10.8!=0
// 180018954: variable 'v9' is possibly undefined
// 1800188D0: using guessed type char var_158[272];

//----- (00000001800190D0) ----------------------------------------------------
__int64 __fastcall sub_1800190D0(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v7; // r15d
  int v8; // r14d
  __int64 v9; // r9
  unsigned int v10; // r8d
  int v11; // r11d
  int v12; // edx
  unsigned __int32 v13; // r10d
  int v14; // r11d
  int v15; // r11d
  unsigned __int32 v16; // ebp
  int v17; // r11d
  int v18; // r11d
  unsigned __int32 v19; // esi
  int v20; // r11d
  int v21; // r11d
  unsigned __int32 v22; // edi
  int v23; // r11d
  __int64 *v24; // rcx
  __int64 *v25; // rcx
  __int64 *v26; // rcx
  unsigned int v27; // r9d
  int v28; // ecx
  __int64 v29; // rdx
  int v30; // ecx
  char *v31; // rdx
  char *v32; // r8
  char v33; // al
  unsigned int v34; // r13d
  __int64 v35; // r9
  unsigned int v36; // r8d
  int v37; // r10d
  int v38; // edx
  unsigned __int32 v39; // r11d
  int v40; // r10d
  int v41; // r10d
  unsigned __int32 v42; // ebp
  int v43; // r10d
  int v44; // r10d
  unsigned __int32 v45; // esi
  int v46; // r10d
  int v47; // r10d
  unsigned __int32 v48; // edi
  int v49; // r10d
  int v50; // r12d
  unsigned int v51; // r15d
  int v52; // r10d
  unsigned int v53; // r14d
  __int64 *v54; // rcx
  __int64 *v55; // rcx
  __int64 *v56; // rcx
  unsigned int v57; // edx
  int v58; // ecx
  __int64 v59; // r9
  unsigned int v60; // ecx
  int v61; // edi
  int v62; // r9d
  __int64 v63; // rcx
  char *v65; // [rsp+28h] [rbp-490h]
  char v66[272]; // [rsp+30h] [rbp-488h] BYREF
  char v67[272]; // [rsp+140h] [rbp-378h] BYREF
  char v68[272]; // [rsp+250h] [rbp-268h] BYREF
  char v69[272]; // [rsp+360h] [rbp-158h] BYREF

  if ( !a3 || !a2 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  result = sub_1800020D0((__int64)&qword_1800306F0, a2);
  if ( (_DWORD)result )
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    memset(v66, 0, 0x104uLL);
    v9 = *(_QWORD *)a1;
    if ( *(_QWORD *)a1 )
    {
      v10 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 <= v10 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)(a1 + 8);
        v12 = *(_DWORD *)(a1 + 16);
        v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
        if ( v12 )
          v13 = _byteswap_ulong(v13);
        if ( v11 + 4 <= v10 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          v14 = *(_DWORD *)(a1 + 8);
          if ( v12 )
            v13 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v14 - 4) + v9));
          if ( v14 + 4 <= v10 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v15 = *(_DWORD *)(a1 + 8);
            v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v9);
            if ( v12 )
              v16 = _byteswap_ulong(v16);
            if ( v15 + 4 <= v10 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v17 = *(_DWORD *)(a1 + 8);
              if ( v12 )
                v16 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v17 - 4) + v9));
              if ( v17 + 4 <= v10 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                v18 = *(_DWORD *)(a1 + 8);
                v19 = *(_DWORD *)((unsigned int)(v18 - 4) + v9);
                if ( v12 )
                  v19 = _byteswap_ulong(v19);
                if ( v18 + 4 <= v10 )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  v20 = *(_DWORD *)(a1 + 8);
                  if ( v12 )
                    v19 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v20 - 4) + v9));
                  if ( v20 + 4 <= v10 )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    v21 = *(_DWORD *)(a1 + 8);
                    v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v9);
                    if ( v12 )
                      v22 = _byteswap_ulong(v22);
                    if ( v21 + 4 <= v10 )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      v23 = *(_DWORD *)(a1 + 8);
                      if ( v12 )
                        v22 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v9));
                      if ( v23 + 4 <= v10 )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        if ( *(_DWORD *)(a1 + 8) + 4 <= v10 )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          if ( *(_DWORD *)(a1 + 8) + 4 <= v10 )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 <= v10 )
                            {
                              *(_DWORD *)(a1 + 8) += 4;
                              if ( *(_DWORD *)(a1 + 8) + 4 <= v10 )
                              {
                                *(_DWORD *)(a1 + 8) += 4;
                                sub_180005050((__int64 *)a1, v13, (__int64)v66);
                                sub_180005050(v24, v16, (__int64)v67);
                                sub_180005050(v25, v19, (__int64)v68);
                                sub_180005050(v26, v22, (__int64)v69);
                                v27 = 7;
                                if ( (unsigned int)(qword_1800306F0 - 911) <= 0x17 )
                                {
                                  v28 = 8913025;
                                  if ( _bittest(&v28, qword_1800306F0 - 911) )
                                    v27 = 5;
                                }
                                v29 = *(_QWORD *)a1;
                                v30 = 0;
                                while ( v29 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                                {
                                  *(_DWORD *)(a1 + 8) += 4;
                                  if ( ++v30 >= v27 )
                                  {
                                    if ( qword_180030710 )
                                    {
                                      v31 = v66;
                                      v32 = (char *)qword_180030710 + 312 * v8 + 52;
                                      do
                                      {
                                        v33 = *v31++;
                                        *v32++ = v33;
                                      }
                                      while ( v33 );
                                    }
                                    if ( ++v8 < a2 )
                                      goto LABEL_6;
                                    v34 = 0;
                                    *(_DWORD *)(a1 + 8) = a3;
                                    if ( a2 )
                                    {
LABEL_48:
                                      v35 = *(_QWORD *)a1;
                                      v65 = (char *)qword_180030710 + 312 * (int)v34;
                                      if ( *(_QWORD *)a1 )
                                      {
                                        v36 = *(_DWORD *)(a1 + 12);
                                        if ( *(_DWORD *)(a1 + 8) + 4 <= v36 )
                                        {
                                          *(_DWORD *)(a1 + 8) += 4;
                                          v37 = *(_DWORD *)(a1 + 8);
                                          v38 = *(_DWORD *)(a1 + 16);
                                          v39 = *(_DWORD *)((unsigned int)(v37 - 4) + v35);
                                          if ( v38 )
                                            v39 = _byteswap_ulong(v39);
                                          if ( v37 + 4 <= v36 )
                                          {
                                            *(_DWORD *)(a1 + 8) += 4;
                                            v40 = *(_DWORD *)(a1 + 8);
                                            if ( v38 )
                                              v39 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v40 - 4) + v35));
                                            if ( v40 + 4 <= v36 )
                                            {
                                              *(_DWORD *)(a1 + 8) += 4;
                                              v41 = *(_DWORD *)(a1 + 8);
                                              v42 = *(_DWORD *)((unsigned int)(v41 - 4) + v35);
                                              if ( v38 )
                                                v42 = _byteswap_ulong(v42);
                                              if ( v41 + 4 <= v36 )
                                              {
                                                *(_DWORD *)(a1 + 8) += 4;
                                                v43 = *(_DWORD *)(a1 + 8);
                                                if ( v38 )
                                                  v42 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v43 - 4) + v35));
                                                if ( v43 + 4 <= v36 )
                                                {
                                                  *(_DWORD *)(a1 + 8) += 4;
                                                  v44 = *(_DWORD *)(a1 + 8);
                                                  v45 = *(_DWORD *)((unsigned int)(v44 - 4) + v35);
                                                  if ( v38 )
                                                    v45 = _byteswap_ulong(v45);
                                                  if ( v44 + 4 <= v36 )
                                                  {
                                                    *(_DWORD *)(a1 + 8) += 4;
                                                    v46 = *(_DWORD *)(a1 + 8);
                                                    if ( v38 )
                                                      v45 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v46 - 4) + v35));
                                                    if ( v46 + 4 <= v36 )
                                                    {
                                                      *(_DWORD *)(a1 + 8) += 4;
                                                      v47 = *(_DWORD *)(a1 + 8);
                                                      v48 = *(_DWORD *)((unsigned int)(v47 - 4) + v35);
                                                      if ( v38 )
                                                        v48 = _byteswap_ulong(v48);
                                                      if ( v47 + 4 <= v36 )
                                                      {
                                                        *(_DWORD *)(a1 + 8) += 4;
                                                        v49 = *(_DWORD *)(a1 + 8);
                                                        if ( v38 )
                                                          v48 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v49 - 4) + v35));
                                                        if ( v49 + 4 <= v36 )
                                                        {
                                                          *(_DWORD *)(a1 + 8) += 4;
                                                          v50 = *(_DWORD *)(a1 + 8);
                                                          v51 = *(_DWORD *)((unsigned int)(v50 - 4) + v35);
                                                          if ( v38 )
                                                            v51 = _byteswap_ulong(v51);
                                                          if ( v50 + 4 <= v36 )
                                                          {
                                                            *(_DWORD *)(a1 + 8) += 4;
                                                            v52 = *(_DWORD *)(a1 + 8);
                                                            v53 = *(_DWORD *)((unsigned int)(v52 - 4) + v35);
                                                            if ( v38 )
                                                              v53 = _byteswap_ulong(v53);
                                                            if ( v52 + 4 <= v36 )
                                                            {
                                                              *(_DWORD *)(a1 + 8) += 4;
                                                              if ( *(_DWORD *)(a1 + 8) + 4 <= v36 )
                                                              {
                                                                *(_DWORD *)(a1 + 8) += 4;
                                                                if ( *(_DWORD *)(a1 + 8) + 4 <= v36 )
                                                                {
                                                                  *(_DWORD *)(a1 + 8) += 4;
                                                                  sub_180005050((__int64 *)a1, v39, (__int64)v69);
                                                                  sub_180005050(v54, v42, (__int64)v68);
                                                                  sub_180005050(v55, v45, (__int64)v67);
                                                                  sub_180005050(v56, v48, (__int64)v66);
                                                                  v57 = 7;
                                                                  if ( (unsigned int)(qword_1800306F0 - 911) <= 0x17 )
                                                                  {
                                                                    v58 = 8913025;
                                                                    if ( _bittest(&v58, qword_1800306F0 - 911) )
                                                                      v57 = 5;
                                                                  }
                                                                  v59 = *(_QWORD *)a1;
                                                                  v60 = 0;
                                                                  while ( v59
                                                                       && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                                                                  {
                                                                    *(_DWORD *)(a1 + 8) += 4;
                                                                    ++v60;
                                                                    v61 = *(_DWORD *)(a1 + 8);
                                                                    if ( v60 >= v57 )
                                                                    {
                                                                      v62 = v50 + v53;
                                                                      if ( !v53 )
                                                                        v62 = 0;
                                                                      if ( !(unsigned int)sub_1800196F0(
                                                                                            a1,
                                                                                            (__int64)v65,
                                                                                            v51,
                                                                                            v62) )
                                                                        return 0LL;
                                                                      ++v34;
                                                                      *(_DWORD *)(a1 + 8) = v61;
                                                                      if ( v34 < a2 )
                                                                        goto LABEL_48;
                                                                      v7 = 0;
                                                                      goto LABEL_94;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
LABEL_94:
                                      v63 = *(_QWORD *)a1;
                                      while ( v63 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                                      {
                                        *(_DWORD *)(a1 + 8) += 4;
                                        if ( ++v7 >= 64 )
                                          return 1LL;
                                      }
                                    }
                                    return 0LL;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0LL;
  }
  return result;
}
// 180019159: conditional instruction was optimized away because r13d.4!=0
// 180019324: variable 'v24' is possibly undefined
// 180019333: variable 'v25' is possibly undefined
// 180019342: variable 'v26' is possibly undefined
// 1800195DF: variable 'v54' is possibly undefined
// 1800195EE: variable 'v55' is possibly undefined
// 1800195FA: variable 'v56' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (00000001800196F0) ----------------------------------------------------
__int64 __fastcall sub_1800196F0(__int64 a1, __int64 a2, unsigned int a3, int a4)
{
  unsigned int v6; // esi
  __int64 v7; // r9
  unsigned int v8; // r8d
  int v9; // ebx
  int v10; // r10d
  unsigned __int32 v11; // r11d
  int v12; // ebx
  int v13; // edi
  unsigned __int32 v14; // ebx
  int v15; // edi
  int v16; // edi
  __int64 *v17; // rcx
  int v18; // r9d
  int v19; // eax
  int v20; // r9d
  __int64 v21; // r8
  int v22; // edx
  char v23[272]; // [rsp+20h] [rbp-238h] BYREF
  char v24[272]; // [rsp+130h] [rbp-128h] BYREF

  if ( !a2 )
    return 0LL;
  if ( !a4 || !a3 )
    return 1LL;
  v6 = 0;
  *(_DWORD *)(a1 + 8) = a4;
  while ( 1 )
  {
    v7 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      return 0LL;
    v8 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
    if ( v10 )
      v11 = _byteswap_ulong(v11);
    if ( v9 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v12 = *(_DWORD *)(a1 + 8);
    if ( v10 )
      v11 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v7));
    if ( v12 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v7);
    if ( v10 )
      v14 = _byteswap_ulong(v14);
    if ( v13 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v15 = *(_DWORD *)(a1 + 8);
    if ( v10 )
      v14 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v15 - 4) + v7));
    if ( v15 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    v16 = *(_DWORD *)(a1 + 8);
    if ( v16 + 4 > v8 )
      return 0LL;
    *(_DWORD *)(a1 + 8) += 4;
    sub_180005050((__int64 *)a1, v11, (__int64)v23);
    sub_180005050(v17, v14, (__int64)v24);
    v19 = v16 + v18;
    if ( !v18 )
      v19 = 0;
    v20 = *(_DWORD *)(a1 + 8);
    if ( v19 )
    {
      v21 = *(_QWORD *)a1;
      v22 = 0;
      *(_DWORD *)(a1 + 8) = v19;
      while ( v21 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( ++v22 >= 32 )
          goto LABEL_31;
      }
      return 0LL;
    }
LABEL_31:
    ++v6;
    *(_DWORD *)(a1 + 8) = v20;
    if ( v6 >= a3 )
      return 1LL;
  }
}
// 180019753: variable 'a1' is possibly undefined
// 180019868: variable 'v17' is possibly undefined
// 180019870: variable 'v18' is possibly undefined
// 1800196F0: using guessed type char var_238[272];
// 1800196F0: using guessed type char var_128[272];

//----- (00000001800198F0) ----------------------------------------------------
__int64 __fastcall sub_1800198F0(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v6; // r14d
  __int64 v7; // r9
  unsigned int v8; // r8d
  int v9; // r11d
  int v10; // edx
  unsigned __int32 v11; // r10d
  int v12; // r11d
  int v13; // r11d
  unsigned __int32 v14; // ebp
  int v15; // r11d
  int v16; // r11d
  unsigned __int32 v17; // esi
  int v18; // r11d
  int v19; // r11d
  unsigned __int32 v20; // edi
  int v21; // r11d
  __int64 *v22; // rcx
  __int64 *v23; // rcx
  __int64 *v24; // rcx
  char *v25; // rdx
  char *v26; // r8
  char v27; // al
  char v28[272]; // [rsp+20h] [rbp-478h] BYREF
  char v29[272]; // [rsp+130h] [rbp-368h] BYREF
  char v30[272]; // [rsp+240h] [rbp-258h] BYREF
  char v31[272]; // [rsp+350h] [rbp-148h] BYREF

  if ( !a3 || !a2 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( (_DWORD)qword_1800306F0 != 866 && (_DWORD)qword_1800306F0 != 877
    || (result = sub_1800020D0((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = 0;
    while ( 1 )
    {
      memset(v28, 0, 0x104uLL);
      v7 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        break;
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)(a1 + 16);
      v11 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
      if ( v10 )
        v11 = _byteswap_ulong(v11);
      if ( v9 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v12 = *(_DWORD *)(a1 + 8);
      if ( v10 )
        v11 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v7));
      if ( v12 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v13 = *(_DWORD *)(a1 + 8);
      v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v7);
      if ( v10 )
        v14 = _byteswap_ulong(v14);
      if ( v13 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v15 = *(_DWORD *)(a1 + 8);
      if ( v10 )
        v14 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v15 - 4) + v7));
      if ( v15 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v16 = *(_DWORD *)(a1 + 8);
      v17 = *(_DWORD *)((unsigned int)(v16 - 4) + v7);
      if ( v10 )
        v17 = _byteswap_ulong(v17);
      if ( v16 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v18 = *(_DWORD *)(a1 + 8);
      if ( v10 )
        v17 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v18 - 4) + v7));
      if ( v18 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v19 = *(_DWORD *)(a1 + 8);
      v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v7);
      if ( v10 )
        v20 = _byteswap_ulong(v20);
      if ( v19 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v21 = *(_DWORD *)(a1 + 8);
      if ( v10 )
        v20 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v21 - 4) + v7));
      if ( v21 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( (int)qword_1800306F0 >= 964 )
      {
        if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
      }
      sub_180005050((__int64 *)a1, v11, (__int64)v28);
      sub_180005050(v22, v14, (__int64)v29);
      sub_180005050(v23, v17, (__int64)v30);
      sub_180005050(v24, v20, (__int64)v31);
      if ( qword_180030710 )
      {
        v25 = v28;
        v26 = (char *)qword_180030710 + 312 * v6 + 52;
        do
        {
          v27 = *v25++;
          *v26++ = v27;
        }
        while ( v27 );
      }
      if ( ++v6 >= a2 )
        return 1LL;
    }
    return 0LL;
  }
  return result;
}
// 180019979: conditional instruction was optimized away because r15d.4!=0
// 180019B89: variable 'v22' is possibly undefined
// 180019B98: variable 'v23' is possibly undefined
// 180019BA7: variable 'v24' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 1800198F0: using guessed type char var_368[272];
// 1800198F0: using guessed type char var_258[272];
// 1800198F0: using guessed type char var_148[272];

//----- (0000000180019C40) ----------------------------------------------------
__int64 __fastcall sub_180019C40(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  int v6; // esi
  __int64 v7; // rdx
  unsigned int v8; // r8d
  int v9; // r10d
  int v10; // r9d
  unsigned __int32 v11; // r11d
  int v12; // r10d
  int v13; // r10d
  unsigned __int32 v14; // edi
  int v15; // r10d
  __int64 *v16; // rcx
  char *v17; // rdx
  char *v18; // r8
  char v19; // al
  char v20[272]; // [rsp+20h] [rbp-248h] BYREF
  char v21[272]; // [rsp+130h] [rbp-138h] BYREF

  if ( !a3 || !a2 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  result = sub_1800020D0((__int64)&qword_1800306F0, a2);
  if ( (_DWORD)result )
  {
    v6 = 0;
    while ( 1 )
    {
      memset(v20, 0, 0x104uLL);
      v7 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        break;
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)(a1 + 16);
      v11 = *(_DWORD *)((unsigned int)(v9 - 4) + v7);
      if ( v10 )
        v11 = _byteswap_ulong(v11);
      if ( v9 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v12 = *(_DWORD *)(a1 + 8);
      if ( v10 )
        v11 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v7));
      if ( v12 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v13 = *(_DWORD *)(a1 + 8);
      v14 = *(_DWORD *)((unsigned int)(v13 - 4) + v7);
      if ( v10 )
        v14 = _byteswap_ulong(v14);
      if ( v13 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      v15 = *(_DWORD *)(a1 + 8);
      if ( v10 )
        v14 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v15 - 4) + v7));
      if ( v15 + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v11, (__int64)v20);
      sub_180005050(v16, v14, (__int64)v21);
      if ( qword_180030710 )
      {
        v17 = v20;
        v18 = (char *)qword_180030710 + 312 * v6 + 52;
        do
        {
          v19 = *v17++;
          *v18++ = v19;
        }
        while ( v19 );
      }
      if ( ++v6 >= a2 )
        return 1LL;
    }
    return 0LL;
  }
  return result;
}
// 180019CA0: conditional instruction was optimized away because ebp.4!=0
// 180019EB5: variable 'v16' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180019C40: using guessed type char var_138[272];

//----- (0000000180019F30) ----------------------------------------------------
__int64 __fastcall sub_180019F30(__int64 a1, unsigned int a2, int a3)
{
  __int64 result; // rax
  unsigned int v6; // r13d
  unsigned int v7; // r15d
  int v8; // esi
  __int64 v9; // r11
  unsigned int v10; // r8d
  int v11; // r9d
  int v12; // r10d
  unsigned __int32 v13; // edx
  int v14; // r9d
  __int64 *v15; // rcx
  int v16; // r9d
  __int64 v17; // r8
  char *v18; // rcx
  _BYTE *v19; // rdx
  char v20; // al
  char *v21; // rcx
  _BYTE *v22; // rdx
  char v23; // al
  __int64 v24; // r9
  __int64 v25; // rbp
  unsigned int v26; // edx
  int v27; // r8d
  unsigned __int32 v28; // r10d
  int v29; // r11d
  int v30; // r11d
  unsigned __int32 v31; // esi
  int v32; // r11d
  int v33; // r14d
  unsigned int v34; // edi
  __int64 *v35; // rcx
  __int64 v36; // rcx
  __int64 v37; // r8
  int v38; // r9d
  char v39[272]; // [rsp+20h] [rbp-268h] BYREF
  char v40[272]; // [rsp+130h] [rbp-158h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( !a2 || (result = sub_180001B50((__int64)&qword_1800306F0, a2), (_DWORD)result) )
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = 0;
    v8 = 0;
    if ( a2 )
    {
      while ( 1 )
      {
        memset(v39, 0, 0x104uLL);
        memset(v40, 0, 0x104uLL);
        v9 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v10 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)(a1 + 8);
        v12 = *(_DWORD *)(a1 + 16);
        v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
        if ( v12 )
          v13 = _byteswap_ulong(v13);
        if ( v11 + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v14 = *(_DWORD *)(a1 + 8);
        if ( v12 )
          v13 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v14 - 4) + v9));
        if ( v14 + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        sub_180005050((__int64 *)a1, v13, (__int64)v39);
        sub_180005050(v15, v16, (__int64)v40);
        if ( qword_180030720 )
        {
          v17 = 760LL * v8;
          v18 = v39;
          v19 = (_BYTE *)(v17 + qword_180030720 + 232);
          do
          {
            v20 = *v18++;
            *v19++ = v20;
          }
          while ( v20 );
          v21 = v40;
          v22 = (_BYTE *)(v17 + qword_180030720 + 492);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
          }
          while ( v23 );
        }
        if ( ++v8 >= a2 )
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      *(_DWORD *)(a1 + 8) = v6;
      if ( a2 )
      {
        while ( 1 )
        {
          v24 = *(_QWORD *)a1;
          v25 = qword_180030720 + 760LL * (int)v7;
          if ( !*(_QWORD *)a1 )
            break;
          v26 = *(_DWORD *)(a1 + 12);
          if ( v6 + 4 > v26 )
            break;
          v27 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 8) = v6 + 4;
          v28 = *(_DWORD *)(v6 + v24);
          if ( v27 )
            v28 = _byteswap_ulong(v28);
          if ( v6 + 8 > v26 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v29 = *(_DWORD *)(a1 + 8);
          if ( v27 )
            v28 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v29 - 4) + v24));
          if ( v29 + 4 > v26 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v30 = *(_DWORD *)(a1 + 8);
          v31 = *(_DWORD *)((unsigned int)(v30 - 4) + v24);
          if ( v27 )
            v31 = _byteswap_ulong(v31);
          if ( v30 + 4 > v26 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v32 = *(_DWORD *)(a1 + 8);
          if ( v27 )
            v31 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v32 - 4) + v24));
          if ( v32 + 4 > v26 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v33 = *(_DWORD *)(a1 + 8);
          if ( v33 + 4 > v26 )
            break;
          *(_DWORD *)(a1 + 8) += 4;
          v34 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v24);
          if ( v27 )
            v34 = _byteswap_ulong(v34);
          sub_180005050((__int64 *)a1, v28, (__int64)v40);
          sub_180005050(v35, v31, (__int64)v39);
          v6 = *(_DWORD *)(a1 + 8);
          v38 = v33 + v34;
          if ( !v34 )
            v38 = 0;
          if ( !(unsigned int)sub_18001A2F0(v36, v25, v37, v38) )
            break;
          ++v7;
          *(_DWORD *)(a1 + 8) = v6;
          if ( v7 >= a2 )
            return 1LL;
        }
        return 0LL;
      }
      else
      {
        return 1LL;
      }
    }
  }
  return result;
}
// 18001A0BC: variable 'v15' is possibly undefined
// 18001A0BC: variable 'v16' is possibly undefined
// 18001A264: variable 'v35' is possibly undefined
// 18001A27A: variable 'v36' is possibly undefined
// 18001A27A: variable 'v37' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030720: using guessed type __int64 qword_180030720;

//----- (000000018001A2F0) ----------------------------------------------------
__int64 __fastcall sub_18001A2F0(__int64 a1, __int64 a2, __int64 a3, int a4)
{
  __int64 v6; // r10
  unsigned int v7; // edx
  int v8; // r9d
  unsigned __int16 v9; // r11
  int v10; // edi
  unsigned int v11; // r9d
  unsigned int v12; // eax

  if ( !a2 )
    return 0LL;
  if ( !a4 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  if ( (_DWORD)qword_1800306F0 == 779 )
    return (unsigned int)sub_18001A460(a1, a2) != 0;
  if ( (_DWORD)qword_1800306F0 == 866 || (_DWORD)qword_1800306F0 == 877 )
    return (unsigned int)sub_180012ED0(a1, a2) != 0;
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  if ( a4 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = a4 + 4;
  if ( a4 + 6 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_WORD *)((unsigned int)(v8 - 2) + v6);
  if ( *(_DWORD *)(a1 + 16) )
    v9 = __ROL2__(v9, 8);
  if ( v8 + 2 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v6);
  if ( *(_DWORD *)(a1 + 16) )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  if ( v11 )
    v12 = v11;
  *(_DWORD *)(a1 + 8) = v12;
  return (unsigned int)sub_18001B7D0(a1, a2, a3, v9) != 0;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018001A460) ----------------------------------------------------
__int64 __fastcall sub_18001A460(__int64 a1, __int64 a2)
{
  unsigned int v3; // r12d
  __int64 v4; // r9
  unsigned int v5; // eax
  unsigned int v6; // r8d
  int v7; // r10d
  int v8; // r11d
  int v9; // r10d
  int v10; // r8d
  int v11; // eax
  int v12; // esi
  __int64 v13; // rdi
  __int64 v14; // r9
  unsigned int v15; // ecx
  int v16; // r10d
  int v17; // r11d
  int v18; // r8d
  unsigned int v19; // r15d
  int v20; // r8d
  int v21; // r9d
  int v22; // r13d
  int v23; // ecx
  int v24; // r9d
  __int64 v25; // r11
  char *v26; // r10
  unsigned int v27; // r8d
  int v28; // r9d
  __int64 v29; // r11
  char *v30; // r10
  unsigned int v31; // r8d
  int v32; // r9d
  __int64 v33; // r11
  char *v34; // r10
  unsigned int v35; // r8d
  int v36; // ecx
  unsigned int v37; // esi
  int v38; // r9d
  __int64 v39; // rdx
  unsigned int v40; // r10d
  int v41; // r11d
  int v42; // r9d
  unsigned int v43; // r14d
  __int64 v44; // r10
  __int64 v45; // rdx
  unsigned int v46; // r11d
  int v47; // r9d
  unsigned __int16 v48; // r8
  int v49; // edi
  int v50; // r15d
  unsigned __int16 v51; // r9
  unsigned __int16 v52; // dx
  __int64 v53; // rcx
  unsigned int v54; // eax
  unsigned int v56; // [rsp+30h] [rbp-D0h]
  int v57; // [rsp+34h] [rbp-CCh]
  int v58; // [rsp+38h] [rbp-C8h]
  int v59; // [rsp+3Ch] [rbp-C4h]
  unsigned int v61; // [rsp+48h] [rbp-B8h] BYREF
  __int64 v62; // [rsp+4Ch] [rbp-B4h]
  __int64 v63; // [rsp+58h] [rbp-A8h]
  __int64 v64; // [rsp+60h] [rbp-A0h] BYREF
  char v65[4]; // [rsp+68h] [rbp-98h] BYREF
  char v66; // [rsp+6Ch] [rbp-94h] BYREF
  char v67; // [rsp+70h] [rbp-90h] BYREF
  char v68; // [rsp+74h] [rbp-8Ch] BYREF
  __int128 v69; // [rsp+110h] [rbp+10h] BYREF
  int v70; // [rsp+120h] [rbp+20h]

  v63 = -2LL;
  if ( !a2 )
    return 0LL;
  v3 = 0;
  v56 = 0;
  v4 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v5 = *(_DWORD *)(a1 + 8) + 4;
  v6 = *(_DWORD *)(a1 + 12);
  if ( v5 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v5;
  if ( v5 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v7 = *(_DWORD *)(a1 + 8);
  v57 = *(_DWORD *)((unsigned int)(v7 - 4) + v4);
  v8 = *(_DWORD *)(a1 + 16);
  if ( v8 )
    v57 = (*(_DWORD *)((unsigned int)(v7 - 4) + v4) << 24) | ((*(_DWORD *)((unsigned int)(v7 - 4) + v4) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v7 - 4) + v4) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v7 - 4) + v4));
  if ( v7 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)((unsigned int)(v9 - 4) + v4);
  if ( v8 )
    v10 = (*(_DWORD *)((unsigned int)(v9 - 4) + v4) << 24) | ((*(_DWORD *)((unsigned int)(v9 - 4) + v4) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v9 - 4) + v4) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v9 - 4) + v4));
  v11 = v9 + v10;
  if ( !v10 )
    v11 = 0;
  v58 = v11;
  v62 = 0LL;
  v61 = 0;
  *(_QWORD *)((char *)&v69 + 4) = 0LL;
  LODWORD(v69) = 0;
  if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, &v61)
    || !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)&v69) )
  {
    return 0LL;
  }
  sub_1800010C0(&v64);
  v69 = 0uLL;
  v70 = 0;
  v12 = 0;
  v13 = *(_QWORD *)a1;
  v14 = 0LL;
  while ( v13 )
  {
    v15 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v15 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v16 = *(_DWORD *)(a1 + 8);
    if ( v16 + 4 > v15 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v17 = *(_DWORD *)(a1 + 8);
    v18 = *(_DWORD *)((unsigned int)(v17 - 4) + v13);
    if ( *(_DWORD *)(a1 + 16) )
      v18 = (*(_DWORD *)((unsigned int)(v17 - 4) + v13) << 24) | ((*(_DWORD *)((unsigned int)(v17 - 4) + v13) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v17 - 4) + v13) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v17 - 4) + v13));
    if ( !v14 )
    {
      v12 = 5;
      v56 = v18;
    }
    if ( v18 )
      *((_DWORD *)&v69 + v14) = v18 + v16;
    if ( ++v14 >= 5 )
    {
      HIDWORD(v64) = v12;
      v19 = *(_DWORD *)(a1 + 12);
      if ( v17 + 4 <= v19 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          v20 = *(_DWORD *)(a1 + 8);
          v21 = *(_DWORD *)((unsigned int)(v20 - 4) + v13);
          v22 = *(_DWORD *)(a1 + 16);
          if ( v22 )
            v21 = (*(_DWORD *)((unsigned int)(v20 - 4) + v13) << 24) | ((*(_DWORD *)((unsigned int)(v20 - 4) + v13) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v20 - 4) + v13) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v20 - 4) + v13));
          if ( v20 + 4 <= v19 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                v59 = v21 + 4;
                if ( (_DWORD)v69 )
                  *(_DWORD *)(a1 + 8) = v69;
                v23 = 0;
                if ( v12 <= 0 )
                {
LABEL_40:
                  if ( DWORD1(v69) )
                    *(_DWORD *)(a1 + 8) = DWORD1(v69);
                  v24 = 0;
                  if ( v12 <= 0 )
                  {
LABEL_50:
                    if ( DWORD2(v69) )
                      *(_DWORD *)(a1 + 8) = DWORD2(v69);
                    v28 = 0;
                    if ( v12 <= 0 )
                    {
LABEL_60:
                      if ( HIDWORD(v69) )
                        *(_DWORD *)(a1 + 8) = HIDWORD(v69);
                      v32 = 0;
                      if ( v12 <= 0 )
                      {
LABEL_70:
                        if ( v70 )
                          *(_DWORD *)(a1 + 8) = v70;
                        v36 = 0;
                        if ( v12 <= 0 )
                        {
LABEL_75:
                          if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                            {
                              *(_DWORD *)(a1 + 8) += 4;
                              if ( v58 )
                                *(_DWORD *)(a1 + 8) = v58;
                              if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                              {
                                *(_DWORD *)(a1 + 8) += 4;
                                if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                                {
                                  *(_DWORD *)(a1 + 8) += 4;
                                  if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                                  {
                                    *(_DWORD *)(a1 + 8) += 4;
                                    if ( *(_DWORD *)(a1 + 8) + 4 <= v19 )
                                    {
                                      *(_DWORD *)(a1 + 8) += 4;
                                      v37 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v13);
                                      if ( v22 )
                                        v37 = (v37 << 24) | ((v37 & 0xFF00) << 8) | (v37 >> 8) & 0xFF00 | HIBYTE(v37);
                                      if ( v59 )
                                        *(_DWORD *)(a1 + 8) = v59;
                                      v38 = *(_DWORD *)(a1 + 8);
                                      if ( !v38 || (unsigned int)sub_180005100(a1, a2, v57, v38, v56, (int *)&v64) )
                                      {
                                        v39 = *(_QWORD *)a1;
                                        if ( *(_QWORD *)a1 )
                                        {
                                          v40 = *(_DWORD *)(a1 + 12);
                                          if ( *(_DWORD *)(a1 + 8) + 4 <= v40 )
                                          {
                                            *(_DWORD *)(a1 + 8) += 4;
                                            v41 = *(_DWORD *)(a1 + 8);
                                            v42 = *(_DWORD *)((unsigned int)(v41 - 4) + v39);
                                            if ( *(_DWORD *)(a1 + 16) )
                                              v42 = ((*(_DWORD *)((unsigned int)(v41 - 4) + v39) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v41 - 4) + v39) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v41 - 4) + v39)) | (*(_DWORD *)((unsigned int)(v41 - 4) + v39) << 24);
                                            if ( !v42 )
                                            {
                                              if ( v41 + 4 > v40 )
                                                break;
                                              *(_DWORD *)(a1 + 8) += 4;
                                            }
                                            if ( !v37 || (unsigned int)sub_180001E80(a2, v37) )
                                            {
                                              v43 = 0;
                                              if ( v37 )
                                              {
                                                v44 = 0LL;
                                                while ( 1 )
                                                {
                                                  v45 = *(_QWORD *)a1;
                                                  if ( !*(_QWORD *)a1 )
                                                    break;
                                                  v46 = *(_DWORD *)(a1 + 12);
                                                  if ( *(_DWORD *)(a1 + 8) + 2 > v46 )
                                                    break;
                                                  *(_DWORD *)(a1 + 8) += 2;
                                                  v47 = *(_DWORD *)(a1 + 8);
                                                  v48 = *(_WORD *)((unsigned int)(v47 - 2) + v45);
                                                  v49 = *(_DWORD *)(a1 + 16);
                                                  if ( v49 )
                                                    v48 = (v48 << 8) | HIBYTE(v48);
                                                  if ( v47 + 2 > v46 )
                                                    break;
                                                  *(_DWORD *)(a1 + 8) += 2;
                                                  v50 = *(_DWORD *)(a1 + 8);
                                                  v51 = *(_WORD *)((unsigned int)(v50 - 2) + v45);
                                                  if ( v49 )
                                                    v51 = (v51 << 8) | HIBYTE(v51);
                                                  if ( v50 + 2 > v46 )
                                                    break;
                                                  *(_DWORD *)(a1 + 8) += 2;
                                                  v52 = *(_WORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 2) + v45);
                                                  if ( v49 )
                                                    v52 = (v52 << 8) | HIBYTE(v52);
                                                  v53 = *(_QWORD *)(a2 + 8);
                                                  if ( v53 )
                                                  {
                                                    *(_DWORD *)(v53 + v44 + 4) = v48;
                                                    *(_DWORD *)(*(_QWORD *)(a2 + 8) + v44 + 8) = v51;
                                                    *(_DWORD *)(*(_QWORD *)(a2 + 8) + v44 + 12) = v52;
                                                  }
                                                  ++v43;
                                                  v44 += 20LL;
                                                  if ( v43 >= v37 )
                                                    goto LABEL_113;
                                                }
                                              }
                                              else
                                              {
LABEL_113:
                                                v54 = (*(_DWORD *)(a1 + 8) & 0xFFFFFFFC) + 4;
                                                if ( (*(_DWORD *)(a1 + 8) & 3) == 0 )
                                                  v54 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFC;
                                                *(_DWORD *)(a1 + 8) = v54;
                                                v3 = 1;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                          {
                            *(_DWORD *)(a1 + 8) += 4;
                            if ( ++v36 >= v12 )
                              goto LABEL_75;
                          }
                        }
                      }
                      else
                      {
                        v33 = 0LL;
                        v34 = &v68;
                        while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v35 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v13);
                          if ( v22 )
                            v35 = (v35 << 24) | ((v35 & 0xFF00) << 8) | (v35 >> 8) & 0xFF00 | HIBYTE(v35);
                          if ( v32 < (int)v64 )
                            *(_DWORD *)v34 = v35;
                          ++v32;
                          ++v33;
                          v34 += 16;
                          if ( v33 >= v12 )
                            goto LABEL_70;
                        }
                      }
                    }
                    else
                    {
                      v29 = 0LL;
                      v30 = &v67;
                      while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        v31 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v13);
                        if ( v22 )
                          v31 = (v31 << 24) | ((v31 & 0xFF00) << 8) | (v31 >> 8) & 0xFF00 | HIBYTE(v31);
                        if ( v28 < (int)v64 )
                          *(_DWORD *)v30 = v31;
                        ++v28;
                        ++v29;
                        v30 += 16;
                        if ( v29 >= v12 )
                          goto LABEL_60;
                      }
                    }
                  }
                  else
                  {
                    v25 = 0LL;
                    v26 = &v66;
                    while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      v27 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v13);
                      if ( v22 )
                        v27 = (v27 << 24) | ((v27 & 0xFF00) << 8) | (v27 >> 8) & 0xFF00 | HIBYTE(v27);
                      if ( v24 < (int)v64 )
                        *(_DWORD *)v26 = v27;
                      ++v24;
                      ++v25;
                      v26 += 16;
                      if ( v25 >= v12 )
                        goto LABEL_50;
                    }
                  }
                }
                else
                {
                  while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( ++v23 >= v12 )
                      goto LABEL_40;
                  }
                }
              }
            }
          }
        }
      }
      break;
    }
  }
  `eh vector destructor iterator'(v65, 0x10uLL, 0xAuLL, guard_check_icall_nop);
  return v3;
}
// 18001A69E: conditional instruction was optimized away because rdi.8!=0
// 18001A460: using guessed type char var_F8[4];

//----- (000000018001AC20) ----------------------------------------------------
__int64 __fastcall sub_18001AC20(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v6; // r9
  unsigned int v7; // edx
  int v8; // r8d
  unsigned __int32 v9; // r10d
  int v10; // r11d
  int v11; // r11d
  unsigned __int32 v12; // edi
  int v13; // r11d
  int v14; // r14d
  unsigned int v15; // esi
  __int64 *v16; // rcx
  int v17; // r9d
  unsigned int v18; // edi
  __int64 v19; // r9
  char *v20; // rdx
  char v21; // cl
  char *v22; // rdx
  char v23; // al
  char v24[272]; // [rsp+20h] [rbp-238h] BYREF
  char v25[272]; // [rsp+130h] [rbp-128h] BYREF

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  memset(v24, 0, 0x104uLL);
  memset(v25, 0, 0x104uLL);
  v6 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v7 = *(_DWORD *)(a1 + 12);
  if ( a3 + 4 > v7 )
    return 0LL;
  v8 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = a3 + 4;
  v9 = *(_DWORD *)(a3 + v6);
  if ( v8 )
    v9 = _byteswap_ulong(v9);
  if ( a3 + 8 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  if ( v8 )
    v9 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v10 - 4) + v6));
  if ( v10 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v11 = *(_DWORD *)(a1 + 8);
  v12 = *(_DWORD *)((unsigned int)(v11 - 4) + v6);
  if ( v8 )
    v12 = _byteswap_ulong(v12);
  if ( v11 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v13 = *(_DWORD *)(a1 + 8);
  if ( v8 )
    v12 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v13 - 4) + v6));
  if ( v13 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v14 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)((unsigned int)(v14 - 4) + v6);
  if ( v8 )
    v15 = _byteswap_ulong(v15);
  if ( v14 + 4 > v7 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  sub_180005050((__int64 *)a1, v9, (__int64)v24);
  sub_180005050(v16, v12, (__int64)v25);
  v18 = v14 + v17;
  if ( !v17 )
    v18 = 0;
  v19 = sub_180001A00((__int64)&qword_1800306F0);
  if ( v19 )
  {
    v20 = v24;
    do
    {
      v21 = *v20;
      v20[v19 - (_QWORD)v24] = *v20;
      ++v20;
    }
    while ( v21 );
    v22 = v25;
    do
    {
      v23 = *v22;
      v22[v19 - (_QWORD)v25 + 260] = *v22;
      ++v22;
    }
    while ( v23 );
    *(_DWORD *)(v19 + 1300) = -1;
  }
  dword_180030748 = 0;
  sub_18001AE80(a1, 0, v18, v15);
  return 1LL;
}
// 18001AD90: variable 'v16' is possibly undefined
// 18001AD98: variable 'v17' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030748: using guessed type int dword_180030748;

//----- (000000018001AE80) ----------------------------------------------------
__int64 __fastcall sub_18001AE80(__int64 a1, int a2, unsigned int a3, unsigned int a4)
{
  __int64 v6; // rdx
  unsigned int v7; // r9d
  int v8; // r11d
  int v9; // r8d
  unsigned __int32 v10; // r10d
  int v11; // r11d
  int v12; // r11d
  unsigned __int32 v13; // ebx
  int v14; // r11d
  int v15; // r11d
  unsigned __int32 v16; // esi
  __int64 *v17; // rcx
  __int64 *v18; // rcx
  __int64 *v19; // rcx
  unsigned int v20; // ecx
  __int64 v21; // r8
  unsigned int v22; // edx
  int v23; // r10d
  int v24; // r9d
  int v25; // r10d
  int v26; // r10d
  __int64 v27; // rax
  __int64 v28; // rsi
  __int64 v29; // rax
  char *v30; // rdx
  char v31; // cl
  char *v32; // rcx
  char v33; // al
  char *v34; // rcx
  char v35; // al
  __int128 v36; // xmm0
  int v37; // eax
  int v38; // eax
  __int64 v39; // r8
  int v40; // ebx
  __int64 v41; // r8
  unsigned int v42; // r9d
  unsigned __int32 v43; // [rsp+30h] [rbp-D0h]
  unsigned __int32 v44; // [rsp+34h] [rbp-CCh]
  unsigned __int32 v45; // [rsp+38h] [rbp-C8h]
  int v46; // [rsp+3Ch] [rbp-C4h]
  int v47; // [rsp+40h] [rbp-C0h]
  int v48; // [rsp+44h] [rbp-BCh]
  int v50; // [rsp+4Ch] [rbp-B4h]
  __int64 v52[2]; // [rsp+58h] [rbp-A8h] BYREF
  __int64 v53[2]; // [rsp+68h] [rbp-98h] BYREF
  __int128 v54; // [rsp+78h] [rbp-88h] BYREF
  char v55[272]; // [rsp+90h] [rbp-70h] BYREF
  char v56[272]; // [rsp+1A0h] [rbp+A0h] BYREF
  char v57[272]; // [rsp+2B0h] [rbp+1B0h] BYREF

  if ( a3 <= 0x63 || a3 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  v47 = dword_180030728 - 1;
  v46 = 0;
  if ( !a4 )
    return 1LL;
  while ( 1 )
  {
    memset(v55, 0, 0x104uLL);
    memset(v56, 0, 0x104uLL);
    memset(v57, 0, 0x104uLL);
    v6 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v7 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    v10 = *(_DWORD *)((unsigned int)(v8 - 4) + v6);
    if ( v9 )
      v10 = _byteswap_ulong(v10);
    if ( v8 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v11 = *(_DWORD *)(a1 + 8);
    if ( v9 )
      v10 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v11 - 4) + v6));
    if ( v11 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(_DWORD *)((unsigned int)(v12 - 4) + v6);
    if ( v9 )
      v13 = _byteswap_ulong(v13);
    if ( v12 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v14 = *(_DWORD *)(a1 + 8);
    if ( v9 )
      v13 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v14 - 4) + v6));
    if ( v14 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v15 = *(_DWORD *)(a1 + 8);
    v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v6);
    if ( v9 )
      v16 = _byteswap_ulong(v16);
    if ( v15 + 4 > v7 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( v9 )
      v16 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6));
    sub_180005050((__int64 *)a1, v10, (__int64)v55);
    sub_180005050(v17, v13, (__int64)v56);
    sub_180005050(v18, v16, (__int64)v57);
    memset(v52, 0, 12);
    v54 = 0uLL;
    memset(v53, 0, 12);
    if ( !(unsigned int)sub_18001D5C0(v19, (unsigned int *)v52) )
      break;
    if ( !(unsigned int)sub_18001D710((__int64 *)a1, (unsigned int *)&v54) )
      break;
    if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, (unsigned int *)v53) )
      break;
    if ( !*(_QWORD *)a1 )
      break;
    v20 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v20 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v20 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    ++dword_180030748;
    v21 = *(_QWORD *)a1;
    if ( !*(_QWORD *)a1 )
      break;
    v22 = *(_DWORD *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) + 4 > v22 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v23 = *(_DWORD *)(a1 + 8);
    v24 = *(_DWORD *)(a1 + 16);
    v48 = v23;
    v44 = *(_DWORD *)((unsigned int)(v23 - 4) + v21);
    if ( v24 )
      v44 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v23 - 4) + v21));
    if ( v23 + 4 > v22 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v25 = *(_DWORD *)(a1 + 8);
    v43 = *(_DWORD *)((unsigned int)(v25 - 4) + v21);
    if ( v24 )
      v43 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v25 - 4) + v21));
    if ( v25 + 4 > v22 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v50 = *(_DWORD *)(a1 + 8);
    if ( v50 + 4 > v22 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v26 = *(_DWORD *)(a1 + 8);
    v45 = *(_DWORD *)((unsigned int)(v26 - 4) + v21);
    if ( v24 )
      v45 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v26 - 4) + v21));
    if ( v26 + 4 > v22 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    if ( *(_DWORD *)(a1 + 8) + 4 > v22 )
      break;
    *(_DWORD *)(a1 + 8) += 4;
    v27 = sub_180001A00((__int64)&qword_1800306F0);
    v28 = v27;
    if ( v27 )
    {
      v29 = v27 - (_QWORD)v55;
      v30 = v55;
      do
      {
        v31 = *v30;
        v30[v29] = *v30;
        ++v30;
      }
      while ( v31 );
      v32 = v56;
      do
      {
        v33 = *v32;
        v32[v28 - (_QWORD)v56 + 260] = *v32;
        ++v32;
      }
      while ( v33 );
      v34 = v57;
      do
      {
        v35 = *v34;
        v34[v28 - (_QWORD)v57 + 520] = *v34;
        ++v34;
      }
      while ( v35 );
      *(_QWORD *)(v28 + 1312) = v52[0];
      v36 = v54;
      *(_DWORD *)(v28 + 1300) = v47;
      v37 = v52[1];
      *(_OWORD *)(v28 + 1336) = v36;
      *(_DWORD *)(v28 + 1320) = v37;
      v38 = v53[1];
      *(_QWORD *)(v28 + 1324) = v53[0];
      *(_DWORD *)(v28 + 1332) = v38;
    }
    v39 = v43 + v48;
    v40 = *(_DWORD *)(a1 + 8);
    if ( !v43 )
      v39 = 0LL;
    sub_18001AE80(a1, (unsigned int)(a2 + 1), v39, v44);
    v42 = v45 + v50;
    if ( !v45 )
      v42 = 0;
    sub_18001B340(a1, v28, v41, v42);
    *(_DWORD *)(a1 + 8) = v40;
    if ( ++v46 >= a4 )
      return 1LL;
  }
  return 0LL;
}
// 18001B043: variable 'v17' is possibly undefined
// 18001B051: variable 'v18' is possibly undefined
// 18001B08E: variable 'v19' is possibly undefined
// 18001B2E8: variable 'v41' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 180030728: using guessed type int dword_180030728;
// 180030748: using guessed type int dword_180030748;
// 18001AE80: using guessed type __int128 var_368;

//----- (000000018001B340) ----------------------------------------------------
__int64 __fastcall sub_18001B340(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v6; // r9
  unsigned int v7; // r10d
  __int64 v8; // r8
  int v9; // r11d
  unsigned __int32 v10; // edx
  unsigned int v11; // eax
  unsigned int v12; // r9d
  int v13; // ebx

  if ( a4 < 0x64 || a4 >= *(_DWORD *)(a1 + 12) )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  ++dword_180030748;
  v6 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    v7 = *(_DWORD *)(a1 + 12);
    v8 = (unsigned int)(*(_DWORD *)(a1 + 8) + 4);
    if ( (unsigned int)v8 <= v7 )
    {
      v9 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v8;
      v10 = *(_DWORD *)((unsigned int)(v8 - 4) + v6);
      if ( v9 )
        v10 = _byteswap_ulong(v10);
      if ( (int)v8 + 4 <= v7 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v11 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v6);
        if ( v9 )
          v11 = _byteswap_ulong(v11);
        *(_DWORD *)(a2 + 1304) = v10;
        v12 = v8 + v11;
        v13 = *(_DWORD *)(a1 + 8);
        if ( !v11 )
          v12 = 0;
        sub_18001B420(a1, a2, v8, v12, v10);
        *(_DWORD *)(a1 + 8) = v13;
        return 1LL;
      }
    }
  }
  return 0LL;
}
// 180030748: using guessed type int dword_180030748;

//----- (000000018001B420) ----------------------------------------------------
__int64 __fastcall sub_18001B420(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5)
{
  unsigned int v9; // esi
  __int64 v10; // r8
  unsigned int v11; // ebx
  int v12; // edx
  unsigned __int32 v13; // r10d
  int v14; // r9d
  int v15; // r11d
  unsigned __int32 v16; // ebx
  __int64 *v17; // rcx
  int v18; // r9d
  __int64 *v19; // rcx
  __int64 v20; // r9
  unsigned int v21; // ecx
  int v22; // r10d
  __int64 v23; // r8
  char *v24; // rcx
  char v25; // al
  int v26; // ebx
  unsigned int v27; // r9d
  char v28[272]; // [rsp+30h] [rbp-248h] BYREF
  char v29[272]; // [rsp+140h] [rbp-138h] BYREF

  if ( !a4 )
    return 1LL;
  if ( a4 < 0x64 )
    return 1LL;
  v9 = *(_DWORD *)(a1 + 12);
  if ( a4 >= v9 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  if ( a5 != 3 )
    return 1LL;
  memset(v28, 0, 0x104uLL);
  v10 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    v11 = a4 + 4;
    if ( v11 <= v9 )
    {
      v12 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v11;
      v13 = *(_DWORD *)(v11 - 4 + v10);
      if ( v12 )
        v13 = _byteswap_ulong(v13);
      if ( v11 + 4 <= v9 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v14 = *(_DWORD *)(a1 + 8);
        if ( v12 )
          v13 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v14 - 4) + v10));
        if ( v14 + 4 <= v9 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            if ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
            {
              *(_DWORD *)(a1 + 8) += 4;
              v15 = *(_DWORD *)(a1 + 8);
              v16 = *(_DWORD *)((unsigned int)(v15 - 4) + v10);
              if ( v12 )
                v16 = _byteswap_ulong(v16);
              if ( v15 + 4 <= v9 )
              {
                *(_DWORD *)(a1 + 8) += 4;
                if ( v12 )
                  v16 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v10));
                sub_180005050((__int64 *)a1, v13, (__int64)v29);
                sub_180005050(v17, v18, (__int64)v28);
                sub_180005050(v19, v16, (__int64)v29);
                v20 = *(_QWORD *)a1;
                if ( *(_QWORD *)a1 )
                {
                  v21 = *(_DWORD *)(a1 + 12);
                  if ( *(_DWORD *)(a1 + 8) + 4 <= v21 )
                  {
                    *(_DWORD *)(a1 + 8) += 4;
                    v22 = *(_DWORD *)(a1 + 8);
                    if ( v22 + 4 <= v21 )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      v23 = *(unsigned int *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v20);
                      if ( *(_DWORD *)(a1 + 16) )
                        v23 = _byteswap_ulong(v23);
                      v24 = v28;
                      do
                      {
                        v25 = *v24;
                        v24[a2 - (_QWORD)v28 + 780] = *v24;
                        ++v24;
                      }
                      while ( v25 );
                      v26 = *(_DWORD *)(a1 + 8);
                      v27 = v22 + v23;
                      if ( !(_DWORD)v23 )
                        v27 = 0;
                      sub_18001B660(a1, a2, v23, v27);
                      *(_DWORD *)(a1 + 8) = v26;
                      return 1LL;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0LL;
}
// 18001B58C: variable 'v17' is possibly undefined
// 18001B58C: variable 'v18' is possibly undefined
// 18001B59B: variable 'v19' is possibly undefined

//----- (000000018001B660) ----------------------------------------------------
__int64 __fastcall sub_18001B660(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  unsigned int v8; // esi
  __int64 v9; // r10
  unsigned int v10; // edi
  int v11; // r8d
  unsigned __int32 v12; // edx
  int v13; // r9d
  __int64 *v14; // rcx
  int v15; // r9d
  __int64 v16; // rbp
  char *v17; // rcx
  char v18; // al
  char v19[272]; // [rsp+20h] [rbp-248h] BYREF
  char v20[272]; // [rsp+130h] [rbp-138h] BYREF

  if ( !a4 )
    return 1LL;
  if ( a4 < 0x64 )
    return 1LL;
  v8 = *(_DWORD *)(a1 + 12);
  if ( a4 >= v8 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  memset(v19, 0, 0x104uLL);
  v9 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 )
  {
    v10 = a4 + 4;
    if ( v10 <= v8 )
    {
      v11 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v10;
      v12 = *(_DWORD *)(v10 - 4 + v9);
      if ( v11 )
        v12 = _byteswap_ulong(v12);
      if ( v10 + 4 <= v8 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        v13 = *(_DWORD *)(a1 + 8);
        if ( v11 )
          v12 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v13 - 4) + v9));
        if ( v13 + 4 <= v8 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v8 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            sub_180005050((__int64 *)a1, v12, (__int64)v20);
            sub_180005050(v14, v15, (__int64)v19);
            v16 = a2 - (_QWORD)v19;
            v17 = v19;
            do
            {
              v18 = *v17;
              v17[v16 + 1040] = *v17;
              ++v17;
            }
            while ( v18 );
            return 1LL;
          }
        }
      }
    }
  }
  return 0LL;
}
// 18001B777: variable 'v14' is possibly undefined
// 18001B777: variable 'v15' is possibly undefined
// 18001B660: using guessed type char var_138[272];

//----- (000000018001B7D0) ----------------------------------------------------
__int64 __fastcall sub_18001B7D0(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  __int64 v5; // r12
  __int64 v7; // r11
  __int64 v8; // rax
  unsigned int v9; // r8d
  int v10; // r9d
  int v11; // esi
  unsigned int v12; // r13d
  int v13; // ecx
  int v14; // r9d
  int v15; // r10d
  __int64 v16; // rdi
  __int64 i; // r11
  unsigned int v18; // r8d
  int v19; // esi
  int v20; // r9d
  int v21; // r14d
  int v22; // r15d
  int v23; // r8d
  unsigned int v24; // r9d
  int v25; // eax
  int v26; // r8d
  int v27; // r11d
  int v28; // esi
  unsigned int v29; // r8d
  int j; // ecx
  int v31; // r8d
  int v32; // r14d
  unsigned int v33; // esi
  int v34; // esi
  unsigned int v35; // r10d
  int v36; // r15d
  int v37; // r11d
  __int64 v38; // rdi
  __int64 v39; // r9
  unsigned int v40; // r8d
  int v41; // r9d
  __int64 v42; // rdi
  char *v43; // r11
  unsigned int v44; // r8d
  int v45; // r9d
  __int64 v46; // rdi
  char *v47; // r11
  unsigned int v48; // r8d
  int v49; // r9d
  __int64 v50; // rdi
  char *v51; // r11
  unsigned int v52; // r8d
  int v53; // ecx
  __int64 v54; // rdx
  int v55; // r15d
  __int64 v56; // rdx
  unsigned int v57; // r8d
  int v58; // esi
  int v59; // r10d
  int v60; // r9d
  int v61; // r11d
  int v62; // edi
  int v63; // r12d
  int v64; // eax
  int v65; // r10d
  int v66; // r9d
  int v67; // r9d
  unsigned int v68; // r15d
  int v69; // r13d
  int v70; // r9d
  int v71; // edi
  int v72; // r9d
  int v73; // esi
  int v74; // r14d
  int v75; // r9d
  __int64 v76; // r8
  __int64 v77; // rcx
  __int64 v78; // r9
  unsigned int v79; // r8d
  int v80; // r10d
  int v81; // edi
  int v82; // esi
  int v83; // r10d
  int v84; // r11d
  int v85; // r14d
  int v86; // r10d
  int v87; // r14d
  unsigned int v88; // r9d
  int v89; // ecx
  __int64 v90; // r9
  int v91; // edx
  int v92; // eax
  int v93; // ecx
  unsigned int v94; // r15d
  int v95; // r10d
  int v96; // r11d
  unsigned int v97; // r8d
  unsigned int v98; // eax
  unsigned int v99; // r9d
  int v100; // ecx
  __int64 v101; // r9
  char *v102; // r8
  unsigned int v103; // edx
  unsigned int v104; // edx
  unsigned int v105; // edx
  unsigned int v106; // edx
  int v107; // ecx
  __int64 v108; // rdx
  __int64 v109; // rsi
  int *v110; // rdi
  int v111; // eax
  size_t Size; // [rsp+30h] [rbp-D0h]
  int v114; // [rsp+40h] [rbp-C0h]
  int v115; // [rsp+44h] [rbp-BCh]
  int v116; // [rsp+48h] [rbp-B8h]
  unsigned int v117; // [rsp+4Ch] [rbp-B4h]
  unsigned int v118; // [rsp+50h] [rbp-B0h]
  int v119; // [rsp+54h] [rbp-ACh]
  int v120; // [rsp+58h] [rbp-A8h]
  unsigned int v121[4]; // [rsp+60h] [rbp-A0h] BYREF
  int v122; // [rsp+70h] [rbp-90h]
  unsigned int v123; // [rsp+78h] [rbp-88h] BYREF
  __int64 v124; // [rsp+7Ch] [rbp-84h]
  __int64 v125; // [rsp+88h] [rbp-78h]
  __int64 v126; // [rsp+90h] [rbp-70h]
  __int64 v127; // [rsp+A0h] [rbp-60h] BYREF
  int v128; // [rsp+A8h] [rbp-58h] BYREF
  char v129; // [rsp+ACh] [rbp-54h] BYREF
  char v130; // [rsp+B0h] [rbp-50h] BYREF
  char v131; // [rsp+B4h] [rbp-4Ch] BYREF
  __int64 v132; // [rsp+150h] [rbp+50h]
  __int64 v133; // [rsp+158h] [rbp+58h]
  int v134; // [rsp+160h] [rbp+60h]
  int v135; // [rsp+170h] [rbp+70h] BYREF
  int v136; // [rsp+174h] [rbp+74h]
  int v137; // [rsp+178h] [rbp+78h]
  int v138[2]; // [rsp+17Ch] [rbp+7Ch]
  char v139; // [rsp+184h] [rbp+84h] BYREF

  v126 = -2LL;
  v5 = a2;
  v125 = a2;
  if ( a2 )
  {
    v7 = *(_QWORD *)a1;
    if ( *(_QWORD *)a1 )
    {
      v8 = *(unsigned int *)(a1 + 8);
      v9 = *(_DWORD *)(a1 + 12);
      if ( (int)v8 + 4 <= v9 )
      {
        v10 = *(_DWORD *)(v8 + v7);
        v11 = *(_DWORD *)(a1 + 16);
        if ( v11 )
          v10 = (*(_DWORD *)(v8 + v7) << 24) | ((*(_DWORD *)(v8 + v7) & 0xFF00) << 8) | (*(_DWORD *)(v8 + v7) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v8 + v7));
        if ( !v10 )
          *(_DWORD *)(a1 + 8) = v8 + 4;
        v12 = 0;
        v13 = 0;
        if ( a4 )
        {
          while ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
              break;
            *(_DWORD *)(a1 + 8) += 4;
            if ( ++v13 >= a4 )
              goto LABEL_12;
          }
          return 0LL;
        }
LABEL_12:
        if ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
        {
          *(_DWORD *)(a1 + 8) += 4;
          if ( *(_DWORD *)(a1 + 8) + 4 <= v9 )
          {
            *(_DWORD *)(a1 + 8) += 4;
            v14 = *(_DWORD *)(a1 + 8);
            v116 = *(_DWORD *)((unsigned int)(v14 - 4) + v7);
            if ( v11 )
              v116 = (*(_DWORD *)((unsigned int)(v14 - 4) + v7) << 24) | ((*(_DWORD *)((unsigned int)(v14 - 4) + v7) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v14 - 4) + v7) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v14 - 4) + v7));
            if ( (_DWORD)qword_1800306F0 != 985 && (_DWORD)qword_1800306F0 != 990 )
              goto LABEL_20;
            if ( v14 + 4 <= v9 )
            {
              *(_DWORD *)(a1 + 8) += 4;
LABEL_20:
              sub_1800010C0(&v127);
              v132 = 0LL;
              v133 = 0LL;
              v134 = 0;
              v15 = 0;
              v16 = *(_QWORD *)a1;
              for ( i = 0LL; i < 5; ++i )
              {
                if ( !v16 )
                  goto LABEL_264;
                v18 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
                  goto LABEL_264;
                *(_DWORD *)(a1 + 8) += 4;
                v19 = *(_DWORD *)(a1 + 8);
                v20 = *(_DWORD *)((unsigned int)(v19 - 4) + v16);
                v21 = *(_DWORD *)(a1 + 16);
                if ( v21 )
                  v20 = (*(_DWORD *)((unsigned int)(v19 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v19 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v19 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v19 - 4) + v16));
                if ( v19 + 4 > v18 )
                  goto LABEL_264;
                *(_DWORD *)(a1 + 8) += 4;
                v22 = *(_DWORD *)(a1 + 8);
                v23 = *(_DWORD *)((unsigned int)(v22 - 4) + v16);
                if ( v21 )
                  v23 = (*(_DWORD *)((unsigned int)(v22 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v22 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v22 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v22 - 4) + v16));
                if ( !i )
                  v15 = v20;
                if ( v23 )
                  *((_DWORD *)&v132 + i) = v23 + v19;
              }
              HIDWORD(v127) = v15;
              v24 = *(_DWORD *)(a1 + 12);
              if ( v22 + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              v25 = *(_DWORD *)(a1 + 8);
              if ( (_DWORD)qword_1800306F0 == 985 || (_DWORD)qword_1800306F0 == 990 )
              {
                if ( v25 + 4 > v24 )
                {
LABEL_264:
                  `eh vector destructor iterator'(&v128, 0x10uLL, 0xAuLL, guard_check_icall_nop);
                  return v12;
                }
                *(_DWORD *)(a1 + 8) += 4;
                v25 = *(_DWORD *)(a1 + 8);
              }
              if ( v25 + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              v26 = *(_DWORD *)(a1 + 8);
              v114 = *(_DWORD *)((unsigned int)(v26 - 4) + v16);
              v27 = *(_DWORD *)(a1 + 16);
              if ( v27 )
                v114 = (*(_DWORD *)((unsigned int)(v26 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v26 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v26 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v26 - 4) + v16));
              if ( v26 + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              v28 = *(_DWORD *)(a1 + 8);
              v119 = *(_DWORD *)((unsigned int)(v28 - 4) + v16);
              if ( v27 )
                v119 = (*(_DWORD *)((unsigned int)(v28 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v28 - 4) + v16)) | (*(_DWORD *)((unsigned int)(v28 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v28 - 4) + v16) & 0xFF00) << 8);
              if ( v28 + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              v120 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v16);
              if ( v27 )
              {
                v29 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v16);
                v120 = (v29 << 24) | ((v29 & 0xFF00) << 8) | (v29 >> 8) & 0xFF00 | HIBYTE(v29);
              }
              for ( j = 0; j < 4; ++j )
              {
                if ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) > *(_DWORD *)(a1 + 12) )
                  goto LABEL_264;
                *(_DWORD *)(a1 + 8) += 4;
              }
              if ( *(_DWORD *)(a1 + 8) + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              v31 = *(_DWORD *)(a1 + 8);
              v32 = *(_DWORD *)((unsigned int)(v31 - 4) + v16);
              v118 = v32;
              if ( v27 )
              {
                v32 = (*(_DWORD *)((unsigned int)(v31 - 4) + v16) << 24) | ((*(_DWORD *)((unsigned int)(v31 - 4) + v16) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v31 - 4) + v16) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v31 - 4) + v16));
                v118 = v32;
              }
              if ( v31 + 4 > v24 )
                goto LABEL_264;
              *(_DWORD *)(a1 + 8) += 4;
              v33 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v16);
              if ( v27 )
                v33 = (v33 << 24) | ((v33 & 0xFF00) << 8) | (v33 >> 8) & 0xFF00 | HIBYTE(v33);
              v34 = v31 + v33;
              *(_QWORD *)&v121[1] = 0LL;
              v121[0] = 0;
              v124 = 0LL;
              v123 = 0;
              if ( !(unsigned int)sub_18001D5C0((__int64 *)a1, v121)
                || !(unsigned int)sub_18001D5C0((__int64 *)a1, &v123) )
              {
                goto LABEL_264;
              }
              if ( (_DWORD)v132 )
                *(_DWORD *)(a1 + 8) = v132;
              v36 = 0;
              v115 = 0;
              v37 = 0;
              if ( v35 )
              {
                v38 = *(_QWORD *)a1;
                v39 = 0LL;
                while ( v38 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  v40 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v38);
                  if ( *(_DWORD *)(a1 + 16) )
                    v40 = (v40 << 24) | ((v40 & 0xFF00) << 8) | (v40 >> 8) & 0xFF00 | HIBYTE(v40);
                  if ( !v39 )
                    v36 = v40;
                  v115 = v36;
                  if ( v37 < (int)v127 )
                    *(&v128 + 4 * v39) = v40;
                  ++v37;
                  ++v39;
                  if ( v37 >= v35 )
                    goto LABEL_73;
                }
                goto LABEL_264;
              }
LABEL_73:
              if ( HIDWORD(v132) )
                *(_DWORD *)(a1 + 8) = HIDWORD(v132);
              v41 = 0;
              if ( v35 )
              {
                v42 = *(_QWORD *)a1;
                v43 = &v129;
                while ( v42 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  v44 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v42);
                  if ( *(_DWORD *)(a1 + 16) )
                    v44 = (v44 << 24) | ((v44 & 0xFF00) << 8) | (v44 >> 8) & 0xFF00 | HIBYTE(v44);
                  if ( v41 < (int)v127 )
                    *(_DWORD *)v43 = v44;
                  ++v41;
                  v43 += 16;
                  if ( v41 >= v35 )
                    goto LABEL_84;
                }
                goto LABEL_264;
              }
LABEL_84:
              if ( (_DWORD)v133 )
                *(_DWORD *)(a1 + 8) = v133;
              v45 = 0;
              if ( v35 )
              {
                v46 = *(_QWORD *)a1;
                v47 = &v130;
                while ( v46 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  v48 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v46);
                  if ( *(_DWORD *)(a1 + 16) )
                    v48 = (v48 << 24) | ((v48 & 0xFF00) << 8) | (v48 >> 8) & 0xFF00 | HIBYTE(v48);
                  if ( v45 < (int)v127 )
                    *(_DWORD *)v47 = v48;
                  ++v45;
                  v47 += 16;
                  if ( v45 >= v35 )
                    goto LABEL_95;
                }
                goto LABEL_264;
              }
LABEL_95:
              if ( HIDWORD(v133) )
                *(_DWORD *)(a1 + 8) = HIDWORD(v133);
              v49 = 0;
              if ( v35 )
              {
                v50 = *(_QWORD *)a1;
                v51 = &v131;
                while ( v50 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  v52 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v50);
                  if ( *(_DWORD *)(a1 + 16) )
                    v52 = (v52 << 24) | ((v52 & 0xFF00) << 8) | (v52 >> 8) & 0xFF00 | HIBYTE(v52);
                  if ( v49 < (int)v127 )
                    *(_DWORD *)v51 = v52;
                  ++v49;
                  v51 += 16;
                  if ( v49 >= v35 )
                    goto LABEL_106;
                }
                goto LABEL_264;
              }
LABEL_106:
              if ( v134 )
                *(_DWORD *)(a1 + 8) = v134;
              v53 = 0;
              if ( v35 )
              {
                v54 = *(_QWORD *)a1;
                while ( v54 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                {
                  *(_DWORD *)(a1 + 8) += 4;
                  if ( ++v53 >= v35 )
                    goto LABEL_113;
                }
                goto LABEL_264;
              }
LABEL_113:
              if ( v34 )
                *(_DWORD *)(a1 + 8) = v34;
              `eh vector constructor iterator'(
                &v135,
                0x14uLL,
                0x32uLL,
                (void (__stdcall *)(void *))sub_1800156A0,
                guard_check_icall_nop);
              v55 = 0;
              if ( (_DWORD)qword_1800306F0 == 911 || (_DWORD)qword_1800306F0 == 918 )
              {
                v78 = *(_QWORD *)a1;
                if ( !*(_QWORD *)a1 )
                  goto LABEL_263;
                v79 = *(_DWORD *)(a1 + 12);
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                v80 = *(_DWORD *)(a1 + 8);
                v81 = *(_DWORD *)((unsigned int)(v80 - 4) + v78);
                v82 = *(_DWORD *)(a1 + 16);
                if ( v82 )
                  v81 = (*(_DWORD *)((unsigned int)(v80 - 4) + v78) << 24) | ((*(_DWORD *)((unsigned int)(v80 - 4) + v78) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v80 - 4) + v78) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v80 - 4) + v78));
                if ( v80 + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                v83 = *(_DWORD *)(a1 + 8);
                v84 = *(_DWORD *)((unsigned int)(v83 - 4) + v78);
                if ( v82 )
                  v84 = (*(_DWORD *)((unsigned int)(v83 - 4) + v78) << 24) | ((*(_DWORD *)((unsigned int)(v83 - 4) + v78) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v83 - 4) + v78) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v83 - 4) + v78));
                if ( v83 + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                if ( *(_DWORD *)(a1 + 8) + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                v85 = *(_DWORD *)(a1 + 8);
                v86 = *(_DWORD *)((unsigned int)(v85 - 4) + v78);
                if ( v82 )
                  v86 = (*(_DWORD *)((unsigned int)(v85 - 4) + v78) << 24) | ((*(_DWORD *)((unsigned int)(v85 - 4) + v78) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v85 - 4) + v78) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v85 - 4) + v78));
                if ( v85 + 4 > v79 )
                  goto LABEL_263;
                *(_DWORD *)(a1 + 8) += 4;
                v87 = *(_DWORD *)(a1 + 8);
                v88 = *(_DWORD *)((unsigned int)(v87 - 4) + v78);
                if ( v82 )
                  v88 = (v88 << 24) | ((v88 & 0xFF00) << 8) | (v88 >> 8) & 0xFF00 | HIBYTE(v88);
                if ( v87 + 4 > v79
                  || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v79)
                  || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v79)
                  || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v79)
                  || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v79)
                  || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v79) )
                {
LABEL_263:
                  `eh vector destructor iterator'(&v135, 0x14uLL, 0x32uLL, guard_check_icall_nop);
                  goto LABEL_264;
                }
                *(_DWORD *)(a1 + 8) += 4;
                v135 = v81;
                v136 = v84;
                v137 = v86;
                v138[0] = v88;
              }
              else
              {
                v117 = 0;
                if ( v32 )
                {
                  v56 = *(_QWORD *)a1;
                  *(_QWORD *)v121 = 0LL;
                  while ( v56 )
                  {
                    v57 = *(_DWORD *)(a1 + 12);
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    v58 = *(_DWORD *)(a1 + 8);
                    if ( v58 + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    v59 = *(_DWORD *)(a1 + 8);
                    v60 = *(_DWORD *)((unsigned int)(v59 - 4) + v56);
                    v61 = *(_DWORD *)(a1 + 16);
                    if ( v61 )
                    {
                      v60 = (*(_DWORD *)((unsigned int)(v59 - 4) + v56) << 24) | ((*(_DWORD *)((unsigned int)(v59 - 4)
                                                                                             + v56) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v59 - 4) + v56) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v59 - 4) + v56));
                      v56 = *(_QWORD *)a1;
                    }
                    if ( v59 + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    v62 = *(_DWORD *)(a1 + 8);
                    v63 = *(_DWORD *)((unsigned int)(v62 - 4) + v56);
                    if ( v61 )
                    {
                      v63 = (*(_DWORD *)((unsigned int)(v62 - 4) + v56) << 24) | ((*(_DWORD *)((unsigned int)(v62 - 4)
                                                                                             + v56) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v62 - 4) + v56) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v62 - 4) + v56));
                      v56 = *(_QWORD *)a1;
                    }
                    v64 = v58 + v60;
                    if ( !v60 )
                      v64 = 0;
                    v122 = v64;
                    v65 = 0;
                    if ( v62 + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    v66 = *(_DWORD *)(a1 + 8);
                    if ( (_DWORD)qword_1800306F0 == 985 || (_DWORD)qword_1800306F0 == 990 )
                    {
                      if ( v66 + 4 > v57 )
                        goto LABEL_263;
                      *(_DWORD *)(a1 + 8) += 4;
                      v66 = *(_DWORD *)(a1 + 8);
                      v65 = *(_DWORD *)((unsigned int)(v66 - 4) + v56);
                      if ( v61 )
                        v65 = (*(_DWORD *)((unsigned int)(v66 - 4) + v56) << 24) | ((*(_DWORD *)((unsigned int)(v66 - 4)
                                                                                               + v56) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v66 - 4) + v56) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v66 - 4) + v56));
                    }
                    if ( v66 + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    v67 = *(_DWORD *)(a1 + 8);
                    v56 = *(_QWORD *)a1;
                    v68 = *(_DWORD *)((unsigned int)(v67 - 4) + *(_QWORD *)a1);
                    if ( v61 )
                    {
                      v68 = (v68 << 24) | ((v68 & 0xFF00) << 8) | (v68 >> 8) & 0xFF00 | HIBYTE(v68);
                      v56 = *(_QWORD *)a1;
                    }
                    if ( v67 + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      break;
                    *(_DWORD *)(a1 + 8) += 4;
                    v69 = *(_DWORD *)(a1 + 8);
                    if ( (_DWORD)qword_1800306F0 == 985 || (_DWORD)qword_1800306F0 == 990 )
                    {
                      if ( v69 + 4 > v57 )
                        goto LABEL_262;
                      *(_DWORD *)(a1 + 8) += 4;
                      v69 = *(_DWORD *)(a1 + 8);
                    }
                    if ( v69 + 4 > v57 )
                      goto LABEL_262;
                    *(_DWORD *)(a1 + 8) += 4;
                    v70 = *(_DWORD *)(a1 + 8);
                    v71 = *(_DWORD *)((unsigned int)(v70 - 4) + v56);
                    if ( v61 )
                    {
                      v71 = (*(_DWORD *)((unsigned int)(v70 - 4) + v56) << 24) | ((*(_DWORD *)((unsigned int)(v70 - 4)
                                                                                             + v56) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v70 - 4) + v56) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v70 - 4) + v56));
                      v56 = *(_QWORD *)a1;
                    }
                    if ( v70 + 4 > v57 )
                      goto LABEL_262;
                    *(_DWORD *)(a1 + 8) += 4;
                    if ( *(_DWORD *)(a1 + 8) + 4 > v57 )
                      goto LABEL_262;
                    *(_DWORD *)(a1 + 8) += 4;
                    v72 = *(_DWORD *)(a1 + 8);
                    v73 = *(_DWORD *)((unsigned int)(v72 - 4) + v56);
                    if ( v61 )
                    {
                      v73 = (*(_DWORD *)((unsigned int)(v72 - 4) + v56) << 24) | ((*(_DWORD *)((unsigned int)(v72 - 4)
                                                                                             + v56) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v72 - 4) + v56) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v72 - 4) + v56));
                      v56 = *(_QWORD *)a1;
                    }
                    if ( v72 + 4 > v57 )
                      goto LABEL_262;
                    *(_DWORD *)(a1 + 8) += 4;
                    v74 = *(_DWORD *)(a1 + 8);
                    v75 = *(_DWORD *)((unsigned int)(v74 - 4) + v56);
                    if ( v61 )
                    {
                      v75 = (*(_DWORD *)((unsigned int)(v74 - 4) + v56) << 24) | ((*(_DWORD *)((unsigned int)(v74 - 4)
                                                                                             + v56) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v74 - 4) + v56) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v74 - 4) + v56));
                      v56 = *(_QWORD *)a1;
                    }
                    if ( v74 + 4 > v57
                      || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v57)
                      || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v57)
                      || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v57)
                      || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v57)
                      || (*(_DWORD *)(a1 + 8) += 4, *(_DWORD *)(a1 + 8) + 4 > v57) )
                    {
LABEL_262:
                      v12 = 0;
                      goto LABEL_263;
                    }
                    *(_DWORD *)(a1 + 8) += 4;
                    v76 = *(_QWORD *)v121;
                    if ( *(__int64 *)v121 < 50 )
                    {
                      v77 = 5LL * *(_QWORD *)v121;
                      *(&v135 + v77) = v68;
                      *(&v136 + v77) = v71;
                      v138[v77 - 1] = v73;
                      v138[v77] = v75;
                      v138[v77 + 1] = v63;
                      if ( (_DWORD)qword_1800306F0 == 985 || (_DWORD)qword_1800306F0 == 990 )
                      {
                        if ( v65 )
                          *(&v136 + 5 * v76) = v65 + v71 + v69;
                      }
                    }
                    ++v117;
                    *(_QWORD *)v121 = v76 + 1;
                    v12 = 0;
                    if ( v117 >= v118 )
                    {
                      v55 = v122;
                      v5 = v125;
                      goto LABEL_209;
                    }
                  }
                  goto LABEL_263;
                }
              }
LABEL_209:
              v89 = 0;
              v90 = *(_QWORD *)a1;
              while ( v90 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
              {
                *(_DWORD *)(a1 + 8) += 4;
                if ( ++v89 >= 6 )
                {
                  v91 = 8;
                  v92 = qword_1800306F0;
                  if ( (_DWORD)qword_1800306F0 == 985 || (_DWORD)qword_1800306F0 == 990 )
                    v91 = 0;
                  v93 = 0;
                  if ( v91 )
                  {
                    while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                    {
                      *(_DWORD *)(a1 + 8) += 4;
                      if ( ++v93 >= v91 )
                      {
                        v92 = qword_1800306F0;
                        goto LABEL_220;
                      }
                    }
                  }
                  else
                  {
LABEL_220:
                    if ( (v92 == 985 || v92 == 990) && !v119 )
                    {
                      v94 = v55 + 16;
                      *(_DWORD *)(a1 + 8) = v94;
                      v95 = 0;
                      while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
                      {
                        *(_DWORD *)(a1 + 8) += 4;
                        v96 = *(_DWORD *)(a1 + 8);
                        v97 = *(_DWORD *)((unsigned int)(v96 - 4) + v90);
                        if ( *(_DWORD *)(a1 + 16) )
                          v97 = (*(_DWORD *)((unsigned int)(v96 - 4) + v90) << 24) | ((*(_DWORD *)((unsigned int)(v96 - 4)
                                                                                                 + v90) & 0xFF00) << 8) | (*(_DWORD *)((unsigned int)(v96 - 4) + v90) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)((unsigned int)(v96 - 4) + v90));
                        if ( v97 > 0x18 )
                        {
                          v94 = v96 - 4;
                          *(_DWORD *)(a1 + 8) = v96 - 4;
                          goto LABEL_232;
                        }
                        if ( ++v95 >= 6 )
                          goto LABEL_232;
                      }
                    }
                    else
                    {
                      v94 = v114;
LABEL_232:
                      v98 = *(_DWORD *)(a1 + 8);
                      if ( v98 >= v94 )
                      {
LABEL_235:
                        if ( v94 )
                          *(_DWORD *)(a1 + 8) = v94;
                        v99 = *(_DWORD *)(a1 + 8);
                        if ( v120 )
                        {
                          LODWORD(Size) = v120;
                          if ( !(unsigned int)sub_180005C80(a1, v5, v116, v99, v115, (int *)&v127, Size) )
                            goto LABEL_263;
                        }
                        else if ( v99 && !(unsigned int)sub_180005100(a1, v5, v116, v99, v115, (int *)&v127) )
                        {
                          goto LABEL_263;
                        }
                        v100 = 0;
                        v101 = 0LL;
                        v102 = &v139;
                        do
                        {
                          v103 = *((_DWORD *)v102 - 5);
                          if ( !v103 )
                            break;
                          v100 += v103 / 3;
                          if ( !*(_DWORD *)v102 )
                            break;
                          v100 += *(_DWORD *)v102 / 3u;
                          v104 = *((_DWORD *)v102 + 5);
                          if ( !v104 )
                            break;
                          v100 += v104 / 3;
                          v105 = *((_DWORD *)v102 + 10);
                          if ( !v105 )
                            break;
                          v100 += v105 / 3;
                          v106 = *((_DWORD *)v102 + 15);
                          if ( !v106 )
                            break;
                          v100 += v106 / 3;
                          v101 += 5LL;
                          v102 += 100;
                        }
                        while ( v101 < 50 );
                        if ( v100 > 0 )
                        {
                          if ( !(unsigned int)sub_180001DD0(v5, v100) )
                            goto LABEL_263;
                          v107 = 0;
                          if ( *(int *)v5 > 0 )
                          {
                            v108 = 0LL;
                            do
                            {
                              *(_DWORD *)(v108 + *(_QWORD *)(v5 + 8)) = 3;
                              ++v107;
                              v108 += 20LL;
                            }
                            while ( v107 < *(_DWORD *)v5 );
                          }
                        }
                        *(_DWORD *)(v5 + 224) = 0;
                        v109 = 0LL;
                        v110 = &v135;
                        do
                        {
                          if ( !*v110 )
                            break;
                          if ( v110[3] )
                            v111 = sub_180006420(a1, v5, v110);
                          else
                            v111 = sub_180006250((__int64 *)a1, v5, v110);
                          if ( !v111 )
                            goto LABEL_263;
                          *(_DWORD *)(v5 + 224) += *v110 / 3u;
                          ++v109;
                          v110 += 5;
                        }
                        while ( v109 < 50 );
                        v12 = 1;
                      }
                      else
                      {
                        while ( v98 + 4 <= *(_DWORD *)(a1 + 12) )
                        {
                          *(_DWORD *)(a1 + 8) += 4;
                          v98 = *(_DWORD *)(a1 + 8);
                          if ( v98 >= v94 )
                            goto LABEL_235;
                        }
                      }
                    }
                  }
                  goto LABEL_263;
                }
              }
              goto LABEL_263;
            }
          }
        }
      }
    }
  }
  return 0LL;
}
// 18001BA41: conditional instruction was optimized away because rdi.8!=0
// 18001C6E9: conditional instruction was optimized away because r9.8!=0
// 18001C739: conditional instruction was optimized away because r9.8!=0
// 18001C7B9: conditional instruction was optimized away because r9.8!=0
// 18001BCCB: variable 'v35' is possibly undefined
// 18001C80C: variable 'Size' is possibly undefined
// 1800306F0: using guessed type __int64 qword_1800306F0;
// 18001B7D0: using guessed type unsigned int var_540[4];

//----- (000000018001C9D0) ----------------------------------------------------
__int64 __fastcall sub_18001C9D0(__int64 a1, unsigned int a2, int a3)
{
  int v7; // esi
  __int64 v8; // rdx
  unsigned int v9; // r8d
  int v10; // r9d
  int v11; // r11d
  unsigned __int32 v12; // r10d
  int v13; // r9d
  __int64 *v14; // rcx
  int v15; // r9d
  unsigned int v16; // r14d
  __int64 v17; // r10
  unsigned int v18; // r9d
  int v19; // r11d
  int v20; // r8d
  __int64 v21; // rdx
  int v22; // r11d
  int v23; // r11d
  signed int v24; // edi
  int v25; // ebp
  int v26; // r11d
  unsigned int v27; // esi
  int v28; // r8d
  int v29; // r8d
  int v30; // edi
  char v31[272]; // [rsp+20h] [rbp-248h] BYREF
  char v32[272]; // [rsp+130h] [rbp-138h] BYREF

  if ( !a3 )
    return 1LL;
  v7 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  if ( a2 )
  {
    while ( 1 )
    {
      v8 = *(_QWORD *)a1;
      if ( !*(_QWORD *)a1 )
        return 0LL;
      v9 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v10 = *(_DWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 16);
      v12 = *(_DWORD *)((unsigned int)(v10 - 4) + v8);
      if ( v11 )
        v12 = _byteswap_ulong(v12);
      if ( v10 + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      v13 = *(_DWORD *)(a1 + 8);
      if ( v11 )
        v12 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v13 - 4) + v8));
      if ( v13 + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v9 )
        return 0LL;
      *(_DWORD *)(a1 + 8) += 4;
      sub_180005050((__int64 *)a1, v12, (__int64)v31);
      sub_180005050(v14, v15, (__int64)v32);
      if ( ++v7 >= a2 )
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    v16 = 0;
    *(_DWORD *)(a1 + 8) = a3;
    if ( a2 )
    {
      while ( 1 )
      {
        v17 = *(_QWORD *)a1;
        if ( !*(_QWORD *)a1 )
          return 0LL;
        v18 = *(_DWORD *)(a1 + 12);
        if ( *(_DWORD *)(a1 + 8) + 4 > v18 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v19 = *(_DWORD *)(a1 + 8);
        v20 = *(_DWORD *)(a1 + 16);
        v21 = *(unsigned int *)((unsigned int)(v19 - 4) + v17);
        if ( v20 )
          v21 = _byteswap_ulong(v21);
        if ( v19 + 4 > v18 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v22 = *(_DWORD *)(a1 + 8);
        if ( v20 )
          v21 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v22 - 4) + v17));
        if ( v22 + 4 > v18 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v23 = *(_DWORD *)(a1 + 8);
        v24 = *(_DWORD *)((unsigned int)(v23 - 4) + v17);
        if ( v20 )
          v24 = _byteswap_ulong(v24);
        if ( v23 + 4 > v18 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v25 = *(_DWORD *)(a1 + 8);
        if ( v20 )
          v24 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v25 - 4) + v17));
        if ( v25 + 4 > v18 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v26 = *(_DWORD *)(a1 + 8);
        v27 = *(_DWORD *)((unsigned int)(v26 - 4) + v17);
        if ( v20 )
          v27 = _byteswap_ulong(v27);
        if ( v26 + 4 > v18 )
          return 0LL;
        *(_DWORD *)(a1 + 8) += 4;
        v28 = *(_DWORD *)(a1 + 8);
        if ( (int)v21 > 100 )
        {
          *(_DWORD *)(a1 + 8) = v21;
          v21 = 0LL;
          while ( *(_DWORD *)(a1 + 8) + 1 <= v18 )
          {
            ++*(_DWORD *)(a1 + 8);
            ++v21;
            if ( !*(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8) - 1) + v17) )
            {
              if ( v21 < 260 )
                v31[v21] = 0;
              *(_DWORD *)(a1 + 8) = v28;
              break;
            }
          }
        }
        if ( v24 > 100 )
        {
          v29 = *(_DWORD *)(a1 + 8);
          v21 = 0LL;
          *(_DWORD *)(a1 + 8) = v24;
          while ( *(_DWORD *)(a1 + 8) + 1 <= v18 )
          {
            ++*(_DWORD *)(a1 + 8);
            ++v21;
            if ( !*(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8) - 1) + v17) )
            {
              if ( v21 < 260 )
                v31[v21] = 0;
              *(_DWORD *)(a1 + 8) = v29;
              break;
            }
          }
        }
        v30 = *(_DWORD *)(a1 + 8);
        if ( !(unsigned int)sub_18001CD00(a1, v21, v27 + v25) )
          return 0LL;
        ++v16;
        *(_DWORD *)(a1 + 8) = v30;
        if ( v16 >= a2 )
          return 1LL;
      }
    }
    else
    {
      return 1LL;
    }
  }
}
// 18001CB0A: variable 'v14' is possibly undefined
// 18001CB0A: variable 'v15' is possibly undefined
// 18001C9D0: using guessed type char var_248[272];
// 18001C9D0: using guessed type char var_138[272];

//----- (000000018001CD00) ----------------------------------------------------
__int64 __fastcall sub_18001CD00(__int64 a1, __int64 a2, int a3)
{
  __int64 v4; // r10
  unsigned int v5; // eax
  unsigned int v6; // r8d
  int v7; // r9d
  int v8; // ebx
  unsigned __int16 v9; // r11
  int v10; // edi
  unsigned __int32 v11; // r9d
  int v12; // edi

  if ( !a3 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a3;
  if ( (_DWORD)qword_1800306F0 == 779 || (_DWORD)qword_1800306F0 == 866 || (_DWORD)qword_1800306F0 == 877 )
    return (unsigned int)sub_18001CE80(a1, a2, 0, a3) != 0;
  v4 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v5 = a3 + 4;
  v6 = *(_DWORD *)(a1 + 12);
  if ( v5 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) = v5;
  if ( v5 + 2 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_WORD *)((unsigned int)(v7 - 2) + v4);
  if ( v8 )
    v9 = __ROL2__(v9, 8);
  if ( v7 + 2 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 2;
  if ( *(_DWORD *)(a1 + 8) + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)((unsigned int)(v10 - 4) + v4);
  if ( v8 )
    v11 = _byteswap_ulong(v11);
  if ( v10 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v12 = *(_DWORD *)(a1 + 8);
  if ( v8 )
    v11 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v12 - 4) + v4));
  if ( v12 + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v6 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  return (unsigned int)sub_18001CE80(a1, a2, v9, v11) != 0;
}
// 1800306F0: using guessed type __int64 qword_1800306F0;

//----- (000000018001CE80) ----------------------------------------------------
__int64 __fastcall sub_18001CE80(__int64 a1, __int64 a2, unsigned int a3, int a4)
{
  int v6; // ecx
  __int64 v7; // r9
  unsigned int v8; // edx
  __int64 v9; // rdx
  unsigned int v10; // r8d
  int v11; // r9d
  int v12; // r10d
  unsigned int v13; // esi
  unsigned int v14; // edi
  int v15; // edi
  __int64 v16; // r8
  unsigned int v17; // edx
  int v18; // r10d
  int v19; // r9d
  unsigned int v20; // r14d
  int v21; // r11d
  unsigned int v22; // ebp
  int v23; // ebp
  int v24; // ecx
  int v25; // edi
  unsigned int v26; // esi
  int v27; // esi
  __int64 v28; // r8
  int v29; // edi
  unsigned int v30; // r9d
  int v31; // r10d
  int v32; // r11d
  unsigned int v33; // edx
  int v34; // r9d
  __int64 v35; // rdx
  __int128 v36; // [rsp+20h] [rbp-178h] BYREF
  __int128 v37; // [rsp+30h] [rbp-168h]
  __int128 v38; // [rsp+40h] [rbp-158h]
  __int128 v39; // [rsp+50h] [rbp-148h]
  char v40[272]; // [rsp+60h] [rbp-138h]

  if ( !a4 )
    return 1LL;
  *(_DWORD *)(a1 + 8) = a4;
  v6 = 0;
  if ( a3 )
  {
    v7 = *(_QWORD *)a1;
    while ( v7 )
    {
      v8 = *(_DWORD *)(a1 + 12);
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( *(_DWORD *)(a1 + 8) + 4 > v8 )
        break;
      *(_DWORD *)(a1 + 8) += 4;
      if ( ++v6 >= a3 )
        goto LABEL_9;
    }
    return 0LL;
  }
LABEL_9:
  v9 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v10 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v10 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v11 = *(_DWORD *)(a1 + 8);
  v12 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)((unsigned int)(v11 - 4) + v9);
  if ( v12 )
    v13 = _byteswap_ulong(v13);
  if ( v11 + 4 > v10 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v14 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v9);
  if ( v12 )
    v14 = _byteswap_ulong(v14);
  v36 = xmmword_180028E60;
  v15 = v11 + v14;
  v37 = xmmword_180028E70;
  v38 = xmmword_180028E80;
  v39 = xmmword_180028EA0;
  if ( !sub_18001D8D0(a1, (unsigned int *)&v36) )
    return 0LL;
  v16 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 )
    return 0LL;
  v17 = *(_DWORD *)(a1 + 12);
  if ( *(_DWORD *)(a1 + 8) + 4 > v17 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v17 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  if ( *(_DWORD *)(a1 + 8) + 4 > v17 )
    return 0LL;
  *(_DWORD *)(a1 + 8) += 4;
  v18 = *(_DWORD *)(a1 + 8);
  v19 = *(_DWORD *)(a1 + 16);
  v20 = *(_DWORD *)((unsigned int)(v18 - 4) + v16);
  if ( v19 )
    v20 = _byteswap_ulong(v20);
  if ( v18 + 4 <= v17 )
  {
    *(_DWORD *)(a1 + 8) += 4;
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)((unsigned int)(v21 - 4) + v16);
    if ( v19 )
      v22 = _byteswap_ulong(v22);
    if ( v21 + 4 <= v17 )
    {
      *(_DWORD *)(a1 + 8) += 4;
      if ( v19 )
        v22 = _byteswap_ulong(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v16));
      v23 = v18 + v22;
      v24 = 0;
      while ( *(_DWORD *)(a1 + 8) + 4 <= v17 )
      {
        *(_DWORD *)(a1 + 8) += 4;
        if ( ++v24 >= 21 )
        {
          if ( v15 && (*(_DWORD *)(a1 + 8) = v15, v25 = 0, (v26 = v13 >> 4) != 0) )
          {
            while ( 1 )
            {
              v36 = xmmword_180028E60;
              v37 = xmmword_180028E70;
              v38 = xmmword_180028E80;
              v39 = xmmword_180028EA0;
              if ( !sub_18001D8D0(a1, (unsigned int *)&v36) )
                break;
              if ( ++v25 >= v26 )
                goto LABEL_36;
            }
          }
          else
          {
LABEL_36:
            if ( !v23 )
              return 1LL;
            v27 = 0;
            *(_DWORD *)(a1 + 8) = v23;
            if ( !v20 )
              return 1LL;
            v28 = *(_QWORD *)a1;
            while ( 1 )
            {
              v29 = *(_DWORD *)(a1 + 8);
              if ( !v28 )
                break;
              v30 = *(_DWORD *)(a1 + 12);
              if ( v29 + 4 > v30 )
                break;
              *(_DWORD *)(a1 + 8) += 4;
              v31 = *(_DWORD *)(a1 + 8);
              v32 = *(_DWORD *)(a1 + 16);
              v33 = *(_DWORD *)((unsigned int)(v31 - 4) + v28);
              if ( v32 )
                v33 = _byteswap_ulong(v33);
              if ( v31 + 4 > v30 )
                break;
              *(_DWORD *)(a1 + 8) += 4;
              v34 = *(_DWORD *)(a1 + 8);
              if ( v32 )
                v33 = _byteswap_ulong(*(_DWORD *)((unsigned int)(v34 - 4) + v28));
              if ( (int)(v33 + v29) > 100 )
              {
                *(_DWORD *)(a1 + 8) = v33 + v29;
                v35 = 0LL;
                while ( (unsigned int)(*(_DWORD *)(a1 + 8) + 1) <= *(_DWORD *)(a1 + 12) )
                {
                  ++*(_DWORD *)(a1 + 8);
                  ++v35;
                  if ( !*(_BYTE *)((unsigned int)(*(_DWORD *)(a1 + 8) - 1) + v28) )
                  {
                    if ( v35 < 260 )
                      v40[v35] = 0;
                    *(_DWORD *)(a1 + 8) = v34;
                    break;
                  }
                }
              }
              if ( ++v27 >= v20 )
                return 1LL;
            }
          }
          return 0LL;
        }
      }
    }
  }
  return 0LL;
}
// 18001D163: conditional instruction was optimized away because r8.8!=0
// 180028E60: using guessed type __int128 xmmword_180028E60;
// 180028E70: using guessed type __int128 xmmword_180028E70;
// 180028E80: using guessed type __int128 xmmword_180028E80;
// 180028EA0: using guessed type __int128 xmmword_180028EA0;
// 18001CE80: using guessed type char var_138[272];

//----- (000000018001D1F0) ----------------------------------------------------
__int64 __fastcall sub_18001D1F0(wchar_t *FullPath, __int64 a2)
{
  wchar_t *p_Drive; // rcx
  wchar_t v6; // ax
  __int64 v7; // rcx
  bool v8; // zf
  __int64 v9; // rdx
  wchar_t v10; // ax
  __int64 v11; // rax
  __int64 v12; // rcx
  __int64 v13; // rcx
  __int64 v14; // rbx
  wchar_t Drive; // [rsp+30h] [rbp-228h] BYREF
  int v16; // [rsp+32h] [rbp-226h]
  wchar_t Dir[256]; // [rsp+40h] [rbp-218h] BYREF

  if ( !a2 )
    return 0LL;
  v16 = 0;
  Drive = 0;
  memset(Dir, 0, sizeof(Dir));
  wsplitpath(FullPath, &Drive, Dir, 0LL, 0LL);
  p_Drive = &Drive;
  do
  {
    v6 = *p_Drive;
    *(wchar_t *)((char *)p_Drive + a2 - (_QWORD)&Drive) = *p_Drive;
    ++p_Drive;
  }
  while ( v6 );
  v7 = a2 - 2;
  do
  {
    v8 = *(_WORD *)(v7 + 2) == 0;
    v7 += 2LL;
  }
  while ( !v8 );
  v9 = 0LL;
  do
  {
    v10 = Dir[v9];
    *(_WORD *)(v7 + 2 * v9++) = v10;
  }
  while ( v10 );
  v11 = -1LL;
  v12 = -1LL;
  do
    ++v12;
  while ( *(_WORD *)(a2 + 2 * v12) );
  if ( v12 )
  {
    v13 = -1LL;
    do
      v8 = *(_WORD *)(a2 + 2 * v13++ + 2) == 0;
    while ( !v8 );
    if ( *(_WORD *)(a2 + 2 * v13 - 2) != 92 )
    {
      do
        v8 = *(_WORD *)(a2 + 2 * v11++ + 2) == 0;
      while ( !v8 );
      if ( *(_WORD *)(a2 + 2 * v11 - 2) != 47 )
      {
        v14 = a2 - 2;
        do
        {
          v8 = *(_WORD *)(v14 + 2) == 0;
          v14 += 2LL;
        }
        while ( !v8 );
        *(_DWORD *)v14 = 92;
      }
    }
  }
  return 1LL;
}
// 18001D1F0: using guessed type wchar_t Dir[256];

//----- (000000018001D360) ----------------------------------------------------
BOOL __fastcall sub_18001D360(HWND hWnd, HWND a2)
{
  int v4; // r15d
  int v5; // ebp
  int v6; // edi
  int v7; // r14d
  HDC DC; // rbx
  int DeviceCaps; // r12d
  int v10; // r13d
  int v11; // r8d
  int v12; // r9d
  struct tagRECT Rect; // [rsp+40h] [rbp-68h] BYREF
  struct tagRECT v15; // [rsp+50h] [rbp-58h] BYREF

  if ( !hWnd || !a2 )
    return 0;
  GetWindowRect(hWnd, &v15);
  v4 = v15.right - v15.left;
  v5 = v15.bottom - v15.top;
  GetWindowRect(a2, &Rect);
  v6 = Rect.right - Rect.left;
  v7 = Rect.bottom - Rect.top;
  DC = GetDC(hWnd);
  DeviceCaps = GetDeviceCaps(DC, 8);
  v10 = GetDeviceCaps(DC, 10);
  ReleaseDC(hWnd, DC);
  v11 = Rect.left + (v6 - v4) / 2;
  if ( v11 >= 0 )
  {
    if ( v11 + v4 > DeviceCaps )
      v11 = DeviceCaps - v4;
  }
  else
  {
    v11 = 0;
  }
  v12 = Rect.top + (v7 - v5) / 2;
  if ( v12 >= 0 )
  {
    if ( v12 + v5 > v10 )
      v12 = v10 - v5;
  }
  else
  {
    v12 = 0;
  }
  return SetWindowPos(hWnd, 0LL, v11, v12, 0, 0, 5u);
}

//----- (000000018001D4E0) ----------------------------------------------------
__int64 __fastcall sub_18001D4E0(__int64 *a1, unsigned int *a2)
{
  __int64 v3; // rdx
  unsigned int v4; // eax
  unsigned int v6; // edx
  __int64 v7; // rdx

  v3 = *a1;
  if ( *a1 && (v4 = *((_DWORD *)a1 + 2) + 4, v4 <= *((_DWORD *)a1 + 3)) )
  {
    *((_DWORD *)a1 + 2) = v4;
    *a2 = *(_DWORD *)(v4 - 4 + v3);
    if ( *((_DWORD *)a1 + 4) )
    {
      v6 = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1);
      *a2 = (((v6 << 16) | v6 & 0xFF00) << 8) | ((HIWORD(v6) | v6 & 0xFF0000) >> 8);
    }
    v7 = *a1;
    if ( *a1 && (unsigned int)(*((_DWORD *)a1 + 2) + 4) <= *((_DWORD *)a1 + 3) )
    {
      *((_DWORD *)a1 + 2) += 4;
      a2[1] = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + v7);
      if ( *((_DWORD *)a1 + 4) )
        a2[1] = (((*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) << 16) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4)
                                                                                                 + *a1) & 0xFF00) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1)) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF0000u) >> 8);
      return 1LL;
    }
    else
    {
      a2[1] = 0;
      return 0LL;
    }
  }
  else
  {
    *a2 = 0;
    return 0LL;
  }
}

//----- (000000018001D5C0) ----------------------------------------------------
__int64 __fastcall sub_18001D5C0(__int64 *a1, unsigned int *a2)
{
  __int64 v3; // rdx
  unsigned int v4; // eax
  unsigned int v6; // edx
  __int64 v7; // rdx
  __int64 v8; // rdx

  v3 = *a1;
  if ( *a1 && (v4 = *((_DWORD *)a1 + 2) + 4, v4 <= *((_DWORD *)a1 + 3)) )
  {
    *((_DWORD *)a1 + 2) = v4;
    *a2 = *(_DWORD *)(v4 - 4 + v3);
    if ( *((_DWORD *)a1 + 4) )
    {
      v6 = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1);
      *a2 = (((v6 << 16) | v6 & 0xFF00) << 8) | ((HIWORD(v6) | v6 & 0xFF0000) >> 8);
    }
    v7 = *a1;
    if ( *a1 && (unsigned int)(*((_DWORD *)a1 + 2) + 4) <= *((_DWORD *)a1 + 3) )
    {
      *((_DWORD *)a1 + 2) += 4;
      a2[1] = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + v7);
      if ( *((_DWORD *)a1 + 4) )
        a2[1] = (((*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) << 16) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4)
                                                                                                 + *a1) & 0xFF00) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1)) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF0000u) >> 8);
      v8 = *a1;
      if ( *a1 && (unsigned int)(*((_DWORD *)a1 + 2) + 4) <= *((_DWORD *)a1 + 3) )
      {
        *((_DWORD *)a1 + 2) += 4;
        a2[2] = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + v8);
        if ( *((_DWORD *)a1 + 4) )
          a2[2] = ((*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF00 | (*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) << 16)) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1)) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF0000u) >> 8);
        return 1LL;
      }
      else
      {
        a2[2] = 0;
        return 0LL;
      }
    }
    else
    {
      a2[1] = 0;
      return 0LL;
    }
  }
  else
  {
    *a2 = 0;
    return 0LL;
  }
}

//----- (000000018001D710) ----------------------------------------------------
__int64 __fastcall sub_18001D710(__int64 *a1, unsigned int *a2)
{
  __int64 v3; // rdx
  unsigned int v4; // eax
  unsigned int v6; // edx
  __int64 v7; // rdx
  __int64 v8; // rdx
  __int64 v9; // rdx

  v3 = *a1;
  if ( *a1 && (v4 = *((_DWORD *)a1 + 2) + 4, v4 <= *((_DWORD *)a1 + 3)) )
  {
    *((_DWORD *)a1 + 2) = v4;
    *a2 = *(_DWORD *)(v4 - 4 + v3);
    if ( *((_DWORD *)a1 + 4) )
    {
      v6 = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1);
      *a2 = (((v6 << 16) | v6 & 0xFF00) << 8) | ((HIWORD(v6) | v6 & 0xFF0000) >> 8);
    }
    v7 = *a1;
    if ( *a1 && (unsigned int)(*((_DWORD *)a1 + 2) + 4) <= *((_DWORD *)a1 + 3) )
    {
      *((_DWORD *)a1 + 2) += 4;
      a2[1] = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + v7);
      if ( *((_DWORD *)a1 + 4) )
        a2[1] = (((*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) << 16) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4)
                                                                                                 + *a1) & 0xFF00) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1)) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF0000u) >> 8);
      v8 = *a1;
      if ( *a1 && (unsigned int)(*((_DWORD *)a1 + 2) + 4) <= *((_DWORD *)a1 + 3) )
      {
        *((_DWORD *)a1 + 2) += 4;
        a2[2] = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + v8);
        if ( *((_DWORD *)a1 + 4) )
          a2[2] = ((*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF00 | (*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) << 16)) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1)) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF0000u) >> 8);
        v9 = *a1;
        if ( *a1 && (unsigned int)(*((_DWORD *)a1 + 2) + 4) <= *((_DWORD *)a1 + 3) )
        {
          *((_DWORD *)a1 + 2) += 4;
          a2[3] = *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + v9);
          if ( *((_DWORD *)a1 + 4) )
            a2[3] = ((*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF00 | (*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) << 16)) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1)) | *(_DWORD *)((unsigned int)(*((_DWORD *)a1 + 2) - 4) + *a1) & 0xFF0000u) >> 8);
          return 1LL;
        }
        else
        {
          a2[3] = 0;
          return 0LL;
        }
      }
      else
      {
        a2[2] = 0;
        return 0LL;
      }
    }
    else
    {
      a2[1] = 0;
      return 0LL;
    }
  }
  else
  {
    *a2 = 0;
    return 0LL;
  }
}

//----- (000000018001D8D0) ----------------------------------------------------
_BOOL8 __fastcall sub_18001D8D0(__int64 a1, unsigned int *a2)
{
  __int64 v3; // rdx
  unsigned int v4; // eax
  unsigned int v6; // edx
  __int64 v7; // rdx
  __int64 v8; // rdx
  __int64 v9; // rdx
  __int64 v10; // rdx
  __int64 *v11; // r10
  __int64 v12; // r11
  __int64 *v13; // r10
  __int64 v14; // r11
  __int64 *v15; // r10
  __int64 v16; // r11
  __int64 *v17; // r10
  __int64 v18; // r11
  __int64 *v19; // r10
  __int64 v20; // r11
  __int64 *v21; // r10
  __int64 v22; // r11
  __int64 *v23; // r10
  __int64 v24; // r11
  __int64 *v25; // r10
  __int64 v26; // r11
  __int64 *v27; // r10
  __int64 v28; // r11
  __int64 *v29; // r10
  __int64 v30; // r11

  v3 = *(_QWORD *)a1;
  if ( !*(_QWORD *)a1 || (v4 = *(_DWORD *)(a1 + 8) + 4, v4 > *(_DWORD *)(a1 + 12)) )
  {
    *a2 = 0;
    return 0LL;
  }
  *(_DWORD *)(a1 + 8) = v4;
  *a2 = *(_DWORD *)(v4 - 4 + v3);
  if ( *(_DWORD *)(a1 + 16) )
  {
    v6 = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1);
    *a2 = (((v6 << 16) | v6 & 0xFF00) << 8) | ((HIWORD(v6) | v6 & 0xFF0000) >> 8);
  }
  v7 = *(_QWORD *)a1;
  if ( *(_QWORD *)a1 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
  {
    *(_DWORD *)(a1 + 8) += 4;
    a2[1] = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v7);
    if ( *(_DWORD *)(a1 + 16) )
      a2[1] = (((*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) << 16) | *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF00) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1)) | *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF0000u) >> 8);
    v8 = *(_QWORD *)a1;
    if ( *(_QWORD *)a1 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
    {
      *(_DWORD *)(a1 + 8) += 4;
      a2[2] = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v8);
      if ( *(_DWORD *)(a1 + 16) )
        a2[2] = ((*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF00 | (*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) << 16)) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1)) | *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF0000u) >> 8);
      v9 = *(_QWORD *)a1;
      if ( *(_QWORD *)a1 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
      {
        *(_DWORD *)(a1 + 8) += 4;
        a2[3] = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v9);
        if ( *(_DWORD *)(a1 + 16) )
          a2[3] = ((*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF00 | (*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) << 16)) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1)) | *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF0000u) >> 8);
        v10 = *(_QWORD *)a1;
        if ( *(_QWORD *)a1 && (unsigned int)(*(_DWORD *)(a1 + 8) + 4) <= *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 8) += 4;
          a2[4] = *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + v10);
          if ( *(_DWORD *)(a1 + 16) )
            a2[4] = ((*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF00 | (*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) << 16)) << 8) | ((HIWORD(*(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1)) | *(_DWORD *)((unsigned int)(*(_DWORD *)(a1 + 8) - 4) + *(_QWORD *)a1) & 0xFF0000u) >> 8);
          if ( !(unsigned int)sub_180006F20((__int64 *)a1, a2 + 5)
            || !(unsigned int)sub_180006F20(v11, (unsigned int *)(v12 + 24))
            || !(unsigned int)sub_180006F20(v13, (unsigned int *)(v14 + 28))
            || !(unsigned int)sub_180006F20(v15, (unsigned int *)(v16 + 32))
            || !(unsigned int)sub_180006F20(v17, (unsigned int *)(v18 + 36))
            || !(unsigned int)sub_180006F20(v19, (unsigned int *)(v20 + 40))
            || !(unsigned int)sub_180006F20(v21, (unsigned int *)(v22 + 44))
            || !(unsigned int)sub_180006F20(v23, (unsigned int *)(v24 + 48))
            || !(unsigned int)sub_180006F20(v25, (unsigned int *)(v26 + 52))
            || !(unsigned int)sub_180006F20(v27, (unsigned int *)(v28 + 56)) )
          {
            return 0LL;
          }
          return (unsigned int)sub_180006F20(v29, (unsigned int *)(v30 + 60)) != 0;
        }
        else
        {
          a2[4] = 0;
          return 0LL;
        }
      }
      else
      {
        a2[3] = 0;
        return 0LL;
      }
    }
    else
    {
      a2[2] = 0;
      return 0LL;
    }
  }
  else
  {
    a2[1] = 0;
    return 0LL;
  }
}
// 18001DB1B: variable 'v11' is possibly undefined
// 18001DB14: variable 'v12' is possibly undefined
// 18001DB2F: variable 'v13' is possibly undefined
// 18001DB28: variable 'v14' is possibly undefined
// 18001DB43: variable 'v15' is possibly undefined
// 18001DB3C: variable 'v16' is possibly undefined
// 18001DB57: variable 'v17' is possibly undefined
// 18001DB50: variable 'v18' is possibly undefined
// 18001DB6B: variable 'v19' is possibly undefined
// 18001DB64: variable 'v20' is possibly undefined
// 18001DB7F: variable 'v21' is possibly undefined
// 18001DB78: variable 'v22' is possibly undefined
// 18001DB93: variable 'v23' is possibly undefined
// 18001DB8C: variable 'v24' is possibly undefined
// 18001DBA7: variable 'v25' is possibly undefined
// 18001DBA0: variable 'v26' is possibly undefined
// 18001DBBB: variable 'v27' is possibly undefined
// 18001DBB4: variable 'v28' is possibly undefined
// 18001DBCF: variable 'v29' is possibly undefined
// 18001DBC8: variable 'v30' is possibly undefined

//----- (000000018001DBF0) ----------------------------------------------------
__int64 __fastcall sub_18001DBF0(_OWORD *a1, __int64 a2, __int64 a3)
{
  unsigned __int16 v4; // bp
  unsigned __int16 v6; // r9
  int v7; // r11d
  unsigned __int16 v8; // r8
  float v9; // xmm1_4
  __int64 v10; // rbx
  int v11; // ecx
  __int64 result; // rax
  __int128 v13; // xmm1
  __int128 v14; // xmm0
  __int128 v15; // xmm1
  __int128 v16; // [rsp+0h] [rbp-68h]
  __int128 v17; // [rsp+10h] [rbp-58h]
  __int128 v18; // [rsp+20h] [rbp-48h]
  __int128 v19; // [rsp+30h] [rbp-38h]

  v16 = 0uLL;
  v4 = 0;
  v17 = 0uLL;
  v18 = 0uLL;
  v19 = 0uLL;
  do
  {
    v6 = 0;
    v7 = 4 * v4;
    do
    {
      v8 = 0;
      v9 = *((float *)&v16 + v7 + (unsigned int)v6);
      v10 = v7 + (unsigned int)v6;
      do
      {
        v11 = v8++;
        result = (unsigned int)(v7 + v11);
        v9 = v9 + (float)(*(float *)(a3 + 4LL * ((unsigned int)v6 + 4 * v11)) * *(float *)(a2 + 4 * result));
      }
      while ( v8 < 4u );
      ++v6;
      *((float *)&v16 + v10) = v9;
    }
    while ( v6 < 4u );
    ++v4;
  }
  while ( v4 < 4u );
  v13 = v17;
  *a1 = v16;
  v14 = v18;
  a1[1] = v13;
  v15 = v19;
  a1[2] = v14;
  a1[3] = v15;
  return result;
}

//----- (000000018001DD00) ----------------------------------------------------
__int64 __fastcall sub_18001DD00(float *a1, __int64 a2)
{
  float v2; // xmm1_4
  __int64 result; // rax
  float v4; // xmm0_4

  *(float *)a2 = (float)(1.0 - (float)((float)(a1[1] + a1[1]) * a1[1])) - (float)((float)(a1[2] + a1[2]) * a1[2]);
  *(float *)(a2 + 16) = (float)((float)(*a1 + *a1) * a1[1]) + (float)((float)(a1[3] + a1[3]) * a1[2]);
  *(float *)(a2 + 32) = (float)((float)(*a1 + *a1) * a1[2]) - (float)((float)(a1[3] + a1[3]) * a1[1]);
  *(float *)(a2 + 4) = (float)((float)(*a1 + *a1) * a1[1]) - (float)((float)(a1[3] + a1[3]) * a1[2]);
  *(float *)(a2 + 20) = (float)(1.0 - (float)((float)(*a1 + *a1) * *a1)) - (float)((float)(a1[2] + a1[2]) * a1[2]);
  *(float *)(a2 + 36) = (float)((float)(a1[3] + a1[3]) * *a1) + (float)((float)(a1[1] + a1[1]) * a1[2]);
  *(float *)(a2 + 8) = (float)((float)(*a1 + *a1) * a1[2]) + (float)((float)(a1[3] + a1[3]) * a1[1]);
  *(float *)(a2 + 24) = (float)((float)(a1[1] + a1[1]) * a1[2]) - (float)((float)(a1[3] + a1[3]) * *a1);
  v2 = (float)(*a1 + *a1) * *a1;
  result = 0LL;
  v4 = (float)(a1[1] + a1[1]) * a1[1];
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 44) = 0LL;
  *(_QWORD *)(a2 + 52) = 0LL;
  *(_DWORD *)(a2 + 60) = 1065353216;
  *(float *)(a2 + 40) = (float)(1.0 - v2) - v4;
  return result;
}

//----- (000000018001DE90) ----------------------------------------------------
float __fastcall sub_18001DE90(unsigned __int16 a1)
{
  int v1; // eax
  int v2; // edx
  int v3; // ecx
  float result; // xmm0_4

  v1 = a1 >> 15;
  v2 = a1 & 0x3FF;
  v3 = (a1 >> 10) & 0x1F;
  if ( !v3 )
  {
    if ( !v2 )
    {
      LODWORD(result) = v1 << 31;
      return result;
    }
    do
    {
      v2 *= 2;
      --v3;
    }
    while ( (v2 & 0x400) == 0 );
    ++v3;
    v2 &= ~0x400u;
    goto LABEL_6;
  }
  if ( v3 != 31 )
  {
LABEL_6:
    LODWORD(result) = ((v3 << 23) + 939524096) | ((v2 | (v1 << 18)) << 13);
    return result;
  }
  if ( v2 )
    LODWORD(result) = (v2 | (v1 << 18) | 0x3FC00) << 13;
  else
    LODWORD(result) = (v1 << 31) | 0x7F800000;
  return result;
}

//----- (000000018001DF30) ----------------------------------------------------
_QWORD *__fastcall sub_18001DF30(__int64 a1, __int64 a2, WCHAR *a3)
{
  _QWORD *result; // rax
  __int64 v6; // rcx
  _QWORD *v7; // rdi
  unsigned int v8; // ebx
  CHAR MultiByteStr[272]; // [rsp+40h] [rbp-128h] BYREF

  memset(MultiByteStr, 0, 0x104uLL);
  WideCharToMultiByte(0xFDE9u, 0, a3, -1, MultiByteStr, 259, 0LL, 0LL);
  result = (_QWORD *)sub_1800229E0((__int64)MultiByteStr);
  v7 = result;
  if ( result )
  {
    v8 = sub_18001DFF0(v6, a2, a3, result);
    sub_180022720(v7);
    return (_QWORD *)v8;
  }
  return result;
}
// 18001DFB9: variable 'v6' is possibly undefined

//----- (000000018001DFF0) ----------------------------------------------------
__int64 __fastcall sub_18001DFF0(__int64 a1, __int64 a2, wchar_t *a3, _QWORD *a4)
{
  __int64 v6; // rsi
  unsigned int v8; // ebx
  int v9; // r15d
  __int64 v10; // rcx
  __int64 v11; // r12
  int v12; // edi
  unsigned __int64 v13; // r8
  int v14; // esi
  __int64 v15; // rax
  WCHAR v16; // ax
  wchar_t v17; // ax
  __int64 v18; // rax
  void *v19; // rdi
  __int64 v20; // rcx
  wchar_t v21; // ax
  __int16 *v22; // rcx
  __int64 v23; // rdx
  wchar_t v24; // ax
  __int64 v25; // rcx
  __int16 v26; // ax
  __int16 *v27; // rcx
  __int64 v28; // rdx
  wchar_t v29; // ax
  void *v30; // [rsp+40h] [rbp-C0h] BYREF
  __int64 v31; // [rsp+48h] [rbp-B8h]
  int v32; // [rsp+50h] [rbp-B0h]
  __int64 v33; // [rsp+58h] [rbp-A8h]
  __int64 v34; // [rsp+60h] [rbp-A0h]
  __int128 v35; // [rsp+68h] [rbp-98h] BYREF
  char v36[32]; // [rsp+80h] [rbp-80h] BYREF
  __int64 v37; // [rsp+A0h] [rbp-60h]
  __int16 v38; // [rsp+DEh] [rbp-22h] BYREF
  WCHAR WideCharStr[263]; // [rsp+E0h] [rbp-20h] BYREF
  __int16 v40; // [rsp+2EEh] [rbp+1EEh] BYREF
  wchar_t String1[264]; // [rsp+2F0h] [rbp+1F0h] BYREF
  wchar_t Ext[256]; // [rsp+500h] [rbp+400h] BYREF
  wchar_t MultiByteStr[256]; // [rsp+700h] [rbp+600h] BYREF
  wchar_t FullPath[264]; // [rsp+900h] [rbp+800h] BYREF
  __int16 v45[264]; // [rsp+B10h] [rbp+A10h] BYREF

  v34 = -2LL;
  v6 = a2;
  v33 = a2;
  if ( !a2 )
    return 0LL;
  if ( !a3 )
    return 0LL;
  if ( !a4 )
    return 0LL;
  v8 = 0;
  *(_QWORD *)&v35 = 0LL;
  DWORD2(v35) = 0;
  if ( (unsigned int)sub_180022880((__int64)a4, &v35) )
    return 0LL;
  v9 = -1;
  memset(FullPath, 0, 0x208uLL);
  v11 = 0LL;
  v12 = 0;
  v13 = v35;
  if ( (_QWORD)v35 )
  {
    do
    {
      memset(MultiByteStr, 0, 0x104uLL);
      sub_180022830((__int64)a4, (__int64)v36, (__int64)MultiByteStr, 0x104u, 0LL, 0, 0LL, 0);
      memset(WideCharStr, 0, 0x208uLL);
      MultiByteToWideChar(0xFDE9u, 0, (LPCCH)MultiByteStr, -1, WideCharStr, 259);
      v14 = 0;
      v15 = -1LL;
      do
        ++v15;
      while ( WideCharStr[v15] );
      if ( (int)v15 > 0 )
      {
        v16 = WideCharStr[(int)v15 - 1];
        if ( v16 == 92 || v16 == 47 )
          v14 = 1;
      }
      memset(String1, 0, 0x208uLL);
      memset(Ext, 0, sizeof(Ext));
      wsplitpath(WideCharStr, 0LL, 0LL, 0LL, Ext);
      if ( Ext[0] == 46 )
      {
        v10 = 0LL;
        do
        {
          v17 = *(wchar_t *)((char *)&Ext[1] + v10);
          *(wchar_t *)((char *)String1 + v10) = v17;
          v10 += 2LL;
        }
        while ( v17 );
      }
      else
      {
        String1[0] = 0;
      }
      if ( !v14 && !wcsicmp(String1, L"bdae") )
      {
        v9 = v12;
        v11 = v37;
        v18 = 0LL;
        do
        {
          v10 = WideCharStr[v18];
          FullPath[v18++] = v10;
        }
        while ( (_WORD)v10 );
      }
      ++v12;
      v13 = v35;
      if ( v12 < (unsigned __int64)v35 )
      {
        sub_180022920((__int64)a4);
        v13 = v35;
      }
    }
    while ( v12 < v13 );
    v6 = v33;
  }
  if ( v9 >= 0 )
  {
    v19 = (void *)sub_18001E410(v10, a4, v13, v9, v11);
    if ( v19 )
    {
      memset(v45, 0, 0x208uLL);
      sub_18001D1F0(a3, (__int64)v45);
      memset(String1, 0, 0x208uLL);
      memset(Ext, 0, sizeof(Ext));
      memset(MultiByteStr, 0, sizeof(MultiByteStr));
      wsplitpath(FullPath, 0LL, 0LL, Ext, MultiByteStr);
      v20 = 0LL;
      do
      {
        v21 = Ext[v20];
        String1[v20++] = v21;
      }
      while ( v21 );
      v22 = &v40;
      do
        ++v22;
      while ( *v22 );
      v23 = 0LL;
      do
      {
        v24 = MultiByteStr[v23];
        v22[v23++] = v24;
      }
      while ( v24 );
      memset(WideCharStr, 0, 0x208uLL);
      v25 = 0LL;
      do
      {
        v26 = v45[v25];
        WideCharStr[v25++] = v26;
      }
      while ( v26 );
      v27 = &v38;
      do
        ++v27;
      while ( *v27 );
      v28 = 0LL;
      do
      {
        v29 = String1[v28];
        v27[v28++] = v29;
      }
      while ( v29 );
      v30 = 0LL;
      v31 = 0LL;
      v32 = 0;
      if ( (_DWORD)v11 )
      {
        v30 = v19;
        HIDWORD(v31) = v11;
        LODWORD(v31) = 0;
        v8 = sub_180003F40((__int64)&v30, v6, (__int64)WideCharStr);
      }
      j_j_free(v19);
    }
  }
  return v8;
}
// 18001E247: variable 'v10' is possibly undefined
// 18001DFF0: using guessed type wchar_t MultiByteStr[256];
// 18001DFF0: using guessed type char var_CE0[32];
// 18001DFF0: using guessed type WCHAR WideCharStr[263];
// 18001DFF0: using guessed type wchar_t String1[264];

//----- (000000018001E410) ----------------------------------------------------
__int64 __fastcall sub_18001E410(__int64 a1, _QWORD *a2, unsigned __int64 a3, int a4, __int64 a5)
{
  __int64 v9; // rcx
  int v10; // ebx

  if ( !a2 || (unsigned int)sub_1800228A0(a2) )
    return 0LL;
  v10 = 0;
  if ( a3 )
  {
    while ( a4 != v10 )
    {
      if ( ++v10 >= a3 )
        break;
      sub_180022920((__int64)a2);
    }
  }
  return sub_18001E4A0(v9, (__int64)a2, a5);
}
// 18001E491: variable 'v9' is possibly undefined

//----- (000000018001E4A0) ----------------------------------------------------
__int64 __fastcall sub_18001E4A0(__int64 a1, __int64 a2, __int64 a3)
{
  unsigned int v3; // esi
  void *v5; // rax
  __int64 v6; // rdi

  v3 = a3;
  if ( !a2 || !a3 )
    return 0LL;
  if ( (unsigned int)sub_1800229F0(a2) )
  {
    sub_180022770(a2);
    return 0LL;
  }
  v5 = operator new(v3);
  v6 = (__int64)v5;
  if ( v5 )
  {
    memset(v5, 0, v3);
    sub_1800230A0(a2, v6, v3);
    sub_180022770(a2);
    return v6;
  }
  else
  {
    sub_180022770(a2);
    return 0LL;
  }
}
// 18001E4A0: could not find valid save-restore pair for rbp

//----- (000000018001E550) ----------------------------------------------------
__int64 __fastcall sub_18001E550(char *a1, int *a2, __int64 a3, int *a4)
{
  int v4; // ebx
  unsigned int v5; // r14d
  int v6; // esi
  _QWORD *v9; // rax
  _QWORD *v10; // r15
  unsigned int v12; // edi
  int v13; // eax
  unsigned int v14; // edi
  __int64 (__fastcall *v15)(); // r8
  char v16[16]; // [rsp+20h] [rbp-39h] BYREF
  __int64 v17; // [rsp+30h] [rbp-29h] BYREF
  int v18; // [rsp+38h] [rbp-21h]
  char *v19; // [rsp+40h] [rbp-19h]
  int i; // [rsp+48h] [rbp-11h]
  int v21; // [rsp+4Ch] [rbp-Dh]
  __int64 v22; // [rsp+50h] [rbp-9h]
  _QWORD *v23; // [rsp+58h] [rbp-1h]
  void *(__fastcall *v24)(__int64, int, int); // [rsp+60h] [rbp+7h]
  __int64 (__fastcall *v25)(); // [rsp+68h] [rbp+Fh]
  __int64 v26; // [rsp+70h] [rbp+17h]

  v4 = *a2;
  v5 = 0;
  v6 = *a4;
  if ( *a2 )
  {
    *a2 = 0;
  }
  else
  {
    v4 = 1;
    a1 = v16;
  }
  v17 = a3;
  v24 = sub_180020360;
  v25 = __crt_internal_free_policy::operator()<wchar_t>;
  v18 = 0;
  v22 = 0LL;
  v26 = 0LL;
  v9 = sub_180020360(0LL, 1, 7152);
  v10 = v9;
  if ( !v9 )
    return 4294967292LL;
  v23 = v9;
  *v9 = &v17;
  v9[8] = 0LL;
  *((_DWORD *)v9 + 2) = 16180;
  v12 = sub_18001E810(&v17, 15);
  if ( v12 )
  {
    ((void (__fastcall *)(__int64, _QWORD *))v25)(v26, v10);
    v23 = 0LL;
    return v12;
  }
  else
  {
    v13 = 0;
    v19 = a1;
    for ( i = 0; ; v13 = i )
    {
      if ( !v13 )
      {
        i = v4;
        v4 = 0;
      }
      if ( !v18 )
      {
        v18 = v6;
        v6 = 0;
      }
      v14 = sub_18001EB30((__int64)&v17, 0);
      if ( v14 )
        break;
    }
    *a4 -= v6 + v18;
    if ( a1 == v16 )
    {
      if ( v21 && v14 == -5 )
        v4 = 1;
    }
    else
    {
      *a2 = v21;
    }
    if ( v24 )
    {
      v15 = v25;
      if ( v25 )
      {
        if ( v23 && (__int64 *)*v23 == &v17 && (unsigned int)(*((_DWORD *)v23 + 2) - 16180) <= 0x1F )
        {
          if ( v23[8] )
          {
            ((void (__fastcall *)(__int64, _QWORD))v25)(v26, v23[8]);
            v15 = v25;
          }
          ((void (__fastcall *)(__int64))v15)(v26);
        }
      }
    }
    if ( v14 != 1 )
    {
      if ( v14 == 2 )
      {
        return (unsigned int)-3;
      }
      else
      {
        if ( v14 != -5 )
          return v14;
        v5 = -3;
        if ( !(v4 + i) )
          return v14;
      }
    }
    return v5;
  }
}
// 180020370: using guessed type __int64 __fastcall __crt_internal_free_policy::operator()<wchar_t>();

//----- (000000018001E750) ----------------------------------------------------
__int64 __fastcall sub_18001E750(__int64 a1)
{
  __int64 v1; // rdx
  __int64 result; // rax

  if ( !a1 )
    return 4294967294LL;
  if ( !*(_QWORD *)(a1 + 48) )
    return 4294967294LL;
  if ( !*(_QWORD *)(a1 + 56) )
    return 4294967294LL;
  v1 = *(_QWORD *)(a1 + 40);
  if ( !v1 || *(_QWORD *)v1 != a1 || (unsigned int)(*(_DWORD *)(v1 + 8) - 16180) > 0x1F )
    return 4294967294LL;
  *(_DWORD *)(v1 + 36) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 32) = 0LL;
  if ( *(_DWORD *)(v1 + 16) )
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v1 + 16) & 1;
  *(_QWORD *)(v1 + 8) = 16180LL;
  *(_QWORD *)(v1 + 136) = v1 + 1360;
  *(_QWORD *)(v1 + 104) = v1 + 1360;
  *(_QWORD *)(v1 + 96) = v1 + 1360;
  result = 0LL;
  *(_DWORD *)(v1 + 20) = 0;
  *(_DWORD *)(v1 + 24) = -1;
  *(_DWORD *)(v1 + 28) = 0x8000;
  *(_QWORD *)(v1 + 40) = 0LL;
  *(_QWORD *)(v1 + 72) = 0LL;
  *(_DWORD *)(v1 + 7136) = 1;
  *(_DWORD *)(v1 + 7140) = -1;
  return result;
}

//----- (000000018001E810) ----------------------------------------------------
__int64 __fastcall sub_18001E810(_QWORD *a1, int a2)
{
  int v2; // edi
  void (__fastcall *v4)(_QWORD); // r8
  __int64 v5; // rsi
  int v6; // ebp
  __int64 v7; // rcx

  v2 = a2;
  if ( !a1 )
    return 4294967294LL;
  if ( !a1[6] )
    return 4294967294LL;
  v4 = (void (__fastcall *)(_QWORD))a1[7];
  if ( !v4 )
    return 4294967294LL;
  v5 = a1[5];
  if ( !v5 || *(_QWORD **)v5 != a1 || (unsigned int)(*(_DWORD *)(v5 + 8) - 16180) > 0x1F )
    return 4294967294LL;
  if ( a2 >= 0 )
  {
    v6 = (a2 >> 4) + 5;
    if ( a2 < 48 )
      v2 = a2 & 0xF;
  }
  else
  {
    if ( a2 < -15 )
      return 4294967294LL;
    v6 = 0;
    v2 = -a2;
  }
  if ( v2 && (unsigned int)(v2 - 8) > 7 )
    return 4294967294LL;
  if ( *(_QWORD *)(v5 + 64) && *(_DWORD *)(v5 + 48) != v2 )
  {
    v4(a1[8]);
    *(_QWORD *)(v5 + 64) = 0LL;
  }
  *(_DWORD *)(v5 + 16) = v6;
  *(_DWORD *)(v5 + 48) = v2;
  if ( !a1[6] )
    return 4294967294LL;
  if ( !a1[7] )
    return 4294967294LL;
  v7 = a1[5];
  if ( !v7 || *(_QWORD **)v7 != a1 || (unsigned int)(*(_DWORD *)(v7 + 8) - 16180) > 0x1F )
    return 4294967294LL;
  *(_QWORD *)(v7 + 52) = 0LL;
  *(_DWORD *)(v7 + 60) = 0;
  return sub_18001E750((__int64)a1);
}

//----- (000000018001E940) ----------------------------------------------------
__int64 __fastcall sub_18001E940(_QWORD *a1, int a2, _BYTE *a3, int a4)
{
  __int64 v7; // rax
  __int64 v8; // rdi
  unsigned int v9; // esi

  if ( !a3 || *a3 != 49 || a4 != 88 )
    return 4294967290LL;
  if ( !a1 )
    return 4294967294LL;
  a1[4] = 0LL;
  if ( !a1[6] )
  {
    a1[8] = 0LL;
    a1[6] = sub_180020360;
  }
  if ( !a1[7] )
    a1[7] = __crt_internal_free_policy::operator()<wchar_t>;
  v7 = ((__int64 (__fastcall *)(_QWORD, __int64, __int64))a1[6])(a1[8], 1LL, 7152LL);
  v8 = v7;
  if ( !v7 )
    return 4294967292LL;
  a1[5] = v7;
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 64) = 0LL;
  *(_DWORD *)(v7 + 8) = 16180;
  v9 = sub_18001E810(a1, a2);
  if ( v9 )
  {
    ((void (__fastcall *)(_QWORD, __int64))a1[7])(a1[8], v8);
    a1[5] = 0LL;
  }
  return v9;
}
// 180020370: using guessed type __int64 __fastcall __crt_internal_free_policy::operator()<wchar_t>();

//----- (000000018001EA30) ----------------------------------------------------
__int64 __fastcall sub_18001EA30(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v3; // rbx
  __int64 v5; // rbp
  __int64 v6; // rax
  __int64 v8; // rdi
  unsigned int v9; // eax
  unsigned int v10; // edi
  unsigned int v11; // ebp
  int v12; // eax
  unsigned int v13; // eax

  v3 = *(_QWORD *)(a1 + 40);
  v5 = a3;
  if ( !*(_QWORD *)(v3 + 64) )
  {
    v6 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64))(a1 + 48))(
           *(_QWORD *)(a1 + 64),
           (unsigned int)(1 << *(_DWORD *)(v3 + 48)),
           1LL);
    *(_QWORD *)(v3 + 64) = v6;
    if ( !v6 )
      return 1LL;
  }
  if ( !*(_DWORD *)(v3 + 52) )
  {
    *(_DWORD *)(v3 + 52) = 1 << *(_DWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 56) = 0LL;
  }
  v8 = *(unsigned int *)(v3 + 52);
  if ( (unsigned int)v5 < (unsigned int)v8 )
  {
    v10 = v8 - *(_DWORD *)(v3 + 60);
    if ( v10 > (unsigned int)v5 )
      v10 = v5;
    memcpy((void *)(*(_QWORD *)(v3 + 64) + *(unsigned int *)(v3 + 60)), (const void *)(a2 - v5), v10);
    v11 = v5 - v10;
    if ( v11 )
    {
      memcpy(*(void **)(v3 + 64), (const void *)(a2 - v11), v11);
      v9 = *(_DWORD *)(v3 + 52);
      *(_DWORD *)(v3 + 60) = v11;
    }
    else
    {
      *(_DWORD *)(v3 + 60) += v10;
      v12 = *(_DWORD *)(v3 + 60);
      if ( v12 == *(_DWORD *)(v3 + 52) )
        v12 = 0;
      *(_DWORD *)(v3 + 60) = v12;
      v13 = *(_DWORD *)(v3 + 56);
      if ( v13 >= *(_DWORD *)(v3 + 52) )
        return 0LL;
      v9 = v10 + v13;
    }
  }
  else
  {
    memcpy(*(void **)(v3 + 64), (const void *)(a2 - v8), (unsigned int)v8);
    v9 = *(_DWORD *)(v3 + 52);
    *(_DWORD *)(v3 + 60) = 0;
  }
  *(_DWORD *)(v3 + 56) = v9;
  return 0LL;
}

//----- (000000018001EB30) ----------------------------------------------------
__int64 __fastcall sub_18001EB30(__int64 a1, int a2)
{
  __int64 v2; // rdi
  __int64 v3; // r13
  unsigned int v4; // r10d
  int v5; // edx
  _BYTE *v6; // r9
  unsigned int v7; // eax
  unsigned int v8; // esi
  unsigned __int8 *v9; // r14
  unsigned int v10; // r15d
  unsigned int i; // ebx
  unsigned int *v12; // r8
  int v13; // edx
  __int64 v14; // rax
  unsigned int v15; // ecx
  int *v16; // rcx
  int v17; // ecx
  __int64 v18; // rax
  int v19; // ecx
  __int64 v20; // rcx
  int v21; // ecx
  __int64 v22; // rax
  int v23; // ecx
  __int64 v24; // rax
  unsigned int v25; // ecx
  unsigned int v26; // edi
  __int64 v27; // rax
  __int64 v28; // r9
  unsigned int v29; // edx
  unsigned int v30; // ecx
  unsigned int v31; // ecx
  unsigned int v32; // edi
  __int64 v33; // rax
  int v34; // r12d
  __int64 v35; // rax
  __int64 v36; // rdx
  __int64 v37; // rcx
  __int64 v38; // rax
  unsigned int v39; // edi
  __int64 v40; // rax
  int v41; // r12d
  __int64 v42; // rax
  __int64 v43; // rdx
  __int64 v44; // rcx
  __int64 v45; // rax
  __int64 v46; // rcx
  int v47; // eax
  int v48; // ecx
  unsigned int v49; // ebx
  int v50; // eax
  unsigned int v51; // r15d
  int v52; // ecx
  int v53; // ecx
  unsigned int v54; // r12d
  char v55; // cl
  unsigned int v56; // r15d
  char v57; // dl
  unsigned int v58; // ecx
  int v59; // eax
  unsigned int v60; // edx
  __int16 v61; // cx
  unsigned int v62; // eax
  int v63; // eax
  unsigned int v64; // ecx
  unsigned int k; // edx
  int v66; // eax
  int v67; // edx
  int v68; // edx
  __int16 v69; // r8
  int v70; // eax
  unsigned int v71; // r15d
  unsigned int v72; // r15d
  unsigned int v73; // r8d
  const char *v74; // rax
  unsigned int v75; // r8d
  __int64 v76; // rax
  unsigned int v77; // r12d
  bool v78; // zf
  __int64 v79; // r11
  int v80; // eax
  unsigned int m; // eax
  unsigned int v82; // r10d
  char v83; // dl
  unsigned int v84; // edx
  int v85; // eax
  __int64 v86; // r11
  unsigned int n; // eax
  unsigned int v88; // r10d
  char v89; // dl
  unsigned int v90; // edx
  int v91; // eax
  __int64 v92; // rcx
  unsigned int v93; // ecx
  unsigned int v94; // eax
  __int64 v95; // rdx
  _BYTE *v96; // rdx
  unsigned int v97; // eax
  __int64 v98; // rdx
  unsigned int v99; // edx
  unsigned int v100; // ecx
  unsigned __int64 v101; // r8
  char *v102; // rdx
  int v103; // eax
  int v104; // ecx
  int v105; // edx
  __int64 result; // rax
  int v107; // ebx
  int v108; // eax
  unsigned int v109; // ebx
  int v110; // r10d
  unsigned int v111; // ecx
  char *v112; // rdx
  int v113; // eax
  int v114; // edx
  int v115; // r9d
  int v116; // r8d
  unsigned int *v117; // [rsp+20h] [rbp-60h]
  unsigned int v118; // [rsp+30h] [rbp-50h] BYREF
  int v119; // [rsp+34h] [rbp-4Ch]
  unsigned int j; // [rsp+38h] [rbp-48h]
  int v121; // [rsp+3Ch] [rbp-44h]
  _BYTE *v122; // [rsp+40h] [rbp-40h]
  unsigned int v125; // [rsp+B0h] [rbp+30h]
  unsigned int v126; // [rsp+B8h] [rbp+38h]

  v2 = a1;
  if ( !a1 )
    return 4294967294LL;
  if ( !*(_QWORD *)(a1 + 48) )
    return 4294967294LL;
  if ( !*(_QWORD *)(a1 + 56) )
    return 4294967294LL;
  v3 = *(_QWORD *)(a1 + 40);
  if ( !v3
    || *(_QWORD *)v3 != a1
    || (unsigned int)(*(_DWORD *)(v3 + 8) - 16180) > 0x1F
    || !*(_QWORD *)(a1 + 16)
    || !*(_QWORD *)a1 && *(_DWORD *)(a1 + 8) )
  {
    return 4294967294LL;
  }
  if ( *(_DWORD *)(v3 + 8) == 16191 )
    *(_DWORD *)(v3 + 8) = 16192;
  v4 = *(_DWORD *)(a1 + 24);
  v5 = v4;
  v6 = *(_BYTE **)(a1 + 16);
  v7 = *(_DWORD *)(v3 + 8) - 16180;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(unsigned __int8 **)a1;
  v10 = *(_DWORD *)(v3 + 72);
  i = *(_DWORD *)(v3 + 76);
  v122 = v6;
  v126 = v4;
  v121 = v8;
  v119 = v4;
  v125 = 0;
  while ( 2 )
  {
    v12 = (unsigned int *)(v3 + 112);
    switch ( v7 )
    {
      case 0u:
        v13 = *(_DWORD *)(v3 + 16);
        if ( !v13 )
        {
          *(_DWORD *)(v3 + 8) = 16192;
          goto LABEL_26;
        }
        for ( ; i < 0x10; i += 8 )
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
        }
        if ( (v13 & 2) != 0 && v10 == 35615 )
        {
          if ( !*(_DWORD *)(v3 + 48) )
            *(_DWORD *)(v3 + 48) = 15;
          *(_DWORD *)(v3 + 32) = 0;
          LOWORD(v118) = -29921;
          *(_DWORD *)(v3 + 32) = sub_180021060(0, (char *)&v118, 2uLL);
          v10 = 0;
          i = 0;
          *(_DWORD *)(v3 + 8) = 16181;
          goto LABEL_24;
        }
        v14 = *(_QWORD *)(v3 + 40);
        if ( v14 )
          *(_DWORD *)(v14 + 64) = -1;
        if ( (*(_BYTE *)(v3 + 16) & 1) != 0
          && (v10 >> 8) + ((unsigned __int8)v10 << 8) == 31 * (((v10 >> 8) + ((unsigned __int8)v10 << 8)) / 0x1F) )
        {
          if ( (v10 & 0xF) != 8 )
            goto LABEL_33;
          v10 >>= 4;
          i -= 4;
          v15 = (v10 & 0xF) + 8;
          if ( !*(_DWORD *)(v3 + 48) )
            *(_DWORD *)(v3 + 48) = v15;
          if ( v15 > 0xF || v15 > *(_DWORD *)(v3 + 48) )
          {
            *(_QWORD *)(v2 + 32) = "invalid window size";
            *(_DWORD *)(v3 + 8) = 16209;
          }
          else
          {
            *(_DWORD *)(v3 + 28) = 1 << v15;
            *(_DWORD *)(v3 + 24) = 0;
            *(_DWORD *)(v3 + 32) = 1;
            i = 0;
            *(_DWORD *)(v2 + 76) = 1;
            *(_DWORD *)(v3 + 8) = ~BYTE1(v10) & 2 | 0x3F3D;
            v10 = 0;
          }
        }
        else
        {
          *(_QWORD *)(v2 + 32) = "incorrect header check";
          *(_DWORD *)(v3 + 8) = 16209;
        }
        goto LABEL_26;
      case 1u:
        if ( i >= 0x10 )
          goto LABEL_44;
        do
        {
          if ( !v8 )
          {
            v77 = v125;
            v52 = a2;
            goto LABEL_334;
          }
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        while ( i < 0x10 );
LABEL_44:
        *(_DWORD *)(v3 + 24) = v10;
        if ( (_BYTE)v10 != 8 )
        {
LABEL_33:
          *(_QWORD *)(v2 + 32) = "unknown compression method";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_26;
        }
        if ( (v10 & 0xE000) != 0 )
        {
          *(_QWORD *)(v2 + 32) = "unknown header flags set";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_26;
        }
        v16 = *(int **)(v3 + 40);
        if ( v16 )
          *v16 = (v10 >> 8) & 1;
        if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
        {
          v17 = *(_DWORD *)(v3 + 32);
          LOWORD(v118) = v10;
          *(_DWORD *)(v3 + 32) = sub_180021060(v17, (char *)&v118, 2uLL);
        }
        v10 = 0;
        *(_DWORD *)(v3 + 8) = 16182;
        for ( i = 0; i < 0x20; i += 8 )
        {
LABEL_54:
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
        }
LABEL_56:
        v18 = *(_QWORD *)(v3 + 40);
        if ( v18 )
          *(_DWORD *)(v18 + 4) = v10;
        if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
        {
          v19 = *(_DWORD *)(v3 + 32);
          v118 = v10;
          *(_DWORD *)(v3 + 32) = sub_180021060(v19, (char *)&v118, 4uLL);
        }
        v10 = 0;
        *(_DWORD *)(v3 + 8) = 16183;
        for ( i = 0; i < 0x10; i += 8 )
        {
LABEL_63:
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
        }
LABEL_65:
        v20 = *(_QWORD *)(v3 + 40);
        if ( v20 )
        {
          *(_DWORD *)(v20 + 8) = (unsigned __int8)v10;
          *(_DWORD *)(*(_QWORD *)(v3 + 40) + 12LL) = v10 >> 8;
        }
        if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
        {
          v21 = *(_DWORD *)(v3 + 32);
          LOWORD(v118) = v10;
          *(_DWORD *)(v3 + 32) = sub_180021060(v21, (char *)&v118, 2uLL);
        }
        v10 = 0;
        *(_DWORD *)(v3 + 8) = 16184;
        i = 0;
LABEL_71:
        if ( (*(_DWORD *)(v3 + 24) & 0x400) != 0 )
        {
          if ( i < 0x10 )
          {
            while ( v8 )
            {
              --v8;
              v10 += *v9++ << i;
              i += 8;
              if ( i >= 0x10 )
                goto LABEL_75;
            }
            goto LABEL_332;
          }
LABEL_75:
          v22 = *(_QWORD *)(v3 + 40);
          *(_DWORD *)(v3 + 80) = v10;
          if ( v22 )
            *(_DWORD *)(v22 + 24) = v10;
          if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
          {
            v23 = *(_DWORD *)(v3 + 32);
            LOWORD(v118) = v10;
            *(_DWORD *)(v3 + 32) = sub_180021060(v23, (char *)&v118, 2uLL);
          }
          v10 = 0;
          i = 0;
        }
        else
        {
          v24 = *(_QWORD *)(v3 + 40);
          if ( v24 )
            *(_QWORD *)(v24 + 16) = 0LL;
        }
        *(_DWORD *)(v3 + 8) = 16185;
LABEL_84:
        if ( (*(_DWORD *)(v3 + 24) & 0x400) != 0 )
        {
          v25 = *(_DWORD *)(v3 + 80);
          v26 = v25;
          if ( v25 > v8 )
            v26 = v8;
          if ( v26 )
          {
            v27 = *(_QWORD *)(v3 + 40);
            if ( v27 )
            {
              v28 = *(_QWORD *)(v27 + 16);
              if ( v28 )
              {
                v29 = *(_DWORD *)(v27 + 24) - v25;
                v30 = *(_DWORD *)(v27 + 28);
                if ( v29 < v30 )
                {
                  if ( v26 + v29 <= v30 )
                    v31 = v26;
                  else
                    v31 = v30 - v29;
                  memcpy((void *)(v28 + v29), v9, v31);
                }
              }
            }
            if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
              *(_DWORD *)(v3 + 32) = sub_180021060(*(_DWORD *)(v3 + 32), (char *)v9, v26);
            v8 -= v26;
            v9 += v26;
            *(_DWORD *)(v3 + 80) -= v26;
          }
          if ( *(_DWORD *)(v3 + 80) )
            goto LABEL_332;
        }
        *(_DWORD *)(v3 + 80) = 0;
        *(_DWORD *)(v3 + 8) = 16186;
LABEL_101:
        if ( (*(_DWORD *)(v3 + 24) & 0x800) != 0 )
        {
          if ( !v8 )
            goto LABEL_332;
          v32 = 0;
          do
          {
            v33 = v32++;
            v34 = v9[v33];
            v35 = *(_QWORD *)(v3 + 40);
            if ( v35 )
            {
              v36 = *(_QWORD *)(v35 + 32);
              if ( v36 )
              {
                v37 = *(unsigned int *)(v3 + 80);
                if ( (unsigned int)v37 < *(_DWORD *)(v35 + 40) )
                {
                  *(_BYTE *)(v37 + v36) = v34;
                  ++*(_DWORD *)(v3 + 80);
                }
              }
            }
          }
          while ( v34 && v32 < v8 );
          if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
            *(_DWORD *)(v3 + 32) = sub_180021060(*(_DWORD *)(v3 + 32), (char *)v9, v32);
          v8 -= v32;
          v9 += v32;
          if ( v34 )
            goto LABEL_332;
        }
        else
        {
          v38 = *(_QWORD *)(v3 + 40);
          if ( v38 )
            *(_QWORD *)(v38 + 32) = 0LL;
        }
        *(_DWORD *)(v3 + 80) = 0;
        *(_DWORD *)(v3 + 8) = 16187;
LABEL_118:
        if ( (*(_DWORD *)(v3 + 24) & 0x1000) != 0 )
        {
          if ( !v8 )
            goto LABEL_332;
          v39 = 0;
          do
          {
            v40 = v39++;
            v41 = v9[v40];
            v42 = *(_QWORD *)(v3 + 40);
            if ( v42 )
            {
              v43 = *(_QWORD *)(v42 + 48);
              if ( v43 )
              {
                v44 = *(unsigned int *)(v3 + 80);
                if ( (unsigned int)v44 < *(_DWORD *)(v42 + 56) )
                {
                  *(_BYTE *)(v44 + v43) = v41;
                  ++*(_DWORD *)(v3 + 80);
                }
              }
            }
          }
          while ( v41 && v39 < v8 );
          if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 && (*(_BYTE *)(v3 + 16) & 4) != 0 )
            *(_DWORD *)(v3 + 32) = sub_180021060(*(_DWORD *)(v3 + 32), (char *)v9, v39);
          v8 -= v39;
          v9 += v39;
          if ( v41 )
            goto LABEL_332;
        }
        else
        {
          v45 = *(_QWORD *)(v3 + 40);
          if ( v45 )
            *(_QWORD *)(v45 + 48) = 0LL;
        }
        v2 = a1;
        v6 = v122;
        v4 = v126;
        *(_DWORD *)(v3 + 8) = 16188;
LABEL_135:
        if ( (*(_DWORD *)(v3 + 24) & 0x200) != 0 )
        {
          if ( i < 0x10 )
          {
            while ( v8 )
            {
              --v8;
              v10 += *v9++ << i;
              i += 8;
              if ( i >= 0x10 )
                goto LABEL_139;
            }
            goto LABEL_332;
          }
LABEL_139:
          if ( (*(_BYTE *)(v3 + 16) & 4) != 0 && v10 != *(unsigned __int16 *)(v3 + 32) )
          {
            *(_QWORD *)(v2 + 32) = "header crc mismatch";
            *(_DWORD *)(v3 + 8) = 16209;
            goto LABEL_26;
          }
          v10 = 0;
          i = 0;
        }
        v46 = *(_QWORD *)(v3 + 40);
        if ( v46 )
        {
          *(_DWORD *)(v46 + 60) = (*(int *)(v3 + 24) >> 9) & 1;
          *(_DWORD *)(*(_QWORD *)(v3 + 40) + 64LL) = 1;
        }
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v2 + 76) = 0;
LABEL_146:
        *(_DWORD *)(v3 + 8) = 16191;
LABEL_26:
        v7 = *(_DWORD *)(v3 + 8) - 16180;
        if ( v7 <= 0x1E )
        {
          v5 = v119;
          continue;
        }
        return 4294967294LL;
      case 2u:
        if ( i < 0x20 )
          goto LABEL_54;
        goto LABEL_56;
      case 3u:
        if ( i < 0x10 )
          goto LABEL_63;
        goto LABEL_65;
      case 4u:
        goto LABEL_71;
      case 5u:
        goto LABEL_84;
      case 6u:
        goto LABEL_101;
      case 7u:
        goto LABEL_118;
      case 8u:
        goto LABEL_135;
      case 9u:
        if ( i >= 0x20 )
          goto LABEL_150;
        do
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        while ( i < 0x20 );
LABEL_150:
        i = 0;
        v47 = HIBYTE(v10) + (((v10 << 16) + (v10 & 0xFF00)) << 8) + ((v10 >> 8) & 0xFF00);
        v10 = 0;
        *(_DWORD *)(v3 + 32) = v47;
        *(_DWORD *)(v2 + 76) = v47;
        *(_DWORD *)(v3 + 8) = 16190;
LABEL_151:
        if ( !*(_DWORD *)(v3 + 20) )
        {
          *(_QWORD *)(v2 + 16) = v6;
          result = 2LL;
          *(_DWORD *)(v2 + 24) = v4;
          *(_QWORD *)v2 = v9;
          *(_DWORD *)(v2 + 8) = v8;
          *(_DWORD *)(v3 + 72) = v10;
          *(_DWORD *)(v3 + 76) = i;
          return result;
        }
        *(_DWORD *)(v3 + 32) = 1;
        *(_DWORD *)(v2 + 76) = 1;
        *(_DWORD *)(v3 + 8) = 16191;
LABEL_153:
        if ( (unsigned int)(a2 - 5) <= 1 )
          goto LABEL_332;
LABEL_154:
        if ( *(_DWORD *)(v3 + 12) )
        {
          *(_DWORD *)(v3 + 8) = 16206;
          v48 = i & 7;
          v10 >>= v48;
          i -= v48;
          goto LABEL_26;
        }
        for ( ; i < 3; i += 8 )
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
        }
        v49 = i - 1;
        v50 = v10 & 1;
        v51 = v10 >> 1;
        *(_DWORD *)(v3 + 12) = v50;
        if ( (v51 & 3) == 0 )
        {
          *(_DWORD *)(v3 + 8) = 16193;
          goto LABEL_168;
        }
        if ( (v51 & 3) != 1 )
        {
          if ( (v51 & 3) == 2 )
          {
            v10 = v51 >> 2;
            i = v49 - 2;
            *(_DWORD *)(v3 + 8) = 16196;
            goto LABEL_26;
          }
          if ( (v51 & 3) == 3 )
          {
            v10 = v51 >> 2;
            *(_QWORD *)(v2 + 32) = "invalid block type";
            i = v49 - 2;
            *(_DWORD *)(v3 + 8) = 16209;
            goto LABEL_26;
          }
          goto LABEL_168;
        }
        v52 = a2;
        *(_QWORD *)(v3 + 96) = &unk_1800254E0;
        *(_QWORD *)(v3 + 104) = &unk_180025CE0;
        *v12 = 9;
        *(_DWORD *)(v3 + 116) = 5;
        *(_DWORD *)(v3 + 8) = 16199;
        if ( a2 != 6 )
        {
LABEL_168:
          v10 = v51 >> 2;
          i = v49 - 2;
          goto LABEL_26;
        }
        v10 = v51 >> 2;
        i = v49 - 2;
LABEL_333:
        v77 = v125;
LABEL_334:
        *(_QWORD *)(a1 + 16) = v122;
        *(_DWORD *)(a1 + 24) = v126;
        *(_QWORD *)a1 = v9;
        *(_DWORD *)(a1 + 8) = v8;
        v78 = *(_DWORD *)(v3 + 52) == 0;
        *(_DWORD *)(v3 + 76) = i;
        v107 = v119;
        *(_DWORD *)(v3 + 72) = v10;
        if ( v78
          && (v107 == *(_DWORD *)(a1 + 24) || (v108 = *(_DWORD *)(v3 + 8), v108 >= 16209) || v108 >= 16206 && v52 == 4)
          || !(unsigned int)sub_18001EA30(a1, *(_QWORD *)(a1 + 16), v107 - *(_DWORD *)(a1 + 24)) )
        {
          v109 = v107 - *(_DWORD *)(a1 + 24);
          v110 = v121 - *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 12) += v110;
          *(_DWORD *)(a1 + 28) += v109;
          *(_DWORD *)(v3 + 36) += v109;
          v78 = (*(_BYTE *)(v3 + 16) & 4) == 0;
          v121 = v110;
          if ( !v78 && v109 )
          {
            v111 = *(_DWORD *)(v3 + 32);
            v112 = (char *)(*(_QWORD *)(a1 + 16) - v109);
            if ( *(_DWORD *)(v3 + 24) )
              v113 = sub_180021060(v111, v112, v109);
            else
              v113 = sub_180020380(v111, (unsigned __int8 *)v112, v109);
            v110 = v121;
            *(_DWORD *)(v3 + 32) = v113;
            *(_DWORD *)(a1 + 76) = v113;
          }
          v114 = *(_DWORD *)(v3 + 8);
          if ( v114 == 16199 || v114 == 16194 )
          {
            v116 = 256;
            v115 = 0;
          }
          else
          {
            v115 = 0;
            v116 = 0;
          }
          if ( v114 == 16191 )
            v115 = 128;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(v3 + 76) + v116 + (*(_DWORD *)(v3 + 12) != 0 ? 0x40 : 0) + v115;
          if ( (!v110 && !v109 || a2 == 4) && !v77 )
            return (unsigned int)-5;
          return v77;
        }
        else
        {
          *(_DWORD *)(v3 + 8) = 16210;
          return 4294967292LL;
        }
      case 0xAu:
        goto LABEL_151;
      case 0xBu:
        goto LABEL_153;
      case 0xCu:
        goto LABEL_154;
      case 0xDu:
        v53 = i & 7;
        v10 >>= v53;
        i -= v53;
        if ( i >= 0x20 )
          goto LABEL_172;
        do
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        while ( i < 0x20 );
LABEL_172:
        if ( (unsigned __int16)v10 != ~v10 >> 16 )
        {
          *(_QWORD *)(v2 + 32) = "invalid stored block lengths";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_26;
        }
        *(_DWORD *)(v3 + 80) = (unsigned __int16)v10;
        v10 = 0;
        v52 = a2;
        i = 0;
        *(_DWORD *)(v3 + 8) = 16194;
        if ( a2 == 6 )
          goto LABEL_333;
LABEL_175:
        *(_DWORD *)(v3 + 8) = 16195;
LABEL_176:
        v54 = *(_DWORD *)(v3 + 80);
        if ( !v54 )
          goto LABEL_146;
        if ( v54 > v8 )
          v54 = v8;
        if ( v54 > v4 )
          v54 = v4;
        if ( !v54 )
          goto LABEL_332;
        memcpy(v6, v9, v54);
        v9 += v54;
        v4 = v126 - v54;
        v6 = &v122[v54];
        v126 -= v54;
        v2 = a1;
        v8 -= v54;
        *(_DWORD *)(v3 + 80) -= v54;
        v122 = v6;
        goto LABEL_26;
      case 0xEu:
        goto LABEL_175;
      case 0xFu:
        goto LABEL_176;
      case 0x10u:
        if ( i >= 0xE )
          goto LABEL_186;
        do
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        while ( i < 0xE );
LABEL_186:
        v55 = v10;
        i -= 14;
        v56 = v10 >> 5;
        v57 = v56;
        v58 = (v55 & 0x1F) + 257;
        v56 >>= 5;
        *(_DWORD *)(v3 + 124) = v58;
        v59 = v56 & 0xF;
        v10 = v56 >> 4;
        v60 = (v57 & 0x1F) + 1;
        *(_DWORD *)(v3 + 128) = v60;
        *(_DWORD *)(v3 + 120) = v59 + 4;
        if ( v58 > 0x11E || v60 > 0x1E )
        {
          *(_QWORD *)(v2 + 32) = "too many length or distance symbols";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_26;
        }
        *(_DWORD *)(v3 + 132) = 0;
        *(_DWORD *)(v3 + 8) = 16197;
LABEL_189:
        while ( *(_DWORD *)(v3 + 132) < *(_DWORD *)(v3 + 120) )
        {
          for ( ; i < 3; i += 8 )
          {
            if ( !v8 )
              goto LABEL_332;
            --v8;
            v10 += *v9++ << i;
          }
          v61 = v10 & 7;
          v10 >>= 3;
          i -= 3;
          *(_WORD *)(v3 + 2LL * (unsigned __int16)word_180025D60[(*(_DWORD *)(v3 + 132))++] + 144) = v61;
        }
        for ( ; *(_DWORD *)(v3 + 132) < 0x13u; ++*(_DWORD *)(v3 + 132) )
          *(_WORD *)(v3 + 2LL * (unsigned __int16)word_180025D60[*(unsigned int *)(v3 + 132)] + 144) = 0;
        *v12 = 7;
        *(_QWORD *)(v3 + 96) = v3 + 1360;
        *(_QWORD *)(v3 + 136) = v3 + 1360;
        v62 = sub_180020660(
                0,
                (unsigned __int16 *)(v3 + 144),
                0x13u,
                (_DWORD **)(v3 + 136),
                (unsigned int *)(v3 + 112),
                (_WORD *)(v3 + 784));
        v4 = v126;
        v125 = v62;
        if ( v62 )
        {
          *(_QWORD *)(v2 + 32) = "invalid code lengths set";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_25;
        }
        *(_DWORD *)(v3 + 132) = 0;
        v12 = (unsigned int *)(v3 + 112);
        *(_DWORD *)(v3 + 8) = 16198;
LABEL_200:
        if ( *(_DWORD *)(v3 + 132) < (unsigned int)(*(_DWORD *)(v3 + 124) + *(_DWORD *)(v3 + 128)) )
        {
          do
          {
            v63 = *(_DWORD *)(*(_QWORD *)(v3 + 96) + 4LL * (v10 & ((1 << *v12) - 1)));
            for ( j = v63; BYTE1(v63) > i; j = v63 )
            {
              if ( !v8 )
                goto LABEL_332;
              --v8;
              v10 += *v9++ << i;
              i += 8;
              v63 = *(_DWORD *)(*(_QWORD *)(v3 + 96) + 4LL * (v10 & ((1 << *v12) - 1)));
            }
            if ( HIWORD(v63) >= 0x10u )
            {
              if ( HIWORD(v63) == 16 )
              {
                for ( k = BYTE1(v63) + 2; i < k; i += 8 )
                {
                  if ( !v8 )
                    goto LABEL_332;
                  --v8;
                  v10 += *v9++ << i;
                }
                v66 = *(_DWORD *)(v3 + 132);
                i -= BYTE1(j);
                v10 >>= SBYTE1(j);
                if ( !v66 )
                {
LABEL_229:
                  *(_QWORD *)(v2 + 32) = "invalid bit length repeat";
                  *(_DWORD *)(v3 + 8) = 16209;
                  goto LABEL_25;
                }
                v67 = v10 & 3;
                v10 >>= 2;
                v68 = v67 + 3;
                i -= 2;
                v69 = *(_WORD *)(v3 + 2LL * (unsigned int)(v66 - 1) + 144);
              }
              else
              {
                if ( HIWORD(j) == 17 )
                {
                  for ( ; i < (unsigned int)BYTE1(j) + 3; i += 8 )
                  {
                    if ( !v8 )
                      goto LABEL_332;
                    --v8;
                    v10 += *v9++ << i;
                  }
                  v70 = -3;
                  v71 = v10 >> SBYTE1(j);
                  v68 = (v71 & 7) + 3;
                  v10 = v71 >> 3;
                }
                else
                {
                  for ( ; i < (unsigned int)BYTE1(j) + 7; i += 8 )
                  {
                    if ( !v8 )
                      goto LABEL_332;
                    --v8;
                    v10 += *v9++ << i;
                  }
                  v70 = -7;
                  v72 = v10 >> SBYTE1(j);
                  v68 = (v72 & 0x7F) + 11;
                  v10 = v72 >> 7;
                }
                v69 = 0;
                i += v70 - BYTE1(j);
              }
              if ( v68 + *(_DWORD *)(v3 + 132) > (unsigned int)(*(_DWORD *)(v3 + 124) + *(_DWORD *)(v3 + 128)) )
                goto LABEL_229;
              do
              {
                *(_WORD *)(v3 + 2LL * (unsigned int)(*(_DWORD *)(v3 + 132))++ + 144) = v69;
                v64 = *(_DWORD *)(v3 + 132);
                --v68;
              }
              while ( v68 );
              v12 = (unsigned int *)(v3 + 112);
            }
            else
            {
              i -= BYTE1(v63);
              v10 >>= SBYTE1(v63);
              *(_WORD *)(v3 + 2LL * (unsigned int)(*(_DWORD *)(v3 + 132))++ + 144) = HIWORD(v63);
              v64 = *(_DWORD *)(v3 + 132);
            }
          }
          while ( v64 < *(_DWORD *)(v3 + 124) + *(_DWORD *)(v3 + 128) );
        }
        if ( *(_DWORD *)(v3 + 8) == 16209 )
          goto LABEL_25;
        if ( !*(_WORD *)(v3 + 656) )
        {
          *(_QWORD *)(v2 + 32) = "invalid code -- missing end-of-block";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_25;
        }
        *v12 = 9;
        *(_QWORD *)(v3 + 136) = v3 + 1360;
        v117 = v12;
        v73 = *(_DWORD *)(v3 + 124);
        *(_QWORD *)(v3 + 96) = v3 + 1360;
        v125 = sub_180020660(1, (unsigned __int16 *)(v3 + 144), v73, (_DWORD **)(v3 + 136), v117, (_WORD *)(v3 + 784));
        if ( v125 )
        {
          v74 = "invalid literal/lengths set";
LABEL_232:
          v2 = a1;
          *(_QWORD *)(a1 + 32) = v74;
          *(_DWORD *)(v3 + 8) = 16209;
LABEL_24:
          v4 = v126;
LABEL_25:
          v6 = v122;
          goto LABEL_26;
        }
        v75 = *(_DWORD *)(v3 + 128);
        *(_QWORD *)(v3 + 104) = *(_QWORD *)(v3 + 136);
        v76 = *(unsigned int *)(v3 + 124);
        *(_DWORD *)(v3 + 116) = 6;
        v125 = sub_180020660(
                 2,
                 (unsigned __int16 *)(v3 + 2 * v76 + 144),
                 v75,
                 (_DWORD **)(v3 + 136),
                 (unsigned int *)(v3 + 116),
                 (_WORD *)(v3 + 784));
        v77 = v125;
        if ( v125 )
        {
          v74 = "invalid distances set";
          goto LABEL_232;
        }
        v52 = a2;
        *(_DWORD *)(v3 + 8) = 16199;
        if ( a2 == 6 )
          goto LABEL_334;
        v2 = a1;
        v12 = (unsigned int *)(v3 + 112);
        v6 = v122;
        v5 = v119;
        v4 = v126;
LABEL_237:
        *(_DWORD *)(v3 + 8) = 16200;
LABEL_238:
        if ( v8 >= 6 && v4 >= 0x102 )
        {
          *(_QWORD *)(v2 + 16) = v6;
          *(_DWORD *)(v2 + 24) = v4;
          *(_QWORD *)v2 = v9;
          *(_DWORD *)(v2 + 8) = v8;
          *(_DWORD *)(v3 + 72) = v10;
          *(_DWORD *)(v3 + 76) = i;
          sub_180020B70((unsigned __int8 **)v2, v5);
          v78 = *(_DWORD *)(v3 + 8) == 16191;
          v6 = *(_BYTE **)(v2 + 16);
          v4 = *(_DWORD *)(v2 + 24);
          v9 = *(unsigned __int8 **)v2;
          v8 = *(_DWORD *)(v2 + 8);
          v10 = *(_DWORD *)(v3 + 72);
          i = *(_DWORD *)(v3 + 76);
          v122 = v6;
          v126 = v4;
          if ( v78 )
            *(_DWORD *)(v3 + 7140) = -1;
          goto LABEL_26;
        }
        v79 = *(_QWORD *)(v3 + 96);
        v80 = 1 << *v12;
        *(_DWORD *)(v3 + 7140) = 0;
        for ( m = *(_DWORD *)(v79 + 4LL * (v10 & (v80 - 1)));
              BYTE1(m) > i;
              m = *(_DWORD *)(*(_QWORD *)(v3 + 96) + 4LL * (v10 & ((1 << *v12) - 1))) )
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        if ( (_BYTE)m && (m & 0xF0) == 0 )
        {
          v82 = m >> 8;
          v83 = m;
          j = m;
          m = *(_DWORD *)(v79 + 4LL * (HIWORD(m) + ((v10 & ((1 << (BYTE1(m) + m)) - 1)) >> SBYTE1(m))));
          if ( (unsigned __int8)v82 + (unsigned int)BYTE1(m) > i )
          {
            do
            {
              if ( !v8 )
                goto LABEL_332;
              v10 += *v9 << i;
              --v8;
              ++v9;
              i += 8;
              m = *(_DWORD *)(*(_QWORD *)(v3 + 96)
                            + 4LL * (HIWORD(j) + ((v10 & ((1 << (BYTE1(j) + v83)) - 1)) >> SBYTE1(j))));
            }
            while ( BYTE1(j) + (unsigned int)BYTE1(m) > i );
          }
          v10 >>= SBYTE1(j);
          i -= BYTE1(j);
          *(_DWORD *)(v3 + 7140) = BYTE1(j);
        }
        *(_DWORD *)(v3 + 7140) += BYTE1(m);
        i -= BYTE1(m);
        v10 >>= SBYTE1(m);
        *(_DWORD *)(v3 + 80) = HIWORD(m);
        if ( !(_BYTE)m )
        {
          *(_DWORD *)(v3 + 8) = 16205;
          goto LABEL_24;
        }
        if ( (m & 0x20) != 0 )
        {
          *(_DWORD *)(v3 + 7140) = -1;
          *(_DWORD *)(v3 + 8) = 16191;
          goto LABEL_24;
        }
        if ( (m & 0x40) != 0 )
        {
          *(_QWORD *)(v2 + 32) = "invalid literal/length code";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_24;
        }
        *(_DWORD *)(v3 + 8) = 16201;
        *(_DWORD *)(v3 + 88) = m & 0xF;
LABEL_258:
        v84 = *(_DWORD *)(v3 + 88);
        if ( v84 )
        {
          for ( ; i < v84; i += 8 )
          {
            if ( !v8 )
              goto LABEL_332;
            --v8;
            v10 += *v9++ << i;
          }
          i -= v84;
          v85 = v10 & ((1 << v84) - 1);
          v10 >>= v84;
          *(_DWORD *)(v3 + 80) += v85;
          *(_DWORD *)(v3 + 7140) += v84;
        }
        *(_DWORD *)(v3 + 7144) = *(_DWORD *)(v3 + 80);
        *(_DWORD *)(v3 + 8) = 16202;
LABEL_264:
        v86 = *(_QWORD *)(v3 + 104);
        for ( n = *(_DWORD *)(v86 + 4LL * (v10 & ((1 << *(_DWORD *)(v3 + 116)) - 1)));
              BYTE1(n) > i;
              n = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 4LL * (v10 & ((1 << *(_DWORD *)(v3 + 116)) - 1))) )
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        if ( (n & 0xF0) == 0 )
        {
          v88 = n >> 8;
          v89 = n;
          j = n;
          n = *(_DWORD *)(v86 + 4LL * (HIWORD(n) + ((v10 & ((1 << (BYTE1(n) + n)) - 1)) >> SBYTE1(n))));
          if ( (unsigned __int8)v88 + (unsigned int)BYTE1(n) > i )
          {
            do
            {
              if ( !v8 )
                goto LABEL_332;
              v10 += *v9 << i;
              --v8;
              ++v9;
              i += 8;
              n = *(_DWORD *)(*(_QWORD *)(v3 + 104)
                            + 4LL * (HIWORD(j) + ((v10 & ((1 << (BYTE1(j) + v89)) - 1)) >> SBYTE1(j))));
            }
            while ( BYTE1(j) + (unsigned int)BYTE1(n) > i );
          }
          v10 >>= SBYTE1(j);
          i -= BYTE1(j);
          *(_DWORD *)(v3 + 7140) += BYTE1(j);
        }
        v6 = v122;
        v4 = v126;
        *(_DWORD *)(v3 + 7140) += BYTE1(n);
        i -= BYTE1(n);
        v10 >>= SBYTE1(n);
        if ( (n & 0x40) != 0 )
        {
          *(_QWORD *)(v2 + 32) = "invalid distance code";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_26;
        }
        *(_DWORD *)(v3 + 8) = 16203;
        *(_DWORD *)(v3 + 84) = HIWORD(n);
        *(_DWORD *)(v3 + 88) = n & 0xF;
LABEL_275:
        v90 = *(_DWORD *)(v3 + 88);
        if ( v90 )
        {
          for ( ; i < v90; i += 8 )
          {
            if ( !v8 )
              goto LABEL_332;
            --v8;
            v10 += *v9++ << i;
          }
          i -= v90;
          v91 = v10 & ((1 << v90) - 1);
          v10 >>= v90;
          *(_DWORD *)(v3 + 84) += v91;
          *(_DWORD *)(v3 + 7140) += v90;
        }
        v5 = v119;
        *(_DWORD *)(v3 + 8) = 16204;
LABEL_281:
        if ( !v4 )
        {
LABEL_332:
          v52 = a2;
          goto LABEL_333;
        }
        v92 = *(unsigned int *)(v3 + 84);
        if ( (unsigned int)v92 <= v5 - v4 )
        {
          v97 = *(_DWORD *)(v3 + 80);
          v96 = &v6[-v92];
        }
        else
        {
          v93 = v92 - (v5 - v4);
          if ( v93 > *(_DWORD *)(v3 + 56) && *(_DWORD *)(v3 + 7136) )
          {
            *(_QWORD *)(v2 + 32) = "invalid distance too far back";
            *(_DWORD *)(v3 + 8) = 16209;
            goto LABEL_26;
          }
          v94 = *(_DWORD *)(v3 + 60);
          if ( v93 <= v94 )
          {
            v95 = v94 - v93;
          }
          else
          {
            v93 -= v94;
            v95 = *(_DWORD *)(v3 + 52) - v93;
          }
          v96 = (_BYTE *)(*(_QWORD *)(v3 + 64) + v95);
          v97 = *(_DWORD *)(v3 + 80);
          if ( v93 <= v97 )
            goto LABEL_293;
        }
        v93 = v97;
LABEL_293:
        if ( v93 > v4 )
          v93 = v4;
        v4 -= v93;
        v126 = v4;
        v98 = v96 - v6;
        *(_DWORD *)(v3 + 80) = v97 - v93;
        do
        {
          *v6 = v6[v98];
          ++v6;
          --v93;
        }
        while ( v93 );
        v122 = v6;
        if ( !*(_DWORD *)(v3 + 80) )
          *(_DWORD *)(v3 + 8) = 16200;
        goto LABEL_26;
      case 0x11u:
        goto LABEL_189;
      case 0x12u:
        goto LABEL_200;
      case 0x13u:
        goto LABEL_237;
      case 0x14u:
        goto LABEL_238;
      case 0x15u:
        goto LABEL_258;
      case 0x16u:
        goto LABEL_264;
      case 0x17u:
        goto LABEL_275;
      case 0x18u:
        goto LABEL_281;
      case 0x19u:
        if ( !v4 )
          goto LABEL_332;
        *v6++ = *(_BYTE *)(v3 + 80);
        --v4;
        v122 = v6;
        v126 = v4;
        *(_DWORD *)(v3 + 8) = 16200;
        goto LABEL_26;
      case 0x1Au:
        if ( !*(_DWORD *)(v3 + 16) )
          goto LABEL_317;
        if ( i >= 0x20 )
          goto LABEL_305;
        do
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
          i += 8;
        }
        while ( i < 0x20 );
LABEL_305:
        v99 = v5 - v4;
        *(_DWORD *)(v2 + 28) += v99;
        *(_DWORD *)(v3 + 36) += v99;
        if ( (*(_BYTE *)(v3 + 16) & 4) != 0 && v99 )
        {
          v100 = *(_DWORD *)(v3 + 32);
          v101 = v99;
          v102 = &v6[-v99];
          if ( *(_DWORD *)(v3 + 24) )
            v103 = sub_180021060(v100, v102, v101);
          else
            v103 = sub_180020380(v100, (unsigned __int8 *)v102, v101);
          v6 = v122;
          v4 = v126;
          *(_DWORD *)(v3 + 32) = v103;
          *(_DWORD *)(v2 + 76) = v103;
        }
        v78 = (*(_BYTE *)(v3 + 16) & 4) == 0;
        v119 = v4;
        if ( !v78 )
        {
          v104 = v10;
          if ( !*(_DWORD *)(v3 + 24) )
            v104 = HIBYTE(v10) + ((v10 >> 8) & 0xFF00) + (((v10 << 16) + (v10 & 0xFF00)) << 8);
          if ( v104 != *(_DWORD *)(v3 + 32) )
          {
            *(_QWORD *)(v2 + 32) = "incorrect data check";
            *(_DWORD *)(v3 + 8) = 16209;
            goto LABEL_26;
          }
        }
        v10 = 0;
        i = 0;
LABEL_317:
        *(_DWORD *)(v3 + 8) = 16207;
LABEL_318:
        v105 = *(_DWORD *)(v3 + 16);
        if ( !v105 || !*(_DWORD *)(v3 + 24) )
          goto LABEL_328;
        for ( ; i < 0x20; i += 8 )
        {
          if ( !v8 )
            goto LABEL_332;
          --v8;
          v10 += *v9++ << i;
        }
        if ( (v105 & 4) != 0 && v10 != *(_DWORD *)(v3 + 36) )
        {
          *(_QWORD *)(v2 + 32) = "incorrect length check";
          *(_DWORD *)(v3 + 8) = 16209;
          goto LABEL_26;
        }
        v10 = 0;
        i = 0;
LABEL_328:
        *(_DWORD *)(v3 + 8) = 16208;
LABEL_329:
        v52 = a2;
        v77 = 1;
        goto LABEL_334;
      case 0x1Bu:
        goto LABEL_318;
      case 0x1Cu:
        goto LABEL_329;
      case 0x1Du:
        v52 = a2;
        v77 = -3;
        goto LABEL_334;
      case 0x1Eu:
        return 4294967292LL;
      default:
        return 4294967294LL;
    }
  }
}
// 180025D60: using guessed type __int16 word_180025D60[24];

//----- (00000001800202F0) ----------------------------------------------------
__int64 __fastcall sub_1800202F0(_QWORD *a1)
{
  void (__fastcall *v2)(_QWORD); // r8
  __int64 v3; // rcx
  __int64 result; // rax

  if ( !a1 )
    return 4294967294LL;
  if ( !a1[6] )
    return 4294967294LL;
  v2 = (void (__fastcall *)(_QWORD))a1[7];
  if ( !v2 )
    return 4294967294LL;
  v3 = a1[5];
  if ( !v3 || *(_QWORD **)v3 != a1 || (unsigned int)(*(_DWORD *)(v3 + 8) - 16180) > 0x1F )
    return 4294967294LL;
  if ( *(_QWORD *)(v3 + 64) )
    v2(a1[8]);
  ((void (__fastcall *)(_QWORD, _QWORD))a1[7])(a1[8], a1[5]);
  result = 0LL;
  a1[5] = 0LL;
  return result;
}

//----- (0000000180020360) ----------------------------------------------------
void *__fastcall sub_180020360(__int64 a1, int a2, int a3)
{
  return malloc((unsigned int)(a3 * a2));
}

//----- (0000000180020380) ----------------------------------------------------
__int64 __fastcall sub_180020380(unsigned int a1, unsigned __int8 *a2, unsigned __int64 a3)
{
  unsigned __int8 *v3; // r10
  unsigned int v4; // r9d
  unsigned int v5; // ecx
  unsigned int v6; // edx
  unsigned int v7; // r9d
  unsigned int v8; // eax
  int v10; // eax
  unsigned int v11; // r8d
  unsigned __int64 v12; // r11
  int v13; // edx
  unsigned int v14; // ecx
  unsigned int v15; // r9d
  unsigned int v16; // ecx
  unsigned int v17; // r9d
  unsigned int v18; // ecx
  unsigned int v19; // r9d
  unsigned int v20; // ecx
  unsigned int v21; // r9d
  unsigned int v22; // ecx
  unsigned int v23; // r9d
  unsigned int v24; // ecx
  unsigned int v25; // r9d
  unsigned int v26; // ecx
  unsigned int v27; // r9d
  unsigned int v28; // ecx
  unsigned int v29; // r9d
  unsigned int v30; // ecx
  int v31; // r9d
  int v32; // ecx
  int v33; // r9d
  int v34; // ecx
  int v35; // r9d
  int v36; // ecx
  int v37; // r9d
  int v38; // ecx
  int v39; // r9d
  int v40; // ecx
  int v41; // r9d
  int v42; // ecx
  int v43; // eax
  int v44; // r9d
  unsigned __int64 v45; // rdx
  unsigned int v46; // ecx
  unsigned int v47; // r9d
  unsigned int v48; // ecx
  unsigned int v49; // r9d
  unsigned int v50; // ecx
  unsigned int v51; // r9d
  unsigned int v52; // ecx
  unsigned int v53; // r9d
  unsigned int v54; // ecx
  unsigned int v55; // r9d
  unsigned int v56; // ecx
  unsigned int v57; // r9d
  unsigned int v58; // ecx
  unsigned int v59; // r9d
  unsigned int v60; // ecx
  unsigned int v61; // r9d
  unsigned int v62; // ecx
  int v63; // r9d
  int v64; // ecx
  int v65; // r9d
  int v66; // ecx
  int v67; // r9d
  int v68; // ecx
  int v69; // r9d
  int v70; // ecx
  int v71; // r9d
  int v72; // ecx
  int v73; // r9d
  int v74; // ecx
  int v75; // eax
  int v76; // r9d
  int v77; // eax

  v3 = a2;
  v4 = HIWORD(a1);
  a1 = (unsigned __int16)a1;
  if ( a3 == 1 )
  {
    v5 = *a2 + (unsigned __int16)a1;
    v6 = v5 - 65521;
    if ( v5 < 0xFFF1 )
      v6 = v5;
    v7 = v6 + v4;
    v8 = v7 - 65521;
    if ( v7 < 0xFFF1 )
      v8 = v7;
    return v6 | (v8 << 16);
  }
  else if ( a2 )
  {
    if ( a3 >= 0x10 )
    {
      if ( a3 >= 0x15B0 )
      {
        v12 = a3 / 0x15B0;
        a3 %= 0x15B0uLL;
        do
        {
          v13 = 347;
          do
          {
            v14 = *v3 + a1;
            v15 = v14 + v4;
            v16 = v3[1] + v14;
            v17 = v16 + v15;
            v18 = v3[2] + v16;
            v19 = v18 + v17;
            v20 = v3[3] + v18;
            v21 = v20 + v19;
            v22 = v3[4] + v20;
            v23 = v22 + v21;
            v24 = v3[5] + v22;
            v25 = v24 + v23;
            v26 = v3[6] + v24;
            v27 = v26 + v25;
            v28 = v3[7] + v26;
            v29 = v28 + v27;
            v30 = v3[8] + v28;
            v31 = v30 + v29;
            v32 = v3[9] + v30;
            v33 = v32 + v31;
            v34 = v3[10] + v32;
            v35 = v34 + v33;
            v36 = v3[11] + v34;
            v37 = v36 + v35;
            v38 = v3[12] + v36;
            v39 = v38 + v37;
            v40 = v3[13] + v38;
            v41 = v40 + v39;
            v42 = v3[14] + v40;
            v43 = v3[15];
            v44 = v42 + v41;
            v3 += 16;
            a1 = v43 + v42;
            v4 = a1 + v44;
            --v13;
          }
          while ( v13 );
          a1 %= 0xFFF1u;
          v4 %= 0xFFF1u;
          --v12;
        }
        while ( v12 );
      }
      if ( a3 )
      {
        if ( a3 >= 0x10 )
        {
          v45 = a3 >> 4;
          a3 += -16LL * (a3 >> 4);
          do
          {
            v46 = *v3 + a1;
            v47 = v46 + v4;
            v48 = v3[1] + v46;
            v49 = v48 + v47;
            v50 = v3[2] + v48;
            v51 = v50 + v49;
            v52 = v3[3] + v50;
            v53 = v52 + v51;
            v54 = v3[4] + v52;
            v55 = v54 + v53;
            v56 = v3[5] + v54;
            v57 = v56 + v55;
            v58 = v3[6] + v56;
            v59 = v58 + v57;
            v60 = v3[7] + v58;
            v61 = v60 + v59;
            v62 = v3[8] + v60;
            v63 = v62 + v61;
            v64 = v3[9] + v62;
            v65 = v64 + v63;
            v66 = v3[10] + v64;
            v67 = v66 + v65;
            v68 = v3[11] + v66;
            v69 = v68 + v67;
            v70 = v3[12] + v68;
            v71 = v70 + v69;
            v72 = v3[13] + v70;
            v73 = v72 + v71;
            v74 = v3[14] + v72;
            v75 = v3[15];
            v76 = v74 + v73;
            v3 += 16;
            a1 = v75 + v74;
            v4 = a1 + v76;
            --v45;
          }
          while ( v45 );
        }
        for ( ; a3; --a3 )
        {
          v77 = *v3++;
          a1 += v77;
          v4 += a1;
        }
        a1 %= 0xFFF1u;
        v4 %= 0xFFF1u;
      }
      return a1 | (v4 << 16);
    }
    else
    {
      for ( ; a3; --a3 )
      {
        v10 = *v3++;
        a1 += v10;
        v4 += a1;
      }
      v11 = a1 - 65521;
      if ( a1 < 0xFFF1 )
        v11 = a1;
      return v11 | ((v4 + 15 * (v4 / 0xFFF1)) << 16);
    }
  }
  else
  {
    return 1LL;
  }
}
// 180020380: too many cbuild loops

//----- (0000000180020660) ----------------------------------------------------
__int64 __fastcall sub_180020660(
        int a1,
        unsigned __int16 *a2,
        unsigned int a3,
        _DWORD **a4,
        unsigned int *a5,
        _WORD *a6)
{
  unsigned int i; // r10d
  unsigned __int64 v11; // rax
  unsigned __int16 *v12; // rcx
  __int64 v13; // rdx
  __int64 v14; // rax
  unsigned int v15; // r10d
  int v16; // edx
  unsigned int j; // r9d
  int v18; // r15d
  unsigned int v20; // r11d
  __int16 *v21; // rax
  unsigned int v22; // edx
  int v23; // r8d
  __int64 v24; // rcx
  __int64 v25; // rdx
  unsigned int v26; // r8d
  unsigned __int16 *v27; // rdx
  unsigned int v28; // edx
  _DWORD *v29; // r12
  __int64 v30; // rsi
  unsigned int v31; // ebx
  __int64 v32; // r8
  char v33; // di
  unsigned int v34; // r13d
  unsigned int v35; // ecx
  __int64 v36; // rcx
  __int16 v37; // ax
  int v38; // r8d
  int v39; // r10d
  __int64 v40; // rdx
  unsigned int k; // edx
  __int64 v43; // rdi
  unsigned int v44; // r8d
  char v45; // r10
  __int64 v46; // r8
  int v47; // edx
  int v48; // edx
  bool v49; // cc
  __int64 v50; // rdx
  int v51; // [rsp+20h] [rbp-89h]
  int v52; // [rsp+20h] [rbp-89h]
  unsigned int v53; // [rsp+24h] [rbp-85h]
  unsigned int v54; // [rsp+28h] [rbp-81h]
  int v55; // [rsp+2Ch] [rbp-7Dh]
  unsigned int v56; // [rsp+30h] [rbp-79h]
  int v58; // [rsp+38h] [rbp-71h]
  _BYTE *v59; // [rsp+40h] [rbp-69h]
  char *v60; // [rsp+48h] [rbp-61h]
  __int16 v64[16]; // [rsp+72h] [rbp-37h] BYREF
  __int16 v65[15]; // [rsp+92h] [rbp-17h]

  for ( i = 0; i <= 0xF; ++i )
  {
    v11 = i;
    if ( v11 >= 16 )
      _report_rangecheckfailure();
    v64[v11 - 1] = 0;
  }
  if ( a3 )
  {
    v12 = a2;
    v13 = a3;
    do
    {
      v14 = *v12++;
      ++v64[v14 - 1];
      --v13;
    }
    while ( v13 );
  }
  v15 = *a5;
  v16 = 13;
  for ( j = 15; j; j -= 5 )
  {
    v18 = -1;
    if ( v64[j - 1] )
      break;
    if ( v64[v16 + 1 - 1] )
    {
      --j;
      break;
    }
    if ( v64[v16 - 1] )
    {
      j -= 2;
      break;
    }
    if ( v64[v16 - 1 - 1] )
    {
      j -= 3;
      break;
    }
    if ( v64[v16 - 2 - 1] )
    {
      j -= 4;
      break;
    }
    v16 -= 5;
  }
  if ( v15 > j )
    v15 = j;
  if ( !j )
  {
    *(*a4)++ = 320;
    *(*a4)++ = 320;
    *a5 = 1;
    return 0LL;
  }
  v20 = 1;
  if ( j > 1 )
  {
    v21 = v64;
    do
    {
      if ( *v21 )
        break;
      ++v20;
      ++v21;
    }
    while ( v20 < j );
  }
  v22 = 1;
  v23 = 1;
  if ( v15 < v20 )
    v15 = v20;
  v56 = v15;
  do
  {
    v23 = 2 * v23 - (unsigned __int16)v64[v22 - 1];
    if ( v23 < 0 )
      return 0xFFFFFFFFLL;
    ++v22;
  }
  while ( v22 <= 0xF );
  if ( v23 > 0 && (!a1 || j != 1) )
    return 0xFFFFFFFFLL;
  v65[0] = 0;
  v24 = 0LL;
  v25 = 14LL;
  do
  {
    v65[v24 + 1] = v65[v24] + v64[v24];
    ++v24;
    --v25;
  }
  while ( v25 );
  v26 = 0;
  if ( a3 )
  {
    v27 = a2;
    do
    {
      if ( *v27 )
        a6[(unsigned __int16)v64[*v27 + 15]++] = v26;
      ++v26;
      ++v27;
    }
    while ( v26 < a3 );
  }
  if ( a1 )
  {
    if ( a1 == 1 )
    {
      v28 = 257;
      v60 = (char *)&unk_180025E10;
      v59 = &unk_180025DD0;
    }
    else
    {
      v28 = 0;
      v60 = (char *)&unk_180025E50;
      v59 = &unk_180025D90;
    }
  }
  else
  {
    v59 = a6;
    v28 = 20;
    v60 = (char *)a6;
  }
  v29 = *a4;
  v30 = (unsigned int)(1 << v15);
  v31 = 0;
  v55 = 0;
  LODWORD(v32) = 0;
  v54 = 0;
  v33 = 0;
  v53 = v28;
  v34 = v30;
  v58 = v30 - 1;
  if ( a1 == 1 )
  {
    if ( (unsigned int)v30 <= 0x354 )
      goto LABEL_55;
    return 1LL;
  }
  if ( a1 == 2 && (unsigned int)v30 > 0x250 )
    return 1LL;
  while ( 1 )
  {
LABEL_55:
    v35 = (unsigned __int16)a6[(unsigned int)v32];
    if ( v35 + 1 >= v28 )
    {
      if ( v35 < v28 )
      {
        LOBYTE(v51) = 96;
        v37 = 0;
      }
      else
      {
        v36 = 2LL * (v35 - v28);
        LOBYTE(v51) = v59[v36];
        v37 = *(_WORD *)&v60[v36];
      }
      HIWORD(v51) = v37;
    }
    else
    {
      LOBYTE(v51) = 0;
      HIWORD(v51) = a6[(unsigned int)v32];
    }
    v38 = v30;
    v39 = 1 << (v20 - v33);
    LODWORD(v40) = v30 + (v31 >> v33);
    do
    {
      v40 = (unsigned int)(v40 - v39);
      BYTE1(v51) = v20 - v33;
      v29[v40] = v51;
      v38 -= v39;
    }
    while ( v38 );
    for ( k = 1 << (v20 - 1); (k & v31) != 0; k >>= 1 )
      ;
    if ( k )
      v31 = k + ((k - 1) & v31);
    else
      v31 = 0;
    v32 = (unsigned int)++v55;
    if ( v64[v20 - 1]-- != 1 )
      goto LABEL_71;
    if ( v20 == j )
      break;
    v20 = a2[(unsigned __int16)a6[v32]];
LABEL_71:
    v28 = v53;
    if ( v20 > v56 )
    {
      v43 = v31 & v58;
      if ( (_DWORD)v43 == v18 )
        goto LABEL_54;
      v44 = v54;
      v29 += v30;
      if ( !v54 )
        v44 = v56;
      v45 = v20 - v44;
      v54 = v44;
      v46 = v20;
      v47 = 1 << v45;
      if ( v20 < j )
      {
        do
        {
          v48 = v47 - (unsigned __int16)v64[v46 - 1];
          if ( v48 <= 0 )
            break;
          ++v45;
          v46 = (unsigned int)(v46 + 1);
          v47 = 2 * v48;
        }
        while ( (unsigned int)v46 < j );
      }
      v30 = (unsigned int)(1 << v45);
      v34 += v30;
      if ( a1 == 1 )
      {
        v49 = v34 <= 0x354;
        goto LABEL_82;
      }
      if ( a1 == 2 )
      {
        v49 = v34 <= 0x250;
LABEL_82:
        if ( !v49 )
          return 1LL;
      }
      v50 = v43;
      v18 = v31 & v58;
      LOBYTE((*a4)[v50]) = v45;
      BYTE1((*a4)[v50]) = v56;
      LODWORD(v32) = v55;
      HIWORD((*a4)[v50]) = v29 - *a4;
      v28 = v53;
LABEL_54:
      v33 = v54;
    }
  }
  if ( v31 )
  {
    HIBYTE(v52) = 0;
    LOBYTE(v52) = 64;
    *(_WORD *)((char *)&v52 + 1) = (unsigned __int8)(v20 - v33);
    v29[v31] = v52;
  }
  *a4 += v34;
  *a5 = v56;
  return 0LL;
}
// 180023F6C: using guessed type void __noreturn _report_rangecheckfailure(void);

//----- (0000000180020B70) ----------------------------------------------------
__int64 __fastcall sub_180020B70(unsigned __int8 **a1, int a2)
{
  unsigned __int8 *v2; // r12
  int v3; // r9d
  unsigned __int8 *v4; // r8
  unsigned __int8 *v5; // rdi
  __int64 v6; // r10
  __int64 v7; // rsi
  unsigned __int64 v8; // r13
  unsigned int v9; // r14d
  unsigned __int8 *v10; // r15
  unsigned int v11; // ebx
  unsigned int v12; // r11d
  int v13; // edx
  unsigned int v14; // ebx
  int v15; // eax
  __int64 v16; // rcx
  int v17; // edx
  __int64 v18; // r9
  unsigned __int64 v19; // rcx
  unsigned int v20; // r10d
  unsigned int v21; // edx
  int v22; // eax
  int v23; // eax
  unsigned int v24; // ebx
  int v25; // eax
  __int64 v26; // rcx
  char v27; // dl
  __int64 v28; // r9
  unsigned __int64 v29; // rcx
  unsigned int v30; // edx
  int v31; // eax
  int v32; // eax
  int v33; // eax
  unsigned int v34; // esi
  int v35; // eax
  unsigned int v36; // ecx
  unsigned __int8 *v37; // r9
  unsigned __int8 v38; // al
  __int64 v39; // r9
  unsigned int v40; // ecx
  __int64 v41; // r9
  unsigned int v42; // ecx
  unsigned __int8 v43; // al
  unsigned __int8 v44; // al
  __int64 v45; // rcx
  unsigned __int8 v46; // al
  bool v47; // cc
  unsigned __int8 *v48; // rcx
  unsigned __int8 v49; // al
  bool v50; // zf
  unsigned __int8 **v51; // rdx
  const char *v52; // rax
  __int64 v53; // rax
  unsigned __int8 *v54; // rdi
  int v55; // r11d
  signed __int64 v56; // r15
  __int64 result; // rax
  int i; // [rsp+0h] [rbp-78h]
  __int64 v59; // [rsp+8h] [rbp-70h]
  __int64 v60; // [rsp+10h] [rbp-68h]
  unsigned __int8 *v61; // [rsp+18h] [rbp-60h]
  int v62; // [rsp+20h] [rbp-58h]
  int v64; // [rsp+88h] [rbp+10h]
  int v65; // [rsp+90h] [rbp+18h]
  unsigned int v66; // [rsp+98h] [rbp+20h]

  v2 = a1[5];
  v3 = *((_DWORD *)a1 + 6);
  v4 = a1[2];
  v5 = *a1;
  v6 = *((_QWORD *)v2 + 12);
  v7 = *((_QWORD *)v2 + 13);
  v8 = (unsigned __int64)&(*a1)[*((_DWORD *)a1 + 2) - 5];
  v9 = *((_DWORD *)v2 + 15);
  v10 = &v4[v3 - 257];
  v11 = *((_DWORD *)v2 + 18);
  v12 = *((_DWORD *)v2 + 19);
  v59 = v6;
  v64 = *((_DWORD *)v2 + 13);
  v66 = *((_DWORD *)v2 + 14);
  v61 = (unsigned __int8 *)*((_QWORD *)v2 + 8);
  v62 = (_DWORD)v4 - (a2 - v3);
  v13 = (1 << *((_DWORD *)v2 + 28)) - 1;
  v60 = v7;
  v65 = (1 << *((_DWORD *)v2 + 29)) - 1;
  for ( i = v13; ; v13 = i )
  {
    if ( v12 < 0xF )
    {
      v14 = (*v5 << v12) + v11;
      v15 = v5[1] << (v12 + 8);
      v5 += 2;
      v11 = v15 + v14;
      v12 += 16;
    }
    v16 = v11 & v13;
    v17 = *(unsigned __int8 *)(v6 + 4 * v16);
    v18 = v6 + 4 * v16;
    LODWORD(v16) = *(unsigned __int8 *)(v18 + 1);
    v11 >>= v16;
    v12 -= v16;
    if ( v17 )
      break;
LABEL_8:
    *v4++ = *(_BYTE *)(v18 + 2);
LABEL_53:
    if ( (unsigned __int64)v5 >= v8 || v4 >= v10 )
    {
      v51 = a1;
      goto LABEL_63;
    }
  }
  while ( 1 )
  {
    if ( (v17 & 0x10) != 0 )
    {
      v20 = *(unsigned __int16 *)(v18 + 2);
      v21 = v17 & 0xF;
      if ( v21 )
      {
        if ( v12 < v21 )
        {
          v22 = *v5++ << v12;
          v11 += v22;
          v12 += 8;
        }
        v23 = v11 & ((1 << v21) - 1);
        v11 >>= v21;
        v20 += v23;
        v12 -= v21;
      }
      if ( v12 < 0xF )
      {
        v24 = (*v5 << v12) + v11;
        v25 = v5[1] << (v12 + 8);
        v5 += 2;
        v11 = v25 + v24;
        v12 += 16;
      }
      v26 = v11 & v65;
      v27 = *(_BYTE *)(v7 + 4 * v26);
      v28 = v7 + 4 * v26;
      LODWORD(v26) = *(unsigned __int8 *)(v28 + 1);
      v11 >>= v26;
      v12 -= v26;
      if ( (v27 & 0x10) == 0 )
      {
        while ( (v27 & 0x40) == 0 )
        {
          v29 = *(unsigned __int16 *)(v28 + 2) + (unsigned __int64)(v11 & ((1 << v27) - 1));
          v27 = *(_BYTE *)(v7 + 4 * v29);
          v28 = v7 + 4 * v29;
          LODWORD(v29) = *(unsigned __int8 *)(v28 + 1);
          v11 >>= v29;
          v12 -= v29;
          if ( (v27 & 0x10) != 0 )
            goto LABEL_18;
        }
        v52 = "invalid distance code";
        goto LABEL_60;
      }
LABEL_18:
      v30 = v27 & 0xF;
      if ( v12 < v30 )
      {
        v31 = *v5++ << v12;
        v11 += v31;
        v12 += 8;
        if ( v12 < v30 )
        {
          v32 = *v5++ << v12;
          v11 += v32;
          v12 += 8;
        }
      }
      v12 -= v30;
      v33 = v11 & ((1 << v30) - 1);
      v11 >>= v30;
      v34 = v33 + *(unsigned __int16 *)(v28 + 2);
      v35 = (_DWORD)v4 - v62;
      if ( v34 <= (int)v4 - v62 )
      {
        v48 = &v4[-v34];
        do
        {
          v49 = *v48;
          v48 += 3;
          *v4 = v49;
          v20 -= 3;
          v4[1] = *(v48 - 2);
          v4[2] = *(v48 - 1);
          v4 += 3;
        }
        while ( v20 > 2 );
        if ( !v20 )
          goto LABEL_52;
        v7 = v60;
        *v4++ = *v48;
        v47 = v20 <= 1;
        v6 = v59;
        if ( !v47 )
          *v4++ = v48[1];
        goto LABEL_53;
      }
      v36 = v34 - v35;
      if ( v34 - v35 > v66 && *((_DWORD *)v2 + 1784) )
      {
        v52 = "invalid distance too far back";
LABEL_60:
        v51 = a1;
        a1[4] = (unsigned __int8 *)v52;
        *((_DWORD *)v2 + 2) = 16209;
        goto LABEL_63;
      }
      if ( v9 )
      {
        v39 = v9 - v36;
        if ( v9 < v36 )
        {
          v40 = v36 - v9;
          v37 = &v61[(unsigned int)(v64 + v39)];
          if ( v40 >= v20 )
            goto LABEL_41;
          v20 -= v40;
          v41 = v37 - v4;
          do
          {
            *v4 = v4[v41];
            ++v4;
            --v40;
          }
          while ( v40 );
          v37 = v61;
          if ( v9 >= v20 )
            goto LABEL_41;
          v42 = v9;
          v20 -= v9;
          do
          {
            v43 = *v37++;
            *v4++ = v43;
            --v42;
          }
          while ( v42 );
          goto LABEL_40;
        }
        v37 = &v61[v39];
        if ( v36 < v20 )
        {
          v20 -= v36;
          do
          {
            v44 = *v37++;
            *v4++ = v44;
            --v36;
          }
          while ( v36 );
          goto LABEL_40;
        }
      }
      else
      {
        v37 = &v61[v64 - v36];
        if ( v36 < v20 )
        {
          v20 -= v36;
          do
          {
            v38 = *v37++;
            *v4++ = v38;
            --v36;
          }
          while ( v36 );
LABEL_40:
          v37 = &v4[-v34];
        }
      }
LABEL_41:
      if ( v20 > 2 )
      {
        v45 = (v20 - 3) / 3 + 1;
        do
        {
          v20 -= 3;
          *v4 = *v37;
          v4[1] = v37[1];
          v46 = v37[2];
          v37 += 3;
          v4[2] = v46;
          v4 += 3;
          --v45;
        }
        while ( v45 );
      }
      if ( !v20 )
      {
LABEL_52:
        v7 = v60;
        v6 = v59;
        goto LABEL_53;
      }
      v7 = v60;
      *v4++ = *v37;
      v47 = v20 <= 1;
      v6 = v59;
      if ( !v47 )
        *v4++ = v37[1];
      goto LABEL_53;
    }
    if ( (v17 & 0x40) != 0 )
      break;
    v19 = *(unsigned __int16 *)(v18 + 2) + (unsigned __int64)(v11 & ((1 << v17) - 1));
    v17 = *(unsigned __int8 *)(v6 + 4 * v19);
    v18 = v6 + 4 * v19;
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 1);
    v11 >>= v19;
    v12 -= v19;
    if ( !v17 )
      goto LABEL_8;
  }
  v50 = (v17 & 0x20) == 0;
  v51 = a1;
  if ( v50 )
  {
    a1[4] = "invalid literal/length code";
    *((_DWORD *)v2 + 2) = 16209;
  }
  else
  {
    *((_DWORD *)v2 + 2) = 16191;
  }
LABEL_63:
  v51[2] = v4;
  v53 = v12 >> 3;
  v54 = &v5[-v53];
  *v51 = v54;
  v55 = v12 - 8 * v53;
  *((_DWORD *)v51 + 2) = v8 - (_DWORD)v54 + 5;
  v56 = v10 - v4;
  result = v56 + 257;
  *((_DWORD *)v51 + 6) = v56 + 257;
  *((_DWORD *)v2 + 18) = ((1 << v55) - 1) & v11;
  *((_DWORD *)v2 + 19) = v55;
  return result;
}

//----- (0000000180021060) ----------------------------------------------------
__int64 __fastcall sub_180021060(int a1, char *a2, unsigned __int64 a3)
{
  unsigned __int64 v3; // rsi
  char *v4; // r11
  unsigned int v6; // r9d
  unsigned __int8 v7; // cl
  int v8; // edi
  int v9; // ebp
  int v10; // r14d
  int v11; // r15d
  unsigned __int64 v12; // rcx
  unsigned int v13; // edx
  unsigned int v14; // r10d
  unsigned __int64 v15; // r12
  unsigned int v16; // r8d
  unsigned __int64 v17; // r13
  __int64 v18; // rax
  __int64 v19; // r10
  int v20; // ebx
  char v21; // al
  __int64 v22; // rcx
  bool v23; // zf
  unsigned int v24; // r8d
  unsigned int v25; // edx
  unsigned int v26; // r8d
  unsigned int v27; // r8d
  unsigned int v28; // edx
  unsigned int v29; // r8d
  unsigned int v30; // edx
  unsigned int v31; // r8d
  unsigned int v32; // edx
  unsigned int v33; // r8d
  unsigned int v34; // edx
  unsigned int v35; // r8d
  unsigned int v36; // edx
  unsigned int v37; // r8d
  unsigned int v38; // edx
  unsigned int v39; // r8d
  unsigned int v40; // edx
  unsigned int v41; // r8d
  unsigned int v42; // edx
  unsigned __int64 v43; // r10
  __int64 v44; // rax
  unsigned int v45; // edx
  __int64 v46; // rax
  unsigned int v47; // edx
  unsigned int v48; // edx
  unsigned int v49; // r8d
  __int64 v50; // rax
  char v51; // cl
  char v52; // cl
  unsigned __int64 v53; // [rsp+0h] [rbp-48h]
  unsigned __int64 v54; // [rsp+58h] [rbp+10h]

  v3 = a3;
  v4 = a2;
  if ( !a2 )
    return 0LL;
  v6 = ~a1;
  if ( a3 >= 0x17 )
  {
    do
    {
      if ( ((unsigned __int8)v4 & 3) == 0 )
        break;
      v7 = v6 ^ *v4++;
      v6 = (v6 >> 8) ^ dword_180025E90[v7];
      --v3;
    }
    while ( v3 );
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v3 / 0x14;
    v3 %= 0x14uLL;
    v54 = v12 - 1;
    if ( v12 != 1 )
    {
      do
      {
        v13 = v9 ^ *((_DWORD *)v4 + 2);
        v14 = v11 ^ *((_DWORD *)v4 + 4);
        v15 = v6 ^ *(_DWORD *)v4;
        v16 = v10 ^ *((_DWORD *)v4 + 3);
        v17 = (unsigned int)v8 ^ *((_DWORD *)v4 + 1);
        v6 = dword_180026690[(unsigned __int8)(v6 ^ *v4)];
        v8 = dword_180026690[(unsigned __int8)(v8 ^ v4[4])];
        v9 = dword_180026690[(unsigned __int8)v13];
        v10 = dword_180026690[(unsigned __int8)v16];
        v53 = v14;
        v18 = (unsigned __int8)v14;
        v19 = 256LL;
        v11 = dword_180026690[v18];
        v20 = 1;
        do
        {
          v21 = 8 * v20++;
          v6 ^= dword_180026690[v19 + (unsigned __int8)(v15 >> v21)];
          v8 ^= dword_180026690[v19 + (unsigned __int8)(v17 >> v21)];
          v9 ^= dword_180026690[v19 + (unsigned __int8)((unsigned __int64)v13 >> v21)];
          v10 ^= dword_180026690[v19 + (unsigned __int8)((unsigned __int64)v16 >> v21)];
          v22 = v19 + (unsigned __int8)(v53 >> v21);
          v19 += 256LL;
          v11 ^= dword_180026690[v22];
        }
        while ( v20 < 4 );
        v23 = v54-- == 1;
        v4 += 20;
      }
      while ( !v23 );
    }
    v24 = ((v6 ^ *(_DWORD *)v4) >> 8) ^ dword_180025E90[(unsigned __int8)(v6 ^ *v4)];
    v25 = (v24 >> 8) ^ dword_180025E90[(unsigned __int8)v24];
    v26 = (v25 >> 8) ^ dword_180025E90[(unsigned __int8)v25];
    v27 = v8 ^ (v26 >> 8) ^ dword_180025E90[(unsigned __int8)v26] ^ *((_DWORD *)v4 + 1);
    v28 = (v27 >> 8) ^ dword_180025E90[(unsigned __int8)v27];
    v29 = (v28 >> 8) ^ dword_180025E90[(unsigned __int8)v28];
    v30 = (v29 >> 8) ^ dword_180025E90[(unsigned __int8)v29];
    v31 = v9 ^ (v30 >> 8) ^ dword_180025E90[(unsigned __int8)v30] ^ *((_DWORD *)v4 + 2);
    v32 = (v31 >> 8) ^ dword_180025E90[(unsigned __int8)v31];
    v33 = (v32 >> 8) ^ dword_180025E90[(unsigned __int8)v32];
    v34 = (v33 >> 8) ^ dword_180025E90[(unsigned __int8)v33];
    v35 = v10 ^ (v34 >> 8) ^ dword_180025E90[(unsigned __int8)v34] ^ *((_DWORD *)v4 + 3);
    v36 = (v35 >> 8) ^ dword_180025E90[(unsigned __int8)v35];
    v37 = (v36 >> 8) ^ dword_180025E90[(unsigned __int8)v36];
    v38 = (v37 >> 8) ^ dword_180025E90[(unsigned __int8)v37];
    v39 = v11 ^ (v38 >> 8) ^ dword_180025E90[(unsigned __int8)v38] ^ *((_DWORD *)v4 + 4);
    v40 = (v39 >> 8) ^ dword_180025E90[(unsigned __int8)v39];
    v41 = (v40 >> 8) ^ dword_180025E90[(unsigned __int8)v40];
    v42 = (v41 >> 8) ^ dword_180025E90[(unsigned __int8)v41];
    v6 = (v42 >> 8) ^ dword_180025E90[(unsigned __int8)v42];
    v4 += 20;
  }
  if ( v3 >= 8 )
  {
    v43 = v3 >> 3;
    v3 += -8LL * (v3 >> 3);
    do
    {
      v44 = (unsigned __int8)(v6 ^ *v4);
      v45 = (v6 >> 8) ^ dword_180025E90[v44];
      v46 = (unsigned __int8)(BYTE1(v6) ^ LOBYTE(dword_180025E90[v44]) ^ v4[1]);
      v47 = (((v45 >> 8) ^ dword_180025E90[v46]) >> 8) ^ dword_180025E90[(unsigned __int8)(BYTE1(v45) ^ LOBYTE(dword_180025E90[v46]) ^ v4[2])];
      v48 = (((v47 >> 8) ^ dword_180025E90[(unsigned __int8)(v47 ^ v4[3])]) >> 8) ^ dword_180025E90[(unsigned __int8)(BYTE1(v47) ^ LOBYTE(dword_180025E90[(unsigned __int8)(v47 ^ v4[3])]) ^ v4[4])];
      v49 = ((v48 >> 8) ^ dword_180025E90[(unsigned __int8)(v48 ^ v4[5])]) >> 8;
      v50 = (unsigned __int8)(BYTE1(v48) ^ LOBYTE(dword_180025E90[(unsigned __int8)(v48 ^ v4[5])]) ^ v4[6]);
      v51 = v4[7];
      v4 += 8;
      v6 = ((v49 ^ dword_180025E90[v50]) >> 8) ^ dword_180025E90[(unsigned __int8)(v49 ^ LOBYTE(dword_180025E90[v50]) ^ v51)];
      --v43;
    }
    while ( v43 );
  }
  for ( ; v3; --v3 )
  {
    v52 = *v4++;
    v6 = (v6 >> 8) ^ dword_180025E90[(unsigned __int8)(v6 ^ v52)];
  }
  return ~v6;
}
// 180025E90: using guessed type int dword_180025E90[512];
// 180026690: using guessed type int dword_180026690[2087];

//----- (0000000180021570) ----------------------------------------------------
__int64 __fastcall sub_180021570(int a1, char *a2, unsigned int a3)
{
  return sub_180021060(a1, a2, a3);
}

//----- (0000000180021580) ----------------------------------------------------
__int64 __fastcall sub_180021580(unsigned __int8 *a1, _QWORD *a2, int a3, int a4)
{
  int v5; // r15d
  unsigned __int8 *v6; // r14
  unsigned __int64 v7; // rbp
  unsigned __int8 *v8; // rdx
  _QWORD *v9; // rbx
  unsigned int v11; // eax
  unsigned __int64 v12; // rdi
  __int64 v13; // r8
  _DWORD *v14; // r9
  unsigned __int8 *v15; // rcx
  signed __int64 v16; // rdx
  unsigned __int8 *v17; // rdx
  _DWORD *v18; // rcx
  unsigned __int64 v19; // rdi
  char *v20; // r8
  __int64 v21; // r10
  __int64 v22; // r11
  unsigned __int64 v23; // r10
  unsigned __int64 v24; // r9
  char *v25; // r8
  char *v26; // r8
  __int64 v27; // rax
  _QWORD *v28; // rcx
  unsigned __int64 v29; // r11
  _QWORD *v30; // r10
  unsigned __int64 v31; // rax
  char v32; // al
  char *v33; // rcx
  __int64 v34; // r8
  int v35[4]; // [rsp+20h] [rbp-88h]
  __int64 v36; // [rsp+30h] [rbp-78h]
  __int64 v37; // [rsp+38h] [rbp-70h]
  __int128 v38[2]; // [rsp+40h] [rbp-68h]

  v5 = (int)a1;
  v6 = &a1[a3];
  v7 = (unsigned __int64)a2 + a4;
  v35[0] = 0;
  v35[1] = 1;
  v8 = a1;
  v35[2] = 2;
  v9 = a2;
  v35[3] = 1;
  v36 = 0x400000004LL;
  v37 = 0x400000004LL;
  v38[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_180028EC0);
  v38[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_180028E90);
  if ( a4 )
  {
    while ( 1 )
    {
      v11 = *v8++;
      v12 = (unsigned __int64)v11 >> 4;
      if ( v12 == 15 )
      {
        do
        {
          v13 = *v8;
          v12 += v13;
          ++v8;
        }
        while ( v8 < v6 - 15 && (_DWORD)v13 == 255 );
        if ( (_QWORD *)((char *)v9 + v12) < v9 || &v8[v12] < v8 )
          return (unsigned int)(v5 - (_DWORD)v8 - 1);
      }
      v14 = (_DWORD *)((char *)v9 + v12);
      if ( (unsigned __int64)v9 + v12 > v7 - 12 || (v15 = &v8[v12], &v8[v12] > v6 - 8) )
      {
        if ( &v8[v12] == v6 && (unsigned __int64)v14 <= v7 )
        {
          memcpy(v9, v8, v12);
          return (unsigned int)((_DWORD)v9 + v12 - (_DWORD)a2);
        }
        return (unsigned int)(v5 - (_DWORD)v8 - 1);
      }
      v16 = v8 - (unsigned __int8 *)v9;
      do
      {
        *v9 = *(_QWORD *)((char *)v9 + v16);
        ++v9;
      }
      while ( v9 < (_QWORD *)v14 );
      v17 = v15;
      v18 = v14;
      v19 = *(unsigned __int16 *)v17;
      v8 = v17 + 2;
      v20 = (char *)v14 - v19;
      if ( (_QWORD *)((char *)v14 - v19) < a2 )
        return (unsigned int)(v5 - (_DWORD)v8 - 1);
      v21 = v11 & 0xF;
      *v14 = v19;
      if ( v21 == 15 )
      {
        while ( 1 )
        {
          v22 = *v8++;
          if ( v8 > v6 - 5 )
            return (unsigned int)(v5 - (_DWORD)v8 - 1);
          v21 += v22;
          if ( (_DWORD)v22 != 255 )
          {
            if ( (_DWORD *)((char *)v14 + v21) < v14 )
              return (unsigned int)(v5 - (_DWORD)v8 - 1);
            break;
          }
        }
      }
      v23 = v21 + 4;
      v24 = (unsigned __int64)v14 + v23;
      if ( v19 >= 8 )
      {
        v27 = *(_QWORD *)v20;
        v26 = v20 + 8;
        *(_QWORD *)v18 = v27;
      }
      else
      {
        *(_BYTE *)v18 = *v20;
        *((_BYTE *)v18 + 1) = v20[1];
        *((_BYTE *)v18 + 2) = v20[2];
        *((_BYTE *)v18 + 3) = v20[3];
        v25 = &v20[v35[v19]];
        v18[1] = *(_DWORD *)v25;
        v26 = &v25[-*((int *)v38 + v19)];
      }
      v28 = v18 + 2;
      if ( v24 <= v7 - 12 )
        break;
      v29 = v7 - 7;
      if ( v24 > v7 - 5 )
        return (unsigned int)(v5 - (_DWORD)v8 - 1);
      if ( (unsigned __int64)v28 < v29 )
      {
        v30 = v28;
        do
        {
          *v30 = *(_QWORD *)((char *)v30 + v26 - (char *)v28);
          ++v30;
        }
        while ( (unsigned __int64)v30 < v29 );
        v31 = v29 - (_QWORD)v28;
        v28 = (_QWORD *)(v7 - 7);
        v26 += v31;
      }
      if ( (unsigned __int64)v28 >= v24 )
      {
LABEL_34:
        v9 = (_QWORD *)v24;
      }
      else
      {
        do
        {
          v32 = *v26++;
          *(_BYTE *)v28 = v32;
          v28 = (_QWORD *)((char *)v28 + 1);
        }
        while ( (unsigned __int64)v28 < v24 );
        v9 = (_QWORD *)v24;
      }
    }
    *v28 = *(_QWORD *)v26;
    if ( v23 > 0x10 )
    {
      v33 = (char *)(v28 + 1);
      v34 = v26 - v33;
      do
      {
        *(_QWORD *)v33 = *(_QWORD *)&v33[v34 + 8];
        v33 += 8;
      }
      while ( (unsigned __int64)v33 < v24 );
    }
    goto LABEL_34;
  }
  if ( a3 != 1 || *a1 )
    return 0xFFFFFFFFLL;
  else
    return 0LL;
}
// 180028E90: using guessed type __int128 xmmword_180028E90;
// 180028EC0: using guessed type __int128 xmmword_180028EC0;

//----- (0000000180021870) ----------------------------------------------------
__int64 __fastcall sub_180021870(__int64 a1, _DWORD *a2, _QWORD *a3, unsigned int *a4)
{
  unsigned int v4; // ebx
  __int64 result; // rax
  int v10; // eax
  int v11; // eax
  char v12; // bp
  int v13; // eax
  __int64 v14; // rbp
  int v15; // eax
  unsigned int v16; // ecx
  unsigned int v17; // [rsp+60h] [rbp+8h] BYREF
  int v18; // [rsp+68h] [rbp+10h] BYREF

  v4 = 0;
  *a2 = 0;
  *a3 = 0LL;
  *a4 = 0;
  if ( (unsigned int)sub_180023380(a1, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 264) + *(_QWORD *)(a1 + 120)) )
    return 0xFFFFFFFFLL;
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), &v17) )
  {
    v4 = -1;
  }
  else if ( v17 != 67324752 )
  {
    v4 = -103;
  }
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v17) )
    v4 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), &v18) )
    v4 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v17) )
  {
    v4 = -1;
  }
  else if ( !v4 )
  {
    v10 = *(_DWORD *)(a1 + 188);
    if ( v17 != v10 || (v10 & 0xFFFFFFF3) != 0 || v10 == 4 )
      v4 = -103;
  }
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), &v17) )
    v4 = -1;
  v11 = sub_180022450(a1, *(_QWORD *)(a1 + 96), &v17);
  v12 = v18;
  if ( v11 )
  {
    v4 = -1;
  }
  else if ( !v4 && v17 != *(_DWORD *)(a1 + 196) && (v18 & 8) == 0 )
  {
    v4 = -103;
  }
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), &v17) )
  {
    v4 = -1;
  }
  else if ( v17 != -1 && !v4 && v17 != *(_QWORD *)(a1 + 200) && (v12 & 8) == 0 )
  {
    v4 = -103;
  }
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), &v17) )
  {
    v4 = -1;
  }
  else if ( v17 != -1 && !v4 && v17 != *(_QWORD *)(a1 + 208) && (v12 & 8) == 0 )
  {
    v4 = -103;
  }
  v13 = sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v17);
  v14 = v17;
  if ( v13 )
  {
    v4 = -1;
  }
  else if ( !v4 && v17 != *(_DWORD *)(a1 + 216) )
  {
    v4 = -103;
  }
  *a2 += v17;
  v15 = sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v17);
  v16 = v17;
  if ( v15 )
    v4 = -1;
  *a3 = *(_QWORD *)(a1 + 264) + v14 + 30;
  result = v4;
  *a4 = v16;
  *a2 += v16;
  return result;
}

//----- (0000000180021A90) ----------------------------------------------------
__int64 __fastcall sub_180021A90(unsigned __int64 a1, _DWORD *a2)
{
  __int64 result; // rax

  a2[3] = BYTE2(a1) & 0x1F;
  a2[4] = ((a1 >> 21) & 0xF) - 1;
  a2[5] = ((a1 >> 25) & 0x7F) + 1980;
  a2[2] = (a1 >> 11) & 0x1F;
  result = (a1 >> 5) & 0x3F;
  a2[1] = result;
  *a2 = 2 * (a1 & 0x1F);
  return result;
}

//----- (0000000180021AF0) ----------------------------------------------------
__int64 __fastcall sub_180021AF0(
        __int64 a1,
        __int64 a2,
        __int64 *a3,
        __int64 a4,
        unsigned int a5,
        __int64 a6,
        unsigned int a7,
        __int64 a8,
        unsigned int a9)
{
  unsigned int v9; // r12d
  __int64 v11; // r13
  unsigned int v14; // edi
  int v15; // eax
  __int64 v16; // rdx
  int v17; // eax
  __int64 v18; // rdx
  int v19; // eax
  int v20; // r15d
  __int64 v21; // rbx
  unsigned int v22; // ecx
  unsigned int v23; // r14d
  __int64 v24; // rdx
  unsigned int v25; // r14d
  unsigned int v26; // ecx
  int v27; // eax
  int v28; // eax
  int v29; // r15d
  int v30; // r15d
  int v31; // eax
  unsigned int v32; // r13d
  int v33; // eax
  int v34; // eax
  int v35; // eax
  __int64 v36; // rcx
  int v37; // r14d
  unsigned int v38; // r12d
  int v39; // eax
  int v40; // eax
  __int128 v41; // xmm1
  __int128 v42; // xmm0
  __int128 v43; // xmm1
  __int128 v44; // xmm0
  unsigned int v45; // [rsp+20h] [rbp-91h] BYREF
  int v46; // [rsp+24h] [rbp-8Dh] BYREF
  __int64 v47; // [rsp+28h] [rbp-89h] BYREF
  __int128 v48; // [rsp+30h] [rbp-81h] BYREF
  __int128 v49; // [rsp+40h] [rbp-71h] BYREF
  __int128 v50; // [rsp+50h] [rbp-61h] BYREF
  __int128 v51; // [rsp+60h] [rbp-51h] BYREF
  __int128 v52; // [rsp+70h] [rbp-41h] BYREF
  __int64 v53; // [rsp+80h] [rbp-31h]
  int v54[6]; // [rsp+90h] [rbp-21h] BYREF
  __int64 v55; // [rsp+F0h] [rbp+3Fh] BYREF
  __int64 v56; // [rsp+F8h] [rbp+47h]
  __int64 *v57; // [rsp+100h] [rbp+4Fh]
  __int64 v58; // [rsp+108h] [rbp+57h]

  v58 = a4;
  v57 = a3;
  v56 = a2;
  v9 = 0;
  v11 = a2;
  if ( !a1 )
    return 4294967194LL;
  if ( (unsigned int)sub_180023380(a1, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 136)) )
  {
    v14 = -1;
  }
  else if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), &v55) )
  {
    v14 = -1;
  }
  else
  {
    v14 = 0;
    if ( (_DWORD)v55 != 33639248 )
      v14 = -103;
  }
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v48) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v48 + 1) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v48 + 2) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v48 + 3) )
    v14 = -1;
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), &v49) )
    v14 = -1;
  sub_180021A90((unsigned int)v49, &v52);
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), (_DWORD *)&v49 + 1) )
    v14 = -1;
  v15 = sub_180022450(a1, *(_QWORD *)(a1 + 96), &v55);
  v16 = *(_QWORD *)(a1 + 96);
  if ( v15 )
    v14 = -1;
  *((_QWORD *)&v49 + 1) = (unsigned int)v55;
  v17 = sub_180022450(a1, v16, &v55);
  v18 = *(_QWORD *)(a1 + 96);
  if ( v17 )
    v14 = -1;
  *(_QWORD *)&v50 = (unsigned int)v55;
  if ( (unsigned int)sub_1800226A0(a1, v18, (int *)&v50 + 2) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v50 + 3) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v51) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v51 + 1) )
    v14 = -1;
  if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v51 + 2) )
    v14 = -1;
  if ( (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), (_DWORD *)&v51 + 3) )
    v14 = -1;
  v19 = sub_180022450(a1, *(_QWORD *)(a1 + 96), &v55);
  v20 = DWORD2(v50);
  if ( v19 )
    v14 = -1;
  v21 = (unsigned int)v55;
  v47 = (unsigned int)v55;
  if ( v14 )
    goto LABEL_62;
  if ( a4 )
  {
    v22 = a5;
    if ( DWORD2(v50) >= a5 )
    {
      v23 = a5;
    }
    else
    {
      *(_BYTE *)(DWORD2(v50) + a4) = 0;
      v23 = v20;
    }
    if ( v20
      && v22
      && (*(unsigned int (__fastcall **)(_QWORD, _QWORD, __int64, _QWORD))(a1 + 8))(
           *(_QWORD *)(a1 + 56),
           *(_QWORD *)(a1 + 96),
           v58,
           v23) != v23 )
    {
      v14 = -1;
    }
    v20 -= v23;
    if ( v14 )
      goto LABEL_62;
  }
  v24 = a6;
  if ( !a6 )
  {
LABEL_62:
    v25 = HIDWORD(v50);
    v29 = HIDWORD(v50) + v20;
  }
  else
  {
    v25 = HIDWORD(v50);
    v26 = a7;
    v55 = HIDWORD(v50);
    if ( HIDWORD(v50) >= a7 )
      v55 = a7;
    if ( v20 )
    {
      v27 = sub_180023380(a1, *(_QWORD *)(a1 + 96), v20);
      v26 = a7;
      v24 = a6;
      if ( v27 )
        v14 = -1;
      else
        v20 = 0;
    }
    if ( v25 && v26 )
    {
      v28 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64, _QWORD))(a1 + 8))(
              *(_QWORD *)(a1 + 56),
              *(_QWORD *)(a1 + 96),
              v24,
              (unsigned int)v55);
      if ( v28 != v55 )
        v14 = -1;
      v29 = v25 - v55 + v20;
    }
    else
    {
      v29 = v25 - v55 + v20;
    }
  }
  if ( !v14 )
  {
    if ( !v25 )
      goto LABEL_90;
    v30 = v29 - v25;
    LODWORD(v55) = v30;
    if ( v30 )
    {
      if ( (unsigned int)sub_180023380(a1, *(_QWORD *)(a1 + 96), v30) )
        v14 = -1;
      else
        LODWORD(v55) = 0;
    }
    do
    {
      if ( (unsigned int)sub_1800226A0(a1, *(_QWORD *)(a1 + 96), &v46) )
        v14 = -1;
      v31 = sub_1800226A0(a1, *(_QWORD *)(a1 + 96), (int *)&v45);
      v32 = v45;
      if ( v31 )
        v14 = -1;
      if ( v46 == 1 )
      {
        if ( (_QWORD)v50 == 0xFFFFFFFFLL )
        {
          v33 = sub_180022520(a1, *(_QWORD *)(a1 + 96), (__int64 *)&v50);
          v25 = HIDWORD(v50);
          if ( v33 )
            v14 = -1;
        }
        if ( *((_QWORD *)&v49 + 1) == 0xFFFFFFFFLL )
        {
          v34 = sub_180022520(a1, *(_QWORD *)(a1 + 96), (__int64 *)&v49 + 1);
          v25 = HIDWORD(v50);
          if ( v34 )
            v14 = -1;
        }
        if ( v21 == 0xFFFFFFFFLL )
        {
          v35 = sub_180022520(a1, *(_QWORD *)(a1 + 96), &v47);
          v21 = v47;
          if ( v35 )
            v14 = -1;
        }
        if ( DWORD1(v51) == -1 && (unsigned int)sub_180022450(a1, *(_QWORD *)(a1 + 96), v54) )
          v14 = -1;
      }
      else if ( (unsigned int)sub_180023380(a1, *(_QWORD *)(a1 + 96), v45) )
      {
        v14 = -1;
      }
      v9 += v32 + 4;
    }
    while ( v9 < v25 );
    v29 = v55;
    v11 = v56;
    if ( !v14 )
    {
LABEL_90:
      v36 = a8;
      if ( a8 )
      {
        v37 = v51;
        v38 = a9;
        if ( (unsigned int)v51 >= a9 )
        {
          LODWORD(v55) = a9;
        }
        else
        {
          *(_BYTE *)((unsigned int)v51 + a8) = 0;
          LODWORD(v55) = v37;
        }
        if ( v29 )
        {
          v39 = sub_180023380(a1, *(_QWORD *)(a1 + 96), v29);
          v36 = a8;
          if ( v39 )
            v14 = -1;
        }
        if ( v37 )
        {
          if ( v38 )
          {
            v40 = (*(__int64 (__fastcall **)(_QWORD, _QWORD, __int64, _QWORD))(a1 + 8))(
                    *(_QWORD *)(a1 + 56),
                    *(_QWORD *)(a1 + 96),
                    v36,
                    (unsigned int)v55);
            if ( v40 != (_DWORD)v55 )
              return (unsigned int)-1;
          }
        }
        if ( v14 )
          return v14;
      }
      if ( v11 )
      {
        v41 = v49;
        *(_OWORD *)v11 = v48;
        v42 = v50;
        *(_OWORD *)(v11 + 16) = v41;
        v43 = v51;
        *(_OWORD *)(v11 + 32) = v42;
        v44 = v52;
        *(_OWORD *)(v11 + 48) = v43;
        *(_QWORD *)&v43 = v53;
        *(_OWORD *)(v11 + 64) = v44;
        *(_QWORD *)(v11 + 80) = v43;
      }
      if ( v57 )
        *v57 = v21;
    }
  }
  return v14;
}
// 180021E28: conditional instruction was optimized away because r14d.4!=0
// 180021AF0: using guessed type int var_50[6];

//----- (0000000180022040) ----------------------------------------------------
_BYTE *__fastcall sub_180022040(__int64 a1, __int64 a2)
{
  __int64 v2; // r12
  unsigned __int64 v4; // r14
  _BYTE *result; // rax
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // r15
  _BYTE *v8; // rbx
  unsigned __int64 v9; // rbp
  __int64 v10; // rsi
  unsigned int v11; // edi
  unsigned int v12; // ecx
  __int64 v13; // rax

  v2 = 0LL;
  v4 = 0xFFFFLL;
  if ( (unsigned int)sub_180023380(a1, a2, 0LL) )
    return 0LL;
  v6 = sub_1800233B0(a1);
  v7 = v6;
  if ( v6 < 0xFFFF )
    v4 = v6;
  result = malloc(0x404uLL);
  v8 = result;
  if ( result )
  {
    v9 = 4LL;
    while ( v9 < v4 )
    {
      v9 += 1024LL;
      if ( v9 > v4 )
        v9 = v4;
      v10 = v7 - v9;
      v11 = v9 <= 0x404 ? v9 : 1028;
      if ( (unsigned int)sub_180023380(a1, a2, v10)
        || (*(unsigned int (__fastcall **)(_QWORD, __int64, _BYTE *, _QWORD))(a1 + 8))(
             *(_QWORD *)(a1 + 56),
             a2,
             v8,
             v11) != v11 )
      {
        break;
      }
      v12 = v11 - 3;
      v13 = (int)(v11 - 3);
      if ( (int)(v11 - 3) > 0 )
      {
        while ( 1 )
        {
          --v13;
          --v12;
          if ( v8[v13] == 80 && v8[v13 + 1] == 75 && v8[v13 + 2] == 5 && v8[v13 + 3] == 6 )
            break;
          if ( v13 <= 0 )
            goto LABEL_22;
        }
        v2 = v10 + (int)v12;
        if ( v2 )
          break;
      }
LABEL_22:
      ;
    }
    free(v8);
    return (_BYTE *)v2;
  }
  return result;
}

//----- (00000001800221C0) ----------------------------------------------------
__int64 __fastcall sub_1800221C0(__int64 a1, __int64 a2)
{
  unsigned __int64 v4; // r12
  __int64 v5; // r13
  unsigned __int64 v7; // rax
  __int64 v8; // rdi
  _BYTE *v9; // rbx
  unsigned __int64 i; // rbp
  __int64 v11; // rsi
  unsigned int v12; // edi
  unsigned int v13; // ecx
  __int64 v14; // rax
  __int64 v15; // rbx
  __int64 v16; // [rsp+70h] [rbp+18h] BYREF
  __int64 v17; // [rsp+78h] [rbp+20h] BYREF

  v4 = 0xFFFFLL;
  v5 = 0LL;
  if ( (unsigned int)sub_180023380(a1, a2, 0LL) )
    return 0LL;
  v7 = sub_1800233B0(a1);
  v16 = v7;
  v8 = v7;
  if ( v7 < 0xFFFF )
    v4 = v7;
  v9 = malloc(0x404uLL);
  if ( !v9 )
    return 0LL;
  for ( i = 4LL; i < v4; v8 = v16 )
  {
    i += 1024LL;
    if ( i > v4 )
      i = v4;
    v11 = v8 - i;
    v12 = i <= 0x404 ? i : 1028;
    if ( (unsigned int)sub_180023380(a1, a2, v11)
      || (*(unsigned int (__fastcall **)(_QWORD, __int64, _BYTE *, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 56), a2, v9, v12) != v12 )
    {
      break;
    }
    v13 = v12 - 3;
    v14 = (int)(v12 - 3);
    if ( (int)(v12 - 3) > 0 )
    {
      while ( 1 )
      {
        --v14;
        --v13;
        if ( v9[v14] == 80 && v9[v14 + 1] == 75 && v9[v14 + 2] == 6 && v9[v14 + 3] == 7 )
          break;
        if ( v14 <= 0 )
          goto LABEL_22;
      }
      v5 = v11 + (int)v13;
      if ( v5 )
        break;
    }
LABEL_22:
    ;
  }
  free(v9);
  if ( !v5 )
    return 0LL;
  if ( (unsigned int)sub_180023380(a1, a2, v5) )
    return 0LL;
  if ( (unsigned int)sub_180022450(a1, a2, &v16) )
    return 0LL;
  if ( (unsigned int)sub_180022450(a1, a2, &v16) )
    return 0LL;
  if ( (_DWORD)v16 )
    return 0LL;
  if ( (unsigned int)sub_180022520(a1, a2, &v17) )
    return 0LL;
  if ( (unsigned int)sub_180022450(a1, a2, &v16) )
    return 0LL;
  if ( (_DWORD)v16 != 1 )
    return 0LL;
  v15 = v17;
  if ( (unsigned int)sub_180023380(a1, a2, v17) || (unsigned int)sub_180022450(a1, a2, &v16) )
    return 0LL;
  if ( (_DWORD)v16 != 101075792 )
    return 0LL;
  return v15;
}

//----- (00000001800223E0) ----------------------------------------------------
__int64 __fastcall sub_1800223E0(__int64 a1, __int64 a2, _DWORD *a3)
{
  unsigned __int8 v7; // [rsp+30h] [rbp+8h] BYREF

  if ( (*(unsigned int (__fastcall **)(_QWORD, __int64, unsigned __int8 *, __int64))(a1 + 8))(
         *(_QWORD *)(a1 + 56),
         a2,
         &v7,
         1LL) != 1 )
    return (unsigned int)-((*(unsigned int (__fastcall **)(_QWORD, __int64))(a1 + 48))(*(_QWORD *)(a1 + 56), a2) != 0);
  *a3 = v7;
  return 0LL;
}

//----- (0000000180022450) ----------------------------------------------------
__int64 __fastcall sub_180022450(__int64 a1, __int64 a2, _DWORD *a3)
{
  unsigned int v6; // eax
  int v7; // r10d
  int v8; // ebx
  unsigned int v9; // r9d
  unsigned int v10; // eax
  int v11; // ebx
  unsigned int v12; // eax
  int v13; // ebx
  int v15; // [rsp+48h] [rbp+20h] BYREF

  v15 = 0;
  v6 = sub_1800223E0(a1, a2, &v15);
  v7 = v15;
  v8 = v15;
  v9 = v6;
  if ( !v6 )
  {
    v10 = sub_1800223E0(a1, a2, &v15);
    v7 = v15;
    v9 = v10;
  }
  v11 = (v7 << 8) | v8;
  if ( !v9 )
  {
    v12 = sub_1800223E0(a1, a2, &v15);
    v7 = v15;
    v9 = v12;
  }
  v13 = (v7 << 16) | v11;
  if ( v9 || (v9 = sub_1800223E0(a1, a2, &v15)) != 0 )
    *a3 = 0;
  else
    *a3 = v13 + (v15 << 24);
  return v9;
}

//----- (0000000180022520) ----------------------------------------------------
__int64 __fastcall sub_180022520(__int64 a1, __int64 a2, __int64 *a3)
{
  unsigned int v6; // eax
  int v7; // r10d
  unsigned int v8; // r9d
  __int64 v9; // rbx
  unsigned int v10; // eax
  __int64 v11; // rbx
  unsigned int v12; // eax
  __int64 v13; // rbx
  unsigned int v14; // eax
  __int64 v15; // rbx
  unsigned int v16; // eax
  __int64 v17; // rbx
  unsigned int v18; // eax
  __int64 v19; // rbx
  unsigned int v20; // eax
  __int64 v21; // rbx
  int v23; // [rsp+48h] [rbp+20h] BYREF

  v23 = 0;
  v6 = sub_1800223E0(a1, a2, &v23);
  v7 = v23;
  v8 = v6;
  v9 = v23;
  if ( !v6 )
  {
    v10 = sub_1800223E0(a1, a2, &v23);
    v7 = v23;
    v8 = v10;
  }
  v11 = ((__int64)v7 << 8) | v9;
  if ( !v8 )
  {
    v12 = sub_1800223E0(a1, a2, &v23);
    v7 = v23;
    v8 = v12;
  }
  v13 = ((__int64)v7 << 16) | v11;
  if ( !v8 )
  {
    v14 = sub_1800223E0(a1, a2, &v23);
    v7 = v23;
    v8 = v14;
  }
  v15 = ((__int64)v7 << 24) | v13;
  if ( !v8 )
  {
    v16 = sub_1800223E0(a1, a2, &v23);
    v7 = v23;
    v8 = v16;
  }
  v17 = ((__int64)v7 << 32) | v15;
  if ( !v8 )
  {
    v18 = sub_1800223E0(a1, a2, &v23);
    v7 = v23;
    v8 = v18;
  }
  v19 = ((__int64)v7 << 40) | v17;
  if ( !v8 )
  {
    v20 = sub_1800223E0(a1, a2, &v23);
    v7 = v23;
    v8 = v20;
  }
  v21 = ((__int64)v7 << 48) | v19;
  if ( v8 || (v8 = sub_1800223E0(a1, a2, &v23)) != 0 )
    *a3 = 0LL;
  else
    *a3 = v21 | ((__int64)v23 << 56);
  return v8;
}

//----- (00000001800226A0) ----------------------------------------------------
__int64 __fastcall sub_1800226A0(__int64 a1, __int64 a2, int *a3)
{
  unsigned int v6; // eax
  int v7; // ebp
  unsigned int v8; // r9d
  int v10; // [rsp+48h] [rbp+20h] BYREF

  v10 = 0;
  v6 = sub_1800223E0(a1, a2, &v10);
  v7 = v10;
  v8 = v6;
  if ( v6 || (v8 = sub_1800223E0(a1, a2, &v10)) != 0 )
    *a3 = 0;
  else
    *a3 = v7 | (v10 << 8);
  return v8;
}

//----- (0000000180022720) ----------------------------------------------------
__int64 __fastcall sub_180022720(_QWORD *Block)
{
  if ( !Block )
    return 4294967194LL;
  if ( Block[34] )
    sub_180022770((__int64)Block);
  ((void (__fastcall *)(_QWORD, _QWORD))Block[5])(Block[7], Block[12]);
  free(Block);
  return 0LL;
}

//----- (0000000180022770) ----------------------------------------------------
__int64 __fastcall sub_180022770(__int64 a1)
{
  unsigned int v1; // edi
  __int64 result; // rax
  __int64 v4; // rbx
  bool v5; // zf

  v1 = 0;
  if ( !a1 )
    return 4294967194LL;
  v4 = *(_QWORD *)(a1 + 272);
  if ( !v4 )
    return 4294967194LL;
  if ( !*(_QWORD *)(v4 + 160) && !*(_DWORD *)(v4 + 280) && *(_DWORD *)(v4 + 144) != *(_DWORD *)(v4 + 148) )
    v1 = -105;
  if ( *(_QWORD *)v4 )
    free(*(void **)v4);
  v5 = *(_DWORD *)(v4 + 104) == 8;
  *(_QWORD *)v4 = 0LL;
  if ( v5 )
    sub_1800202F0((_QWORD *)(v4 + 8));
  *(_DWORD *)(v4 + 104) = 0;
  free((void *)v4);
  result = v1;
  *(_QWORD *)(a1 + 272) = 0LL;
  return result;
}

//----- (0000000180022830) ----------------------------------------------------
__int64 __fastcall sub_180022830(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        unsigned int a4,
        __int64 a5,
        unsigned int a6,
        __int64 a7,
        unsigned int a8)
{
  return sub_180021AF0(a1, a2, 0LL, a3, a4, a5, a6, a7, a8);
}

//----- (0000000180022880) ----------------------------------------------------
__int64 __fastcall sub_180022880(__int64 a1, _OWORD *a2)
{
  __int64 result; // rax

  if ( !a1 )
    return 4294967194LL;
  result = 0LL;
  *a2 = *(_OWORD *)(a1 + 104);
  return result;
}

//----- (00000001800228A0) ----------------------------------------------------
__int64 __fastcall sub_1800228A0(_QWORD *a1)
{
  __int64 result; // rax

  if ( !a1 )
    return 4294967194LL;
  a1[17] = a1[21];
  a1[16] = 0LL;
  result = sub_180021AF0((__int64)a1, (__int64)(a1 + 22), a1 + 33, 0LL, 0, 0LL, 0, 0LL, 0);
  a1[18] = (_DWORD)result == 0;
  return result;
}

//----- (0000000180022920) ----------------------------------------------------
__int64 __fastcall sub_180022920(__int64 a1)
{
  __int64 result; // rax
  __int64 v3; // rcx
  int v4; // ecx
  int v5; // eax

  if ( !a1 )
    return 4294967194LL;
  if ( !*(_QWORD *)(a1 + 144) )
    return 4294967196LL;
  v3 = *(_QWORD *)(a1 + 104);
  if ( v3 != 0xFFFF && *(_QWORD *)(a1 + 128) + 1LL == v3 )
    return 4294967196LL;
  v4 = *(_DWORD *)(a1 + 220) + *(_DWORD *)(a1 + 224);
  v5 = *(_DWORD *)(a1 + 216) + 46;
  ++*(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 136) += (unsigned int)(v4 + v5);
  result = sub_180021AF0(a1, a1 + 176, (__int64 *)(a1 + 264), 0LL, 0, 0LL, 0, 0LL, 0);
  *(_QWORD *)(a1 + 144) = (_DWORD)result == 0;
  return result;
}

//----- (00000001800229E0) ----------------------------------------------------
__int64 __fastcall sub_1800229E0(__int64 a1)
{
  return sub_180022C90(a1, 0LL, 1);
}

//----- (00000001800229F0) ----------------------------------------------------
__int64 __fastcall sub_1800229F0(__int64 a1)
{
  return sub_180022A10(a1, 0LL, 0LL, 0, 0LL);
}

//----- (0000000180022A10) ----------------------------------------------------
__int64 __fastcall sub_180022A10(__int64 a1, _DWORD *a2, _DWORD *a3, int a4, __int64 a5)
{
  __int64 result; // rax
  char *v10; // rbx
  void *v11; // rax
  int v12; // eax
  int v13; // eax
  __int64 v14; // rcx
  unsigned int v15; // esi
  unsigned int v16; // [rsp+20h] [rbp-28h] BYREF
  __int64 v17[4]; // [rsp+28h] [rbp-20h] BYREF

  if ( a5 || !a1 || !*(_QWORD *)(a1 + 144) )
    return 4294967194LL;
  if ( *(_QWORD *)(a1 + 272) )
    sub_180022770(a1);
  if ( (unsigned int)sub_180021870(a1, &v16, v17, (unsigned int *)&a5) )
    return 4294967193LL;
  v10 = (char *)malloc(0x120uLL);
  if ( !v10 )
    return 4294967192LL;
  v11 = malloc(0x4000uLL);
  *((_QWORD *)v10 + 14) = v17[0];
  *((_DWORD *)v10 + 30) = a5;
  *(_QWORD *)v10 = v11;
  *((_QWORD *)v10 + 16) = 0LL;
  *((_DWORD *)v10 + 70) = a4;
  if ( !v11 )
  {
    free(v10);
    return 4294967192LL;
  }
  *((_DWORD *)v10 + 26) = 0;
  if ( a2 )
    *a2 = *(_DWORD *)(a1 + 188);
  if ( a3 )
  {
    *a3 = 6;
    v12 = *(_DWORD *)(a1 + 184) & 6;
    switch ( v12 )
    {
      case 2:
        *a3 = 9;
        break;
      case 4:
        *a3 = 2;
        break;
      case 6:
        *a3 = 1;
        break;
    }
  }
  *((_DWORD *)v10 + 37) = *(_DWORD *)(a1 + 196);
  *((_DWORD *)v10 + 36) = 0;
  *((_QWORD *)v10 + 17) = 0LL;
  *((_DWORD *)v10 + 66) = *(_DWORD *)(a1 + 188);
  *((_QWORD *)v10 + 32) = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(v10 + 168) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 184) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 200) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 216) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 232) = *(_OWORD *)(a1 + 64);
  *((_QWORD *)v10 + 31) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)v10 + 34) = *(_QWORD *)(a1 + 120);
  *((_DWORD *)v10 + 9) = 0;
  v13 = *(_DWORD *)(a1 + 188);
  if ( v13 != 12 || a4 )
  {
    if ( v13 == 8 && !a4 )
    {
      *((_QWORD *)v10 + 7) = 0LL;
      *((_QWORD *)v10 + 1) = 0LL;
      *((_QWORD *)v10 + 8) = 0LL;
      *((_QWORD *)v10 + 9) = 0LL;
      *((_DWORD *)v10 + 4) = 0;
      v15 = sub_18001E940((_QWORD *)v10 + 1, -15, "1.2.13", 88);
      if ( v15 )
      {
        free(v10);
        return v15;
      }
      *((_DWORD *)v10 + 26) = 8;
    }
  }
  else
  {
    *((_DWORD *)v10 + 70) = 1;
  }
  v14 = v16;
  *((_QWORD *)v10 + 19) = *(_QWORD *)(a1 + 200);
  *((_QWORD *)v10 + 20) = *(_QWORD *)(a1 + 208);
  *((_QWORD *)v10 + 12) = *(_QWORD *)(a1 + 264) + v14 + 30;
  result = 0LL;
  *((_DWORD *)v10 + 4) = 0;
  *(_QWORD *)(a1 + 272) = v10;
  *(_DWORD *)(a1 + 280) = 0;
  return result;
}
// 180022A10: using guessed type __int64 var_20[4];

//----- (0000000180022C90) ----------------------------------------------------
__int64 __fastcall sub_180022C90(__int64 a1, __int64 a2, int a3)
{
  __int128 v4; // xmm1
  __int128 v5; // xmm0
  __int128 v6; // xmm1
  __int128 v7; // xmm0
  __int64 result; // rax
  __int64 v9; // rax
  unsigned __int64 v10; // rsi
  int v11; // ebx
  int v12; // eax
  _BYTE *v13; // rax
  _QWORD *v14; // rax
  _QWORD *v15; // rbx
  __int128 *v16; // rdx
  __int128 *v17; // rcx
  __int64 v18; // r8
  __int128 v19; // xmm0
  __int64 v20; // [rsp+20h] [rbp-E0h] BYREF
  int v21; // [rsp+28h] [rbp-D8h] BYREF
  __int64 v22[2]; // [rsp+30h] [rbp-D0h] BYREF
  __int128 v23[2]; // [rsp+40h] [rbp-C0h] BYREF
  __int128 v24; // [rsp+60h] [rbp-A0h]
  __int128 v25; // [rsp+70h] [rbp-90h]
  __int128 v26; // [rsp+80h] [rbp-80h]
  __int64 v27; // [rsp+90h] [rbp-70h]
  int v28; // [rsp+98h] [rbp-68h]
  __int64 v29; // [rsp+A0h] [rbp-60h]
  __int64 v30; // [rsp+A8h] [rbp-58h] BYREF
  int v31; // [rsp+B0h] [rbp-50h] BYREF
  __int64 v32; // [rsp+B8h] [rbp-48h]
  unsigned __int64 v33; // [rsp+D8h] [rbp-28h]
  __int64 v34; // [rsp+E0h] [rbp-20h] BYREF
  __int64 v35[14]; // [rsp+E8h] [rbp-18h] BYREF
  int v36; // [rsp+158h] [rbp+58h]
  int v37; // [rsp+15Ch] [rbp+5Ch]

  v27 = 0LL;
  *((_QWORD *)&v26 + 1) = 0LL;
  if ( a2 )
  {
    v4 = *(_OWORD *)(a2 + 16);
    v23[0] = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 32);
    v23[1] = v4;
    v6 = *(_OWORD *)(a2 + 48);
    v24 = v5;
    v7 = *(_OWORD *)(a2 + 64);
    v25 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a2 + 80);
    v26 = v7;
    v27 = v6;
  }
  else
  {
    sub_180023410((FILE *(__fastcall **)(__int64, const char *, char))v23);
  }
  v28 = a3;
  result = sub_180023360((__int64)v23);
  v29 = result;
  if ( result )
  {
    v9 = sub_1800221C0((__int64)v23, result);
    v10 = v9;
    if ( v9 )
    {
      v37 = 1;
      v11 = 0;
      if ( (unsigned int)sub_180023380((__int64)v23, v29, v9) )
        v11 = -1;
      if ( (unsigned int)sub_180022450((__int64)v23, v29, &v20) )
        v11 = -1;
      if ( (unsigned int)sub_180022520((__int64)v23, v29, v22) )
        v11 = -1;
      if ( (unsigned int)sub_1800226A0((__int64)v23, v29, (int *)v22) )
        v11 = -1;
      if ( (unsigned int)sub_1800226A0((__int64)v23, v29, (int *)v22) )
        v11 = -1;
      if ( (unsigned int)sub_180022450((__int64)v23, v29, v22) )
        v11 = -1;
      if ( (unsigned int)sub_180022450((__int64)v23, v29, &v21) )
        v11 = -1;
      if ( (unsigned int)sub_180022520((__int64)v23, v29, &v30) )
        v11 = -1;
      if ( (unsigned int)sub_180022520((__int64)v23, v29, &v20) )
        v11 = -1;
      if ( v20 != v30 || v21 || LODWORD(v22[0]) )
        v11 = -103;
      if ( (unsigned int)sub_180022520((__int64)v23, v29, &v34) )
        v11 = -1;
      v12 = sub_180022520((__int64)v23, v29, v35);
      v31 = 0;
    }
    else
    {
      v13 = sub_180022040((__int64)v23, v29);
      v37 = 0;
      v11 = 0;
      v10 = (unsigned __int64)v13;
      if ( !v13 )
        v11 = -1;
      if ( (unsigned int)sub_180023380((__int64)v23, v29, (__int64)v13) )
        v11 = -1;
      if ( (unsigned int)sub_180022450((__int64)v23, v29, &v20) )
        v11 = -1;
      if ( (unsigned int)sub_1800226A0((__int64)v23, v29, (int *)v22) )
        v11 = -1;
      if ( (unsigned int)sub_1800226A0((__int64)v23, v29, &v21) )
        v11 = -1;
      if ( (unsigned int)sub_1800226A0((__int64)v23, v29, (int *)&v20) )
        v11 = -1;
      v30 = (unsigned int)v20;
      if ( (unsigned int)sub_1800226A0((__int64)v23, v29, (int *)&v20) )
        v11 = -1;
      if ( (unsigned int)v20 != v30 || v21 || LODWORD(v22[0]) )
        v11 = -103;
      if ( (unsigned int)sub_180022450((__int64)v23, v29, &v20) )
        v11 = -1;
      v34 = (unsigned int)v20;
      if ( (unsigned int)sub_180022450((__int64)v23, v29, &v20) )
        v11 = -1;
      v35[0] = (unsigned int)v20;
      v12 = sub_1800226A0((__int64)v23, v29, &v31);
    }
    if ( v12 )
      v11 = -1;
    if ( v10 < v35[0] + v34 || v11 )
    {
      (*((void (__fastcall **)(_QWORD, __int64))&v24 + 1))(*((_QWORD *)&v25 + 1), v29);
      return 0LL;
    }
    else
    {
      v33 = v10;
      v35[13] = 0LL;
      v36 = 0;
      v32 = v10 - v35[0] - v34;
      v14 = malloc(0x120uLL);
      v15 = v14;
      if ( v14 )
      {
        v16 = (__int128 *)v14;
        v17 = v23;
        v18 = 2LL;
        do
        {
          v16 += 8;
          v19 = *v17;
          v17 += 8;
          *(v16 - 8) = v19;
          *(v16 - 7) = *(v17 - 7);
          *(v16 - 6) = *(v17 - 6);
          *(v16 - 5) = *(v17 - 5);
          *(v16 - 4) = *(v17 - 4);
          *(v16 - 3) = *(v17 - 3);
          *(v16 - 2) = *(v17 - 2);
          *(v16 - 1) = *(v17 - 1);
          --v18;
        }
        while ( v18 );
        *v16 = *v17;
        v16[1] = v17[1];
        sub_1800228A0(v14);
      }
      return (__int64)v15;
    }
  }
  return result;
}

//----- (00000001800230A0) ----------------------------------------------------
__int64 __fastcall sub_1800230A0(__int64 a1, __int64 a2, unsigned int a3)
{
  unsigned int v3; // r12d
  __int64 v5; // rbx
  unsigned __int64 v6; // rax
  unsigned int v7; // edi
  int v8; // eax
  __int64 v9; // r14
  char *v10; // r15
  int v11; // ebp
  unsigned int v12; // esi
  int v13; // ecx
  __int64 v14; // rdi
  int v15; // eax
  unsigned int v16; // esi
  __int64 v17; // rdx
  __int64 v18; // r8
  char *v19; // rdx
  int v20; // ecx
  int v21; // eax

  v3 = 0;
  if ( !a1 )
    return 4294967194LL;
  v5 = *(_QWORD *)(a1 + 272);
  if ( !v5 )
    return 4294967194LL;
  if ( !*(_QWORD *)v5 )
    return 4294967196LL;
  if ( !a3 )
    return 0LL;
  *(_QWORD *)(v5 + 24) = a2;
  *(_DWORD *)(v5 + 32) = a3;
  if ( (unsigned __int64)a3 > *(_QWORD *)(v5 + 160) && !*(_DWORD *)(v5 + 280) )
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 160);
  if ( a3 > *(_QWORD *)(v5 + 152) + (unsigned __int64)*(unsigned int *)(v5 + 16) && *(_DWORD *)(v5 + 280) )
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 16) + *(_DWORD *)(v5 + 152);
  if ( !*(_DWORD *)(v5 + 32) )
    return v3;
  while ( 1 )
  {
    if ( !*(_DWORD *)(v5 + 16) )
    {
      v6 = *(_QWORD *)(v5 + 152);
      if ( v6 )
        break;
    }
LABEL_23:
    v8 = *(_DWORD *)(v5 + 264);
    if ( !v8 || *(_DWORD *)(v5 + 280) )
    {
      v16 = *(_DWORD *)(v5 + 16);
      if ( !v16 && !*(_QWORD *)(v5 + 152) )
        return v3;
      if ( *(_DWORD *)(v5 + 32) < v16 )
        v16 = *(_DWORD *)(v5 + 32);
      if ( v16 )
      {
        v17 = 0LL;
        v18 = v16;
        do
        {
          ++v17;
          *(_BYTE *)(v17 + *(_QWORD *)(v5 + 24) - 1) = *(_BYTE *)(v17 + *(_QWORD *)(v5 + 8) - 1);
          --v18;
        }
        while ( v18 );
      }
      v19 = *(char **)(v5 + 24);
      v20 = *(_DWORD *)(v5 + 144);
      *(_QWORD *)(v5 + 136) += v16;
      v21 = sub_180021570(v20, v19, v16);
      *(_QWORD *)(v5 + 160) -= v16;
      *(_DWORD *)(v5 + 16) -= v16;
      *(_DWORD *)(v5 + 32) -= v16;
      *(_QWORD *)(v5 + 24) += v16;
      *(_QWORD *)(v5 + 8) += v16;
      *(_DWORD *)(v5 + 36) += v16;
      v3 += v16;
      *(_DWORD *)(v5 + 144) = v21;
    }
    else if ( v8 != 12 )
    {
      v9 = *(unsigned int *)(v5 + 36);
      v10 = *(char **)(v5 + 24);
      v11 = sub_18001EB30(v5 + 8, 2);
      if ( v11 >= 0 )
      {
        if ( *(_QWORD *)(v5 + 40) )
          v11 = -3;
      }
      v12 = *(_DWORD *)(v5 + 36);
      v13 = *(_DWORD *)(v5 + 144);
      v14 = v12 - v9;
      *(_QWORD *)(v5 + 136) += v14;
      v15 = sub_180021570(v13, v10, v14);
      *(_QWORD *)(v5 + 160) -= v14;
      v3 += v12 - v9;
      *(_DWORD *)(v5 + 144) = v15;
      if ( v11 == 1 )
        return v3;
      if ( v11 )
        return (unsigned int)v11;
    }
    if ( !*(_DWORD *)(v5 + 32) )
      return v3;
  }
  v7 = 0x4000;
  if ( v6 < 0x4000 )
    v7 = *(_QWORD *)(v5 + 152);
  if ( !(unsigned int)sub_180023380(v5 + 168, *(_QWORD *)(v5 + 256), *(_QWORD *)(v5 + 96) + *(_QWORD *)(v5 + 272))
    && (*(unsigned int (__fastcall **)(_QWORD, _QWORD, _QWORD, _QWORD))(v5 + 176))(
         *(_QWORD *)(v5 + 224),
         *(_QWORD *)(v5 + 256),
         *(_QWORD *)v5,
         v7) == v7 )
  {
    *(_QWORD *)(v5 + 96) += v7;
    *(_QWORD *)(v5 + 152) -= v7;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)v5;
    *(_DWORD *)(v5 + 16) = v7;
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}
// 1800231A4: conditional instruction was optimized away because eax.4 is in (1..3FFF)

//----- (0000000180023360) ----------------------------------------------------
__int64 __fastcall sub_180023360(__int64 a1)
{
  __int64 (__fastcall *v1)(__int64); // r9
  __int64 v3; // rcx

  v1 = *(__int64 (__fastcall **)(__int64))a1;
  v3 = *(_QWORD *)(a1 + 56);
  if ( v1 )
    return v1(v3);
  else
    return (*(__int64 (__fastcall **)(__int64))(a1 + 64))(v3);
}

//----- (0000000180023380) ----------------------------------------------------
__int64 __fastcall sub_180023380(__int64 a1, __int64 a2, __int64 a3)
{
  __int64 (__fastcall *v3)(_QWORD); // rax

  v3 = *(__int64 (__fastcall **)(_QWORD))(a1 + 32);
  if ( v3 )
    return v3(*(_QWORD *)(a1 + 56));
  if ( (unsigned int)a3 == a3 )
    return (*(__int64 (__fastcall **)(_QWORD))(a1 + 80))(*(_QWORD *)(a1 + 56));
  return 0xFFFFFFFFLL;
}

//----- (00000001800233B0) ----------------------------------------------------
__int64 __fastcall sub_1800233B0(__int64 a1)
{
  bool v1; // zf
  __int64 v3; // rcx
  __int64 result; // rax

  v1 = *(_QWORD *)(a1 + 32) == 0LL;
  v3 = *(_QWORD *)(a1 + 56);
  if ( !v1 )
    return (*(__int64 (__fastcall **)(__int64))(a1 + 24))(v3);
  LODWORD(result) = (*(__int64 (__fastcall **)(__int64))(a1 + 72))(v3);
  if ( (_DWORD)result == -1 )
    return -1LL;
  else
    return (unsigned int)result;
}

//----- (00000001800233F0) ----------------------------------------------------
int __fastcall sub_1800233F0(__int64 a1, FILE *a2)
{
  return fclose(a2);
}

//----- (0000000180023400) ----------------------------------------------------
int __fastcall sub_180023400(__int64 a1, FILE *a2)
{
  return ferror(a2);
}

//----- (0000000180023410) ----------------------------------------------------
int (__fastcall *__fastcall sub_180023410(
        FILE *(__fastcall **a1)(__int64 a1, const char *a2, char a3)))(__int64 a1, FILE *a2)
{
  int (__fastcall *result)(__int64, FILE *); // rax

  a1[7] = 0LL;
  *a1 = sub_180023470;
  a1[1] = (FILE *(__fastcall *)(__int64, const char *, char))sub_1800234C0;
  a1[2] = (FILE *(__fastcall *)(__int64, const char *, char))sub_180023550;
  a1[3] = (FILE *(__fastcall *)(__int64, const char *, char))sub_180023540;
  a1[4] = (FILE *(__fastcall *)(__int64, const char *, char))sub_1800234E0;
  a1[5] = (FILE *(__fastcall *)(__int64, const char *, char))sub_1800233F0;
  result = sub_180023400;
  a1[6] = (FILE *(__fastcall *)(__int64, const char *, char))sub_180023400;
  return result;
}

//----- (0000000180023470) ----------------------------------------------------
FILE *__fastcall sub_180023470(__int64 a1, const char *a2, char a3)
{
  const char *v4; // rdx

  if ( (a3 & 3) == 1 )
  {
    v4 = "rb";
  }
  else if ( (a3 & 4) != 0 )
  {
    v4 = "r+b";
  }
  else
  {
    v4 = "wb";
    if ( (a3 & 8) == 0 )
      v4 = 0LL;
  }
  if ( a2 && v4 )
    return fopen(a2, v4);
  else
    return 0LL;
}

//----- (00000001800234C0) ----------------------------------------------------
size_t __fastcall sub_1800234C0(__int64 a1, FILE *a2, void *a3, unsigned int a4)
{
  return fread(a3, 1uLL, a4, a2);
}

//----- (00000001800234E0) ----------------------------------------------------
__int64 __fastcall sub_1800234E0(__int64 a1, FILE *a2, __int64 a3, int a4)
{
  unsigned int v4; // ebx
  int v6; // r9d
  int v8; // r8d

  v4 = 0;
  if ( a4 )
  {
    v6 = a4 - 1;
    if ( v6 )
    {
      if ( v6 != 1 )
        return 0xFFFFFFFFLL;
      v8 = 2;
    }
    else
    {
      v8 = 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if ( fseeki64(a2, a3, v8) )
    return (unsigned int)-1;
  return v4;
}

//----- (0000000180023540) ----------------------------------------------------
__int64 __fastcall sub_180023540(__int64 a1, FILE *a2)
{
  return ftelli64(a2);
}

//----- (0000000180023550) ----------------------------------------------------
size_t __fastcall sub_180023550(__int64 a1, FILE *a2, const void *a3, unsigned int a4)
{
  return fwrite(a3, 1uLL, a4, a2);
}

//----- (0000000180023784) ----------------------------------------------------
char sub_180023784()
{
  if ( !sub_1800248F0() )
    return 0;
  if ( !sub_1800248F0() )
  {
    sub_1800248F0();
    return 0;
  }
  return 1;
}

//----- (00000001800245BC) ----------------------------------------------------
void sub_1800245BC()
{
  InitializeSListHead(&stru_1800306B0);
}
// 1800306B0: using guessed type union _SLIST_HEADER stru_1800306B0;

//----- (00000001800245CC) ----------------------------------------------------
void __fastcall sub_1800245CC()
{
  _std_type_info_destroy_list(&stru_1800306B0);
}
// 18002487E: using guessed type __int64 __fastcall _std_type_info_destroy_list(_QWORD);
// 1800306B0: using guessed type union _SLIST_HEADER stru_1800306B0;

//----- (00000001800245F4) ----------------------------------------------------
void *sub_1800245F4()
{
  return &unk_180030960;
}

//----- (00000001800245FC) ----------------------------------------------------
__int64 sub_1800245FC()
{
  _QWORD *i; // rbx
  __int64 result; // rax

  for ( i = qword_180029700; i < qword_180029700; ++i )
  {
    if ( *i )
      result = ((__int64 (__fastcall *)(_QWORD))*i)(*i);
  }
  return result;
}
// 180029700: using guessed type _QWORD qword_180029700[2];

//----- (0000000180024648) ----------------------------------------------------
void __fastcall sub_180024648()
{
  _QWORD *i; // rbx

  for ( i = qword_180029710; i < qword_180029710; ++i )
  {
    if ( *i )
      ((void (__fastcall *)(_QWORD))*i)(*i);
  }
}
// 180029710: using guessed type _QWORD qword_180029710[2];

//----- (0000000180024694) ----------------------------------------------------
_QWORD *__fastcall sub_180024694(_QWORD *a1, __int64 a2)
{
  *a1 = &std::exception::`vftable';
  a1[1] = 0LL;
  a1[2] = 0LL;
  _std_exception_copy(a2 + 8);
  *a1 = &std::bad_alloc::`vftable';
  return a1;
}
// 180024884: using guessed type __int64 __fastcall _std_exception_copy(_QWORD);
// 180025380: using guessed type void *std::exception::`vftable';
// 1800253B0: using guessed type void *std::bad_alloc::`vftable';

//----- (00000001800246D4) ----------------------------------------------------
_QWORD *__fastcall sub_1800246D4(_QWORD *a1)
{
  a1[2] = 0LL;
  a1[1] = "bad allocation";
  *a1 = &std::bad_alloc::`vftable';
  return a1;
}
// 1800253B0: using guessed type void *std::bad_alloc::`vftable';

//----- (00000001800246F4) ----------------------------------------------------
_QWORD *__fastcall sub_1800246F4(_QWORD *a1, __int64 a2)
{
  *a1 = &std::exception::`vftable';
  a1[1] = 0LL;
  a1[2] = 0LL;
  _std_exception_copy(a2 + 8);
  *a1 = &std::bad_array_new_length::`vftable';
  return a1;
}
// 180024884: using guessed type __int64 __fastcall _std_exception_copy(_QWORD);
// 180025380: using guessed type void *std::exception::`vftable';
// 1800253D8: using guessed type void *std::bad_array_new_length::`vftable';

//----- (0000000180024734) ----------------------------------------------------
_QWORD *__fastcall sub_180024734(_QWORD *a1)
{
  a1[2] = 0LL;
  a1[1] = "bad array new length";
  *a1 = &std::bad_array_new_length::`vftable';
  return a1;
}
// 1800253D8: using guessed type void *std::bad_array_new_length::`vftable';

//----- (0000000180024840) ----------------------------------------------------
_QWORD *__fastcall sub_180024840(_QWORD *a1, char a2)
{
  *a1 = &type_info::`vftable';
  if ( (a2 & 1) != 0 )
    j_j_free(a1);
  return a1;
}
// 180025408: using guessed type void *type_info::`vftable';

//----- (00000001800248F0) ----------------------------------------------------
char sub_1800248F0()
{
  return 1;
}

//----- (00000001800248F4) ----------------------------------------------------
__int64 sub_1800248F4()
{
  return 0LL;
}

//----- (0000000180024F30) ----------------------------------------------------
void sub_180024F30()
{
  void *v0; // rcx

  sub_1800024D0();
  v0 = Block;
  if ( Block )
  {
    j_j_free(Block);
    v0 = 0LL;
    Block = 0LL;
  }
  qword_1800306E0 = 0LL;
  if ( v0 )
  {
    j_j_free(v0);
    Block = 0LL;
  }
  qword_1800306E0 = 0LL;
}
// 1800306E0: using guessed type __int64 qword_1800306E0;

// nfuncs=303 queued=222 decompiled=222 lumina nreq=0 worse=0 better=0
// ALL OK, 222 function(s) have been successfully decompiled
